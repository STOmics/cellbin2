window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cellbin2", "modulename": "cellbin2", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.CUR_DIR", "modulename": "cellbin2", "qualname": "CUR_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2&#x27;"}, {"fullname": "cellbin2.CB2_DIR", "modulename": "cellbin2", "qualname": "CB2_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "$PWD"}, {"fullname": "cellbin2.cellbin_pipeline", "modulename": "cellbin2.cellbin_pipeline", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.cellbin_pipeline.CURR_PATH", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CURR_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2&#x27;"}, {"fullname": "cellbin2.cellbin_pipeline.CB2_PATH", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CB2_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "$PWD"}, {"fullname": "cellbin2.cellbin_pipeline.CONFIG_PATH", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CONFIG_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/config&#x27;"}, {"fullname": "cellbin2.cellbin_pipeline.CONFIG_FILE", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CONFIG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/config/cellbin.yaml&#x27;"}, {"fullname": "cellbin2.cellbin_pipeline.CHIP_MASK_FILE", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CHIP_MASK_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/config/chip_mask.json&#x27;"}, {"fullname": "cellbin2.cellbin_pipeline.DEFAULT_PARAM_FILE", "modulename": "cellbin2.cellbin_pipeline", "qualname": "DEFAULT_PARAM_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/config/default_param.json&#x27;"}, {"fullname": "cellbin2.cellbin_pipeline.SUPPORTED_TRACK_STAINED_TYPES", "modulename": "cellbin2.cellbin_pipeline", "qualname": "SUPPORTED_TRACK_STAINED_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;ssDNA&#x27;, &#x27;DAPI&#x27;, &#x27;HE&#x27;)"}, {"fullname": "cellbin2.cellbin_pipeline.SUPPORTED_STAINED_Types", "modulename": "cellbin2.cellbin_pipeline", "qualname": "SUPPORTED_STAINED_Types", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline", "kind": "class", "doc": "<p>CellBinPipeline class is designed to handle the entire pipeline of cellular image processing and analysis.\nIt includes steps such as image quality control, image analysis, matrix extraction, metrics calculation, and report generation.</p>\n"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.__init__", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.__init__", "kind": "function", "doc": "<p>Initialize the CellBinPipeline class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config_file (str):</strong>  The path to the configuration file.</li>\n<li><strong>chip_mask_file (str):</strong>  The path to the chip mask file.</li>\n<li><strong>weights_root (str):</strong>  The path to the weights root directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">chip_mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">weights_root</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.pp", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.pp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.modules.metadata.ProcParam"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.config", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.config.Config"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.more_images", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.more_images", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Dict, NoneType]"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.research", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.research", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.image_quality_control", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.image_quality_control", "kind": "function", "doc": "<p>Perform image quality control.</p>\n\n<p>This method checks if the QC flag in the processing parameters is set.\nIf set, it imports the image_qc module and runs the image_quality_control function\nwith the specified parameters. If the function returns a non-zero status code,\nthe program exits with a status code of 1.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.image_analysis", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.image_analysis", "kind": "function", "doc": "<p>Perform various image processing tasks including alignment, registration, calibration, segmentation, and matrix extraction.</p>\n\n<p>This method utilizes the scheduler pipeline to process the images based on the provided parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.m_extract", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.m_extract", "kind": "function", "doc": "<p>Extract matrices from the processed images.</p>\n\n<p>This method runs the matrix extraction process if the corresponding flag is set in the processing parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.metrics", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.metrics", "kind": "function", "doc": "<p>Calculate metrics for the processed images and matrices.</p>\n\n<p>This method calculates various metrics if the corresponding flag is set in the processing parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.export_report", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.export_report", "kind": "function", "doc": "<p>Export the analysis report.</p>\n\n<p>This method generates and exports the report if the corresponding flag is set in the processing parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.usr_inp_to_param", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.usr_inp_to_param", "kind": "function", "doc": "<p>Convert user input to processing parameters.</p>\n\n<p>This method converts the user-provided input into a set of processing parameters that will be used\nthroughout the pipeline.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.cellbin_pipeline.CellBinPipeline.run", "modulename": "cellbin2.cellbin_pipeline", "qualname": "CellBinPipeline.run", "kind": "function", "doc": "<p>Run the full analysis pipeline.</p>\n\n<p>This method runs the entire pipeline for image analysis, including the following steps:</p>\n\n<ul>\n<li>Convert user input to parameters</li>\n<li>Perform image quality control</li>\n<li>Perform image analysis</li>\n<li>Extract matrix</li>\n<li>Calculate metrics</li>\n<li>Generate report</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chip_no (str):</strong>  The serial number of the chip.</li>\n<li><strong>input_image (str):</strong>  The path of the input image file.</li>\n<li><strong>more_images (str):</strong>  The paths of other input image files.</li>\n<li><strong>stain_type (str):</strong>  The stain type of the input image.</li>\n<li><strong>param_file (str):</strong>  The path of the input parameter file.</li>\n<li><strong>output_path (str):</strong>  The path of the output directory.</li>\n<li><strong>matrix_path (str):</strong>  The path of the transcriptomics matrix file.</li>\n<li><strong>protein_matrix_path (str):</strong>  The path of the protein matrix file.</li>\n<li><strong>kit (str):</strong>  The version of the kit.</li>\n<li><strong>if_report (bool):</strong>  Whether to generate a report.</li>\n<li><strong>debug (bool):</strong>  Whether to run in debug mode.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">chip_no</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">input_image</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">more_images</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">param_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">matrix_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">protein_matrix_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">kit</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">if_report</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.cellbin_pipeline.pipeline", "modulename": "cellbin2.cellbin_pipeline", "qualname": "pipeline", "kind": "function", "doc": "<p>This function is used to execute the cellbin pipeline.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>weights_root (str):</strong>  The local storage directory path of CNN weight files.</li>\n<li><strong>chip_no (str):</strong>  The sample chip number.</li>\n<li><strong>input_image (str):</strong>  The local path of the stained image.</li>\n<li><strong>stain_type (str):</strong>  The staining type corresponding to the stained image.</li>\n<li><strong>param_file (str):</strong>  The local path of the input parameter file.</li>\n<li><strong>kit (str):</strong>  The sequencing technology.</li>\n<li><strong>output_path (str):</strong>  The local storage directory path for output files.</li>\n<li><strong>matrix_path (str):</strong>  The local storage path of the expression matrix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The status code.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.cellbin_pipeline.main", "modulename": "cellbin2.cellbin_pipeline", "qualname": "main", "kind": "function", "doc": "<p>Main function to execute the cellbin pipeline.</p>\n\n<p>This function acts as the entry - point for the cellbin pipeline. It retrieves the essential parameters\nfrom the parsed command - line arguments and additional parameter dictionary, and then passes them to\nthe <code>pipeline</code> function for execution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>args (argparse.Namespace):</strong>  The parsed command - line arguments, which hold various parameters necessary\nfor the pipeline operation.</li>\n<li><strong>para (dict):</strong>  Additional parameters for the pipeline. These are typically used to provide supplementary\nconfiguration details or context information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">para</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib", "modulename": "cellbin2.contrib", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.CellCorrect", "modulename": "cellbin2.contrib", "qualname": "CellCorrect", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.CellCorrect.expand_r", "modulename": "cellbin2.contrib", "qualname": "CellCorrect.expand_r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.CellCorrect.process", "modulename": "cellbin2.contrib", "qualname": "CellCorrect.process", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.CellCorrect.model_config", "modulename": "cellbin2.contrib", "qualname": "CellCorrect.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.alignment", "modulename": "cellbin2.contrib.alignment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput.moving_image", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput.moving_image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.alignment.basic.ChipFeature"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput.fixed_image", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput.fixed_image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[cellbin2.contrib.alignment.basic.ChipFeature, NoneType]"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput.ref", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput.ref", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[List, List]"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput.dst_shape", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput.dst_shape", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Tuple[int, int], NoneType]"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput.from_stitched", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput.from_stitched", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput.rot90_flag", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput.rot90_flag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput.flip_flag", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput.flip_flag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.contrib.alignment.RegistrationInput.model_config", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationInput.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput.counter_rot90", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput.counter_rot90", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput.flip", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput.flip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput.register_score", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput.register_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput.offset", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput.offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Dict, Tuple[float, float]]"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput.register_mat", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput.register_mat", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput.method", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput.method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.alignment.basic.AlignMode"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput.dst_shape", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput.dst_shape", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[int, int]"}, {"fullname": "cellbin2.contrib.alignment.RegistrationOutput.model_config", "modulename": "cellbin2.contrib.alignment", "qualname": "RegistrationOutput.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.alignment.Registration00Offset", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Offset", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.alignment.Registration00Offset.offset", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Offset.offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "cellbin2.contrib.alignment.Registration00Offset.dist", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Offset.dist", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.alignment.Registration00Offset.Config", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Offset.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.Registration00Offset.Config.arbitrary_types_allowed", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Offset.Config.arbitrary_types_allowed", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "cellbin2.contrib.alignment.Registration00Offset.model_config", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Offset.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "cellbin2.contrib.alignment.Registration00Output", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Output", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.alignment.Registration00Output.rot0", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Output.rot0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.alignment.Registration00Offset"}, {"fullname": "cellbin2.contrib.alignment.Registration00Output.rot90", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Output.rot90", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.alignment.Registration00Offset"}, {"fullname": "cellbin2.contrib.alignment.Registration00Output.rot180", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Output.rot180", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.alignment.Registration00Offset"}, {"fullname": "cellbin2.contrib.alignment.Registration00Output.rot270", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Output.rot270", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.alignment.Registration00Offset"}, {"fullname": "cellbin2.contrib.alignment.Registration00Output.to_dict", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Output.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.Registration00Output.model_config", "modulename": "cellbin2.contrib.alignment", "qualname": "Registration00Output.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.alignment.registration", "modulename": "cellbin2.contrib.alignment", "qualname": "registration", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>moving_image</strong>:  \u5f85\u914d\u51c6\u56fe\uff0c\u901a\u5e38\u662f\u67d3\u8272\u56fe\uff08\u5982ssDNA\u3001HE\uff09</li>\n<li><strong>fixed_image</strong>:  \u56fa\u5b9a\u56fe\uff0c\u901a\u5e38\u662f\u77e9\u9635\uff0c\u652f\u6301TIF/GEM/GEF\u53ca\u6570\u7ec4</li>\n<li><strong>ref</strong>:  \u6a21\u677f\u5468\u671f\uff0c\u4ec5\u5728\u6a21\u677f\u76f8\u5173\u914d\u51c6\u65b9\u6cd5\u4e0b\u7528\u5230</li>\n<li><strong>from_stitched</strong>:  \u4ece\u62fc\u63a5\u56fe\u914d\u51c6</li>\n<li><strong>qc_info</strong>:  QC flag \u4fe1\u606f</li>\n<li><strong>flip_flag</strong>: </li>\n<li><strong>rot90_flag</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RegistrationInfo</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">from_stitched</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">qc_info</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">flip_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rot90_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;cellbin2.contrib.alignment.RegistrationOutput&#x27;&gt;, &lt;class &#x27;cellbin2.contrib.alignment.RegistrationOutput&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.get_alignment_00", "modulename": "cellbin2.contrib.alignment", "qualname": "get_alignment_00", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">re_input</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">RegistrationInput</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">Registration00Output</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic", "modulename": "cellbin2.contrib.alignment.basic", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.basic.AlignMode", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "AlignMode", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "cellbin2.contrib.alignment.basic.AlignMode.TemplateCentroid", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "AlignMode.TemplateCentroid", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AlignMode.TemplateCentroid: 1&gt;"}, {"fullname": "cellbin2.contrib.alignment.basic.AlignMode.Template00Pt", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "AlignMode.Template00Pt", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AlignMode.Template00Pt: 2&gt;"}, {"fullname": "cellbin2.contrib.alignment.basic.AlignMode.ChipBox", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "AlignMode.ChipBox", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AlignMode.ChipBox: 3&gt;"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.LeftTop", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.LeftTop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.LeftBottom", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.LeftBottom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.RightTop", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.RightTop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.RightBottom", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.RightBottom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.ScaleX", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.ScaleX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.ScaleY", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.ScaleY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.ChipSize", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.ChipSize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, float]"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.Rotation", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.Rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.IsAvailable", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.IsAvailable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.chip_box", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.chip_box", "kind": "variable", "doc": "<p>\u4ee5\u5de6\u4e0a \u5de6\u4e0b \u53f3\u4e0b \u53f3\u4e0a\u6392\u5e03</p>\n\n<p>Returns:</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.set_chip_box", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.set_chip_box", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cb</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipBoxInfo.model_config", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipBoxInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.tech_type", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.tech_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.common.TechType"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.chip_box", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.chip_box", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.alignment.basic.ChipBoxInfo"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.template", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.template", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.template.inference.TemplateInfo"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.point00", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.point00", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[int, int]"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.mat", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.mat", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, cellbin2.image.CBImage]"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.anchor_point", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.anchor_point", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[int, int]"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.Config", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.Config.arbitrary_types_allowed", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.Config.arbitrary_types_allowed", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.set_chip_box", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.set_chip_box", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chip_box</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.set_point00", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.set_point00", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.set_anchor_point", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.set_anchor_point", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.set_mat", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.set_mat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.set_template", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.set_template", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">template</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.ChipFeature.model_config", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "ChipFeature.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment", "kind": "class", "doc": "<p>\u914d\u51c6\u57fa\u7c7b</p>\n"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.offset", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, float]"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.rot90", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.rot90", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.hflip", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.hflip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.score", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.transform_image", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.transform_image", "kind": "function", "doc": "<p>\u5bf9\u5f85\u53d8\u6362\u7684\u56fe\u50cf\uff0c\u8c03\u7528\u56fe\u50cf\u5904\u7406\u5e93\u6309\u7167\u5f52\u4e00\u5316\u53c2\u6570\uff0c\u8fd4\u56de\u6807\u51c6\u5316\u540e\u7684\u56fe</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.registration_image", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.registration_image", "kind": "function", "doc": "<p>\u5bf9\u5f85\u53d8\u6362\u7684\u56fe\u50cf\uff0c\u8c03\u7528\u56fe\u50cf\u5904\u7406\u5e93\u6309\u7167\u5bf9\u9f50\u53c2\u6570\uff0c\u8fd4\u56de\u53d8\u6362\u540e\u7684\u56fe</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.get_coordinate_transformation_matrix", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.get_coordinate_transformation_matrix", "kind": "function", "doc": "<p>\u56fe\u50cf\u53d8\u6362\u540e\uff0c\u70b9\u7684\u53d8\u6362\u524d\u540e\u4f4d\u7f6e\u7684\u771f\u5b9e\u53d8\u6362\u77e9\u9635\n\u4e0d\u540c\u4e8e cv2.getRotationMatrix2D \u548c cv2.warpPerspective\u7b49\n\u4e3a\u57fa\u4e8e\u539f\u70b9(0, 0)\u7684\u5750\u6807\u7cfb\n** \u6b64\u51fd\u6570\u77e9\u9635\u59cb\u7ec8\u4ee5\u56fe\u50cf\u5de6\u4e0a\u4e3a\u539f\u70b9\u7684\u5750\u6807\u7cfb</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>shape:</strong>  h, w</li>\n<li><strong>scale:</strong> </li>\n<li><strong>rotate:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">scale</span>, </span><span class=\"param\"><span class=\"n\">rotate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.get_scale_rotate_shape", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.get_scale_rotate_shape", "kind": "function", "doc": "<p>\u5f97\u5230\u65cb\u8f6c\u7f29\u653e\u540e\u7684\u56fe\u50cf\u5c3a\u5ea6\u5927\u5c0f</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>shape:</strong>  h, w</li>\n<li><strong>scale:</strong> </li>\n<li><strong>rotate:</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>x, y</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">scale</span>, </span><span class=\"param\"><span class=\"n\">rotate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.scale_rotate2mat", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.scale_rotate2mat", "kind": "function", "doc": "<p>\u5148\u7f29\u653e\u3001\u65cb\u8f6c \u540e\u5e73\u79fb\u7684\u77e9\u9635\u53d8\u6362</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scale:</strong> </li>\n<li><strong>rotate:</strong> </li>\n<li><strong>offset:</strong>  [x, y] \u9ed8\u8ba4\u6700\u540e\u505a</li>\n<li><strong>rotate_first_flag:</strong>  -- \u82e5scale\u4e3a\u4e24\u4e2a\u65b9\u5411\u4e0d\u540c\u503c\uff0c\u5219\u4f1a\u51fa\u73b0\u65cb\u8f6c\u7684\u4f18\u5148\u7ea7\u95ee\u9898\uff0c\u5373\u5148\u505a\u65cb\u8f6c\u8fd8\u662f\u5148\u505a\u7f29\u653e\uff0c\n\u4e24\u4e2a\u65b9\u6cd5\u6240\u5f97\u5230\u7684\u53d8\u6362\u77e9\u9635\u4e0d\u4e00\u6837\uff0c\u5177\u4f53\u4f53\u73b0\u5728\u65cb\u8f6c\u4f1a\u6539\u53d8\u8f74\u7684\u65b9\u5411\uff0c\u4f7f\u5f97\u7f29\u653e\u7684\u7a0b\u5ea6\u4f1a\u4e0d\u4e00\u6837</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">rotate</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rotate_first_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">matrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.get_points_by_matrix", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.get_points_by_matrix", "kind": "function", "doc": "<p>\u56fe\u50cf\u70b9\u5728\u53d8\u6362\u77e9\u9635\u540e\u7684\u65b0\u5750\u6807</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points:</strong> </li>\n<li><strong>mat:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span>, </span><span class=\"param\"><span class=\"n\">mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.get_matrix_by_points", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.get_matrix_by_points", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>src:</strong> </li>\n<li><strong>points_src:</strong> </li>\n<li><strong>points_dst:</strong> </li>\n<li><strong>dst_shape:</strong> </li>\n<li><strong>need_image:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">points_src</span>,</span><span class=\"param\">\t<span class=\"n\">points_dst</span>,</span><span class=\"param\">\t<span class=\"n\">need_image</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dst_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.transform_points", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.transform_points", "kind": "function", "doc": "<p>\u89d2\u70b9\u7ffb\u8f6c</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>**kwargs:</strong>  points:\nshape:\nflip: 0 | 1, Y axis flip and X axis flip</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.get_mass", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.get_mass", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.check_border", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.check_border", "kind": "function", "doc": "<p>Check array, default (left-up, left_down, right_down, right_up)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.Alignment.multiply_sum", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "Alignment.multiply_sum", "kind": "function", "doc": "<p>\u8ba1\u7b97\u77e9\u9635\u76f8\u4e58\u540e\u7684\u7d2f\u52a0\u548c</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.basic.transform_points", "modulename": "cellbin2.contrib.alignment.basic", "qualname": "transform_points", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points:</strong>  n * 2/4\u5927\u5c0f\u6570\u7ec4 -- (x, y)</li>\n<li><strong>src_shape:</strong>  \u539f\u59cb\u56fe\u50cf\u5c3a\u5bf8 -- (h, w)</li>\n<li><strong>scale:</strong> </li>\n<li><strong>rotation:</strong> </li>\n<li><strong>offset:</strong>  \u8be5\u503c\u5b9a\u4e49\u4e3a\u505a\u5b8c\u6240\u6709\u53d8\u6362\u64cd\u4f5c\u540e\u518d\u64cd\u4f5c -- (x, y)</li>\n<li><strong>flip:</strong>  -1 \u8868\u793a\u4e0d\u505a  0\u4e3ax\u5750\u6807\u7ffb\u8f6c 1\u4e3ay\u5750\u6807\u7ffb\u8f6c</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>new_points:\n  mat: \u4ec5\u4e3ascale\u548crotate\u7684\u53d8\u6362\u77e9\u9635</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">src_shape</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">rotation</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">flip</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;numpy.ndarray&#x27;&gt;, &lt;class &#x27;numpy.matrix&#x27;&gt;]:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.chip_box", "modulename": "cellbin2.contrib.alignment.chip_box", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment", "kind": "class", "doc": "<p>\u6ee1\u8db3TissueBin\u9700\u6c42\uff1a\u5229\u75282\u6a21\u6001\u82af\u7247\u89d2\u4e3a\u7279\u5f81\u70b9\uff0c\u8ba1\u7b97\u53d8\u6362\u53c2\u6570\uff0c\u5b9e\u73b0\u914d\u51c6\u3002\u8bef\u5dee\u7ea6100pix</p>\n", "bases": "cellbin2.contrib.alignment.basic.Alignment"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.__init__", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">flip_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">rot90_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.register_matrix", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.register_matrix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.matrix"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.transforms_matrix", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.transforms_matrix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.matrix"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.rot90_flag", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.rot90_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.no_trans_flag", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.no_trans_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.max_length", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.max_length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.registration_image", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.registration_image", "kind": "function", "doc": "<p>\u5bf9\u5f85\u53d8\u6362\u7684\u56fe\u50cf\uff0c\u8c03\u7528\u56fe\u50cf\u5904\u7406\u5e93\u6309\u7167\u5bf9\u9f50\u53c2\u6570\uff0c\u8fd4\u56de\u53d8\u6362\u540e\u7684\u56fe</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.align_stitched", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.align_stitched", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fixed_image:</strong> </li>\n<li><strong>moving_image:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.chip_box.ChipAlignment.align_transformed", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "ChipAlignment.align_transformed", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fixed_image:</strong> </li>\n<li><strong>moving_image:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.chip_box.chip_align", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "chip_align", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>moving_image</strong>:  \u5f85\u914d\u51c6\u56fe\uff0c\u901a\u5e38\u662f\u67d3\u8272\u56fe\uff08\u5982ssDNA\u3001HE\uff09</li>\n<li><strong>fixed_image</strong>:  \u56fa\u5b9a\u56fe</li>\n<li><strong>from_stitched</strong>:  \u4ece\u62fc\u63a5\u56fe\u5f00\u59cb</li>\n<li><strong>flip_flag</strong>: </li>\n<li><strong>rot90_flag</strong>: </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">from_stitched</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flip_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rot90_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.chip_box.manual_chip_box_register", "modulename": "cellbin2.contrib.alignment.chip_box", "qualname": "manual_chip_box_register", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">image_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">gene_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gene_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_00pt", "modulename": "cellbin2.contrib.alignment.template_00pt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment", "kind": "class", "doc": "<p>\u6ee1\u8db3CellBin\u9700\u6c42\uff0c\u5229\u7528\u82af\u7247\u5207\u5272\u7279\u6027\uff0c\u5b9e\u73b0\u5de6\u4e0a\u89d2\u7b2c\u4e00\u4e2a\u5468\u671f\u8d77\u59cb\u70b9\u5bf9\u9f50\u3002\u5b9e\u73b0\u914d\u51c6\uff0c\u8bef\u5dee\u572810pix</p>\n", "bases": "cellbin2.contrib.alignment.basic.Alignment"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment.__init__", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">([],</span> <span class=\"p\">[])</span>,</span><span class=\"param\">\t<span class=\"n\">shape</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">flip_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rot90_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment.fixed_template", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment.fixed_template", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment.fixed_box", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment.fixed_box", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment.offset_info", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment.offset_info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[int, dict]"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment.registration_image", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment.registration_image", "kind": "function", "doc": "<p>\u4ece\u62fc\u63a5\u56fe\u5f00\u59cb\u914d</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment.align_stitched", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment.align_stitched", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>moving_image:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment.align_transformed", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment.align_transformed", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>moving_image:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.Template00PtAlignment.get_lt_zero_point", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "Template00PtAlignment.get_lt_zero_point", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>template_points:</strong>  np.array, \u6a21\u677f\u70b9 -- shape == (*, 4)</li>\n<li><strong>x_index:</strong> </li>\n<li><strong>y_index:</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>zero_template_points: np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">template_points</span>, </span><span class=\"param\"><span class=\"n\">x_index</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">y_index</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.template_00pt_check", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "template_00pt_check", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>moving_image:</strong> </li>\n<li><strong>fixed_image:</strong> </li>\n<li><strong>offset_info:</strong> </li>\n<li><strong>fixed_offset:</strong>  \u77e9\u9635\u56fe\u7684\u8d77\u59cb xy \u4fe1\u606f</li>\n<li><strong>flip_flag:</strong> </li>\n<li><strong>rot90_flag:</strong> </li>\n<li><strong>max_length:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">offset_info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_offset</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">flip_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rot90_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">max_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9996</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_00pt.template_00pt_align", "modulename": "cellbin2.contrib.alignment.template_00pt", "qualname": "template_00pt_align", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>moving_image</strong>:  \u5f85\u914d\u51c6\u56fe\uff0c\u901a\u5e38\u662f\u67d3\u8272\u56fe\uff08\u5982ssDNA\u3001HE\uff09</li>\n<li><strong>ref</strong>:  \u6a21\u677f\u5468\u671f\uff0c\u4ec5\u5728\u6a21\u677f\u76f8\u5173\u914d\u51c6\u65b9\u6cd5\u4e0b\u7528\u5230</li>\n<li><strong>dst_shape</strong>:  \u914d\u51c6\u56fe\u7406\u8bba\u5c3a\u5bf8\n:param from_stitched</li>\n<li><strong>flip_flag</strong>: </li>\n<li><strong>rot90_flag</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dst_shape</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">from_stitched</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flip_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rot90_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_centroid", "modulename": "cellbin2.contrib.alignment.template_centroid", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.alignment.template_centroid.TemplateCentroid", "modulename": "cellbin2.contrib.alignment.template_centroid", "qualname": "TemplateCentroid", "kind": "class", "doc": "<p>\u6ee1\u8db3CellBin\u9700\u6c42\uff0c\u5229\u7528\u6a21\u677f\u5468\u671f\u6027\u53ca\u7ec4\u7ec7\u5f62\u6001\uff0c\u901a\u8fc7\u904d\u5386\u5b9e\u73b0\u53d8\u6362\u53c2\u6570\u7684\u83b7\u53d6\u3002\u5b9e\u73b0\u914d\u51c6\uff0c\u8bef\u5dee\u7ea610pix</p>\n", "bases": "cellbin2.contrib.alignment.basic.Alignment"}, {"fullname": "cellbin2.contrib.alignment.template_centroid.TemplateCentroid.__init__", "modulename": "cellbin2.contrib.alignment.template_centroid", "qualname": "TemplateCentroid.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">([],</span> <span class=\"p\">[])</span>,</span><span class=\"param\">\t<span class=\"n\">flip_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rot90_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "cellbin2.contrib.alignment.template_centroid.TemplateCentroid.align_stitched", "modulename": "cellbin2.contrib.alignment.template_centroid", "qualname": "TemplateCentroid.align_stitched", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fixed_image:</strong> </li>\n<li><strong>moving_image:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_centroid.TemplateCentroid.align_transformed", "modulename": "cellbin2.contrib.alignment.template_centroid", "qualname": "TemplateCentroid.align_transformed", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fixed_image:</strong> </li>\n<li><strong>moving_image:</strong> </li>\n<li><strong>mask_flag:</strong>  whether or not mask coverage through chip box</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">mask_flag</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.alignment.template_centroid.centroid", "modulename": "cellbin2.contrib.alignment.template_centroid", "qualname": "centroid", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>moving_image</strong>:  \u5f85\u914d\u51c6\u56fe\uff0c\u901a\u5e38\u662f\u67d3\u8272\u56fe\uff08\u5982ssDNA\u3001HE\uff09</li>\n<li><strong>fixed_image</strong>:  \u56fa\u5b9a\u56fe\uff0c\u901a\u5e38\u662f\u77e9\u9635\uff0c\u652f\u6301TIF/GEM/GEF\u53ca\u6570\u7ec4</li>\n<li><strong>ref</strong>:  \u6a21\u677f\u5468\u671f\uff0c\u4ec5\u5728\u6a21\u677f\u76f8\u5173\u914d\u51c6\u65b9\u6cd5\u4e0b\u7528\u5230</li>\n<li><strong>from_stitched</strong>:  \u4ece\u62fc\u63a5\u56fe\u5f00\u59cb</li>\n<li><strong>flip_flag</strong>: </li>\n<li><strong>rot90_flag</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RegistrationInfo</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipFeature</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">from_stitched</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flip_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rot90_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.base_module", "modulename": "cellbin2.contrib.base_module", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.base_module.BaseModule", "modulename": "cellbin2.contrib.base_module", "qualname": "BaseModule", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.base_module.BaseModule.supported_model", "modulename": "cellbin2.contrib.base_module", "qualname": "BaseModule.supported_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.base_module.BaseModule.get_weights_path", "modulename": "cellbin2.contrib.base_module", "qualname": "BaseModule.get_weights_path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">s_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.calibration", "modulename": "cellbin2.contrib.calibration", "kind": "module", "doc": "<p>\ud83c\udf1f Create Time  : 2024/9/26 9:39\n\ud83c\udf1f Author  : CB\ud83d\udc02\ud83d\udc0e - lizepeng\n\ud83c\udf1f File  : calibrate.py\n\ud83c\udf1f Description  :</p>\n"}, {"fullname": "cellbin2.contrib.calibration.CalibrationParam", "modulename": "cellbin2.contrib.calibration", "qualname": "CalibrationParam", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.calibration.CalibrationParam.offset_thr", "modulename": "cellbin2.contrib.calibration", "qualname": "CalibrationParam.offset_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.calibration.CalibrationParam.model_config", "modulename": "cellbin2.contrib.calibration", "qualname": "CalibrationParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.calibration.Calibrate", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate", "kind": "class", "doc": "<ul>\n<li>\u4f7f\u7528FFT\u8fdb\u884c\u56fe\u50cf\u95f4\u7684\u5339\u914d</li>\n<li>\u4e24\u56fe\u6a21\u6001\u9700\u8981\u76f8\u540c\u6216\u63a5\u8fd1\uff0c\u5426\u5219\u8ba1\u7b97\u51c6\u786e\u6027\u4e0d\u9ad8</li>\n<li>\u53ef\u8fdb\u884c\u5e73\u79fb\u8ba1\u7b97\u53ca\u65cb\u8f6c\u7f29\u653e\u8ba1\u7b97</li>\n</ul>\n"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.__init__", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.__init__", "kind": "function", "doc": "<p>\u521d\u59cb\u5316\u53c2\u6570\uff0c\u53d8\u6362 dst \u5230 src \uff01\uff01\uff01</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>src_image:</strong>  image path | array  \u8868\u793a\u76ee\u6807\u914d\u51c6\u56fe\u50cf</li>\n<li><strong>dst_image:</strong>  image path | array  \u8868\u793a\u5f85\u914d\u51c6\u56fe\u50cf</li>\n<li><strong>method:</strong>  \u6821\u51c6\u4f7f\u7528\u65b9\u6cd5  0 | 1\n<ul>\n<li>0 \u8868\u793a\u53ea\u505a\u5e73\u79fb\u6821\u51c6 \u6c42\u5f97\u53c2\u6570\u4ec5\u4e3a offset</li>\n<li>1 \u8868\u793a\u505a\u4eff\u5c04\u53d8\u6362\u6821\u51c6 \u6c42\u5f97\u53c2\u6570\u4e3a scale, rotate, offset</li>\n</ul></li>\n<li><strong>down_size:</strong>  \u8ba1\u7b97FFT\u65f6\uff0c\u56fe\u50cf\u6700\u957f\u8fb9\u7f29\u653e\u81f3\u8be5\u53c2\u6570</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src_image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dst_image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">down_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4000</span></span>)</span>"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.method", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.src_image", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.src_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.dst_image", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.dst_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.down_size", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.down_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.parse_img", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.parse_img", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>im:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.resize_image", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.resize_image", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image:</strong> </li>\n<li><strong>size:</strong>  (h, w)</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.trans_by_mat", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.trans_by_mat", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>im:</strong> </li>\n<li><strong>m:</strong> </li>\n<li><strong>shape:</strong>  h, w</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.set_src", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.set_src", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">im</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.set_dst", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.set_dst", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">im</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.calibration.Calibrate.calibration", "modulename": "cellbin2.contrib.calibration", "qualname": "Calibrate.calibration", "kind": "function", "doc": "<ul>\n<li>\u5bf9\u56fe\u50cf\u8fdb\u884c\u7f29\u653e\u3001\u5c3a\u5bf8\u7edf\u4e00\u5904\u7406</li>\n<li>\u5e76\u8fdb\u884c\u6821\u51c6\u64cd\u4f5c</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.calibration.multi_channel_align", "modulename": "cellbin2.contrib.calibration", "qualname": "multi_channel_align", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">calibration</span><span class=\"o\">.</span><span class=\"n\">CalibrationParam</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_image</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">moving_image</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">CalibrationInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.calibration.main", "modulename": "cellbin2.contrib.calibration", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_filter", "modulename": "cellbin2.contrib.cell_filter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cell_filter.FilterCells", "modulename": "cellbin2.contrib.cell_filter", "qualname": "FilterCells", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cell_filter.FilterCells.__init__", "modulename": "cellbin2.contrib.cell_filter", "qualname": "FilterCells.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tgeffile: [&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;cellbin2.utils.matrix.cbMatrix&#x27;&gt;],</span><span class=\"param\">\tmask: [&lt;class &#x27;str&#x27;&gt;, &lt;built-in function array&gt;]</span>)</span>"}, {"fullname": "cellbin2.contrib.cell_filter.FilterCells.split_num", "modulename": "cellbin2.contrib.cell_filter", "qualname": "FilterCells.split_num", "kind": "variable", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>split chip with cell numbers</p>\n</blockquote>\n"}, {"fullname": "cellbin2.contrib.cell_filter.FilterCells.filter_doublecells", "modulename": "cellbin2.contrib.cell_filter", "qualname": "FilterCells.filter_doublecells", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_filter.FilterCells.result_to_txt", "modulename": "cellbin2.contrib.cell_filter", "qualname": "FilterCells.result_to_txt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_filter.FilterCells.get_cellarea", "modulename": "cellbin2.contrib.cell_filter", "qualname": "FilterCells.get_cellarea", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_filter.FilterCells.filter_to_gef", "modulename": "cellbin2.contrib.cell_filter", "qualname": "FilterCells.filter_to_gef", "kind": "function", "doc": "<p>\u7528\u8fc7\u6ee4\u7684 \u7ed3\u679c\u7684\u6587\u4ef6 \u8fc7\u6ee4\u539f\u59cb\u7684.gef or .gem</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cbm</strong>:  \u8fc7\u6ee4\u524d\u7684</li>\n<li><strong>save_path</strong>:  \u8fc7\u6ee4\u540e\u7684cellbin\u7ed3\u679c</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u8fc7\u6ee4\u540e\u7684cellbin \uff08cbmatrix\uff09\u683c\u5f0f</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">filter_df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">cbm</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">cbMatrix</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;not_singlecell_two_factor&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_filter.filter_pipline", "modulename": "cellbin2.contrib.cell_filter", "qualname": "filter_pipline", "kind": "function", "doc": "<p>\u8fc7\u6ee4\u7b97\u6cd5\u6d41\u7a0b</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>geffile</strong>:   \u9700\u8981\u8fc7\u6ee4\u7684cellbin \u5355\u7ec6\u80de\u6570\u636e \uff0c\u53ef\u4ee5\u63a5\u53d7gef\uff0cgem</li>\n<li><strong>cellmask</strong>:   \u5355\u7ec6\u80de\u4ea7\u751f\u7684mask</li>\n<li><strong>output_filter_file</strong>:  \u662f\u5426\u8fc7\u6ee4\u7684\u8f93\u51fa\u6587\u4ef6\uff1a\u8f93\u51fa\u4e3a txt\uff0c \u4e24\u5217\uff0c\u7b2c\u4e00\u5217\u662f\u7ec6\u80de\u540d\u79f0\uff0c\u7b2c\u4e8c\u5217\u662f\u662f\u5426\u5220\u9664\uff0c1 \u4ee3\u8868\u5220\u9664\uff0c0\u4ee3\u8868\u4fdd\u7559</li>\n<li><strong>output_filter_gef</strong>:   \u6839\u636e\u8fc7\u6ee4\u6587\u4ef6\uff0c\u4ea7\u751f\u8fc7\u6ee4\u540e\u7684gef</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u8fc7\u6ee4\u540e\u7684gef</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">geffile</span>, </span><span class=\"param\"><span class=\"n\">cellmask</span>, </span><span class=\"param\"><span class=\"n\">output_filter_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">output_filter_gef</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_filter.main", "modulename": "cellbin2.contrib.cell_filter", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_segmentor", "modulename": "cellbin2.contrib.cell_segmentor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel, cellbin2.contrib.base_module.BaseModule"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.ssDNA_weights_path", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.ssDNA_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.DAPI_weights_path", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.DAPI_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.HE_weights_path", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.HE_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.IF_weights_path", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.IF_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.Transcriptomics_weights_path", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.Transcriptomics_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.Protein_weights_path", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.Protein_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.num_threads", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.num_threads", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.GPU", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.GPU", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegParam.model_config", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.__init__", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.__init__", "kind": "function", "doc": "<p>Initialize the CellSegmentation class with the given configuration and stain type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cfg (CellSegParam):</strong>  Configuration parameters for the cell segmentation model.</li>\n<li><strong>stain_type (TechType):</strong>  The type of stain used in the input images.</li>\n<li><strong>gpu (int, optional):</strong>  The index of the GPU to be used for computations. \nUse -1 to indicate CPU usage. Defaults to -1.</li>\n<li><strong>num_threads (int, optional):</strong>  The number of threads to be used when running on the CPU. \nDefaults to 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">cell_segmentor</span><span class=\"o\">.</span><span class=\"n\">CellSegParam</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span>,</span><span class=\"param\">\t<span class=\"n\">gpu</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.cfg", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.cfg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.stain_type", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.stain_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.pre_process", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.pre_process", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.post_process", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.post_process", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.run", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.run", "kind": "function", "doc": "<p>Run cell prediction on the given image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img (Union[str, npt.NDArray]):</strong>  The input image. This can be either a file path (str) or a numpy array (npt.NDArray).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>npt.NDArray[np.uint8]: The predicted cell segmentation mask as a numpy array of uint8 type.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AttributeError:</strong>  If the <code>_cell_seg</code> attribute is not initialized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.run_fast", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.run_fast", "kind": "function", "doc": "<p>Applies a fast correction to the mask if the distance is greater than 0.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask (npt.NDArray):</strong>  The mask to be corrected.</li>\n<li><strong>distance (int):</strong>  The distance parameter for the fast correction.</li>\n<li><strong>process (int):</strong>  The number of processes to be used for the correction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>npt.NDArray[np.uint8]: The corrected mask if distance &gt; 0, else the original mask.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.get_trace", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.get_trace", "kind": "function", "doc": "<p>Process a mask for cell tracing. Depending on the size of the mask, either a standard or a faster\nversion of the tracing algorithm is used to reduce memory usage for large images.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask (npt.NDArray):</strong>  The mask to be processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>npt.NDArray: The processed mask.</p>\n</blockquote>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>For masks with a height greater than 40,000 pixels, the accelerated version <code>get_t_v2</code> is used.\n  Otherwise, the standard version <code>get_t</code> is used.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_segmentor.CellSegmentation.get_stats", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "CellSegmentation.get_stats", "kind": "function", "doc": "<p>Calculate various statistics and visualizations based on input masks and an image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>c_mask_p (str):</strong>  Path to the cell segmentation mask (single channel).</li>\n<li><strong>cor_mask_p (str):</strong>  Path to the corrected mask (single channel).</li>\n<li><strong>t_mask_p (str):</strong>  Path to the tissue segmentation mask (single channel).</li>\n<li><strong>register_img_p (str):</strong>  Path to the registered image. The image will be converted to grayscale and inverted if it's an H&amp;E stained RGB image.</li>\n<li><strong>keep (int, optional):</strong>  Number of images to keep. Defaults to 5.</li>\n<li><strong>size (int, optional):</strong>  Size of the cropped images. Defaults to 1024.</li>\n<li><strong>save_dir (str, optional):</strong>  Directory to save the output images. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[float, float, float, List[Tuple[npt.NDArray, List[Tuple[int, int, int, int]]]], plt.figure]:\n      - First element: Ratio of cell segmentation mask area to tissue mask area.\n      - Second element: Ratio of corrected mask area to tissue mask area.\n      - Third element: Intensity ratio between cell segmentation mask and tissue mask.\n      - Fourth element: List of images (of size <code>size</code>) with their corresponding coordinates (y_begin, y_end, x_begin, x_end).\n      - Fifth element: Intensity histogram figure of the cell segmentation mask.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c_mask_p</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/path/to/cell/mask.tif&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t_mask_p</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/path/to/tissue/mask.tif&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cor_mask_p</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/path/to/corrected/mask.tif&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">register_img_p</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/path/to/registered/image.tif&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">save_dir</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/path/to/save/directory&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">area_ratio</span><span class=\"p\">,</span> <span class=\"n\">area_ratio_cor</span><span class=\"p\">,</span> <span class=\"n\">int_ratio</span><span class=\"p\">,</span> <span class=\"n\">cell_with_outline</span><span class=\"p\">,</span> <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">CellSegmentation</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">c_mask_p</span><span class=\"o\">=</span><span class=\"n\">c_mask_p</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">cor_mask_p</span><span class=\"o\">=</span><span class=\"n\">cor_mask_p</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">t_mask_p</span><span class=\"o\">=</span><span class=\"n\">t_mask_p</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">register_img_p</span><span class=\"o\">=</span><span class=\"n\">register_img_p</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"n\">save_dir</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">area_ratio</span> <span class=\"o\">==</span> <span class=\"n\">expected_value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">area_ratio_cor</span> <span class=\"o\">==</span> <span class=\"n\">expected_value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">int_ratio</span> <span class=\"o\">==</span> <span class=\"n\">expected_value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;test.png&quot;</span><span class=\"p\">))</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">c_mask_p</span>,</span><span class=\"param\">\t<span class=\"n\">cor_mask_p</span>,</span><span class=\"param\">\t<span class=\"n\">t_mask_p</span>,</span><span class=\"param\">\t<span class=\"n\">register_img_p</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1024</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]],</span> <span class=\"n\">figure</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_segmentor.s_main", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "s_main", "kind": "function", "doc": "<p>Main function to execute cell segmentation.</p>\n\n<p>This function parses command-line arguments and orchestrates the cell segmentation process.\nIt supports different stain types and can optionally perform tissue segmentation and fast correction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cell_segmentor.segment4cell", "modulename": "cellbin2.contrib.cell_segmentor", "qualname": "segment4cell", "kind": "function", "doc": "<p>Perform cell segmentation on the given input image.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>input_path (str): The path to the input image file.</li>\n<li>cfg (CellSegParam): Configuration parameters for cell segmentation.</li>\n<li>s_type (TechType): The type of staining technology used.</li>\n<li>gpu (int): The GPU device index to use for computation. Use -1 for CPU.</li>\n<li>fast (bool): Whether to apply fast correction to the segmentation mask.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Tuple[npt.NDArray[np.uint8], npt.NDArray[np.uint8]]: A tuple containing the original segmentation mask and the fast corrected mask (if fast correction is applied).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">cell_segmentor</span><span class=\"o\">.</span><span class=\"n\">CellSegParam</span>,</span><span class=\"param\">\t<span class=\"n\">s_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span>,</span><span class=\"param\">\t<span class=\"n\">gpu</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">fast</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cellpose_segmentor", "modulename": "cellbin2.contrib.cellpose_segmentor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.cellpose_segmentor.asStride", "modulename": "cellbin2.contrib.cellpose_segmentor", "qualname": "asStride", "kind": "function", "doc": "<p>Get a strided sub-matrices view of an ndarray.</p>\n\n<p>This function is similar to <code>skimage.util.shape.view_as_windows()</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arr (ndarray):</strong>  The input ndarray.</li>\n<li><strong>sub_shape (tuple):</strong>  The shape of the sub-matrices.</li>\n<li><strong>stride (tuple):</strong>  The step size along each axis.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: A view of strided sub-matrices.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">sub_shape</span>, </span><span class=\"param\"><span class=\"n\">stride</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cellpose_segmentor.poolingOverlap", "modulename": "cellbin2.contrib.cellpose_segmentor", "qualname": "poolingOverlap", "kind": "function", "doc": "<p>Perform overlapping pooling on 2D or 3D data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mat (ndarray):</strong>  The input array to pool.</li>\n<li><strong>ksize (tuple of 2):</strong>  Kernel size in (ky, kx).</li>\n<li><strong>stride (tuple of 2, optional):</strong>  Stride of the pooling window. If None, it defaults to the kernel size (non - overlapping pooling).</li>\n<li><strong>method (str, optional):</strong>  Pooling method, 'max' for max - pooling, 'mean' for mean - pooling.</li>\n<li><strong>pad (bool, optional):</strong>  Whether to pad the input matrix or not. If not padded, the output size will be (n - f)//s+1, where n is the matrix size, f is the kernel size, and s is the stride. If padded, the output size will be ceil(n/s).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: The pooled matrix.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat</span>, </span><span class=\"param\"><span class=\"n\">ksize</span>, </span><span class=\"param\"><span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;max&#39;</span>, </span><span class=\"param\"><span class=\"n\">pad</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cellpose_segmentor.f_instance2semantics_max", "modulename": "cellbin2.contrib.cellpose_segmentor", "qualname": "f_instance2semantics_max", "kind": "function", "doc": "<p>Processes an instance segmentation mask to remove small objects and converts it to a semantic segmentation mask.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ins (numpy.ndarray):</strong>  The instance segmentation mask.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>numpy.ndarray: The semantic segmentation mask.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ins</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cellpose_segmentor.main", "modulename": "cellbin2.contrib.cellpose_segmentor", "qualname": "main", "kind": "function", "doc": "<p>Main function to perform cell segmentation using Cellpose model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  Path to the input image file.</li>\n<li><strong>gpu (int):</strong>  Index of the GPU to be used.</li>\n<li><strong>model_dir (str):</strong>  Directory where the Cellpose model is stored.</li>\n<li><strong>model_name (str, optional):</strong>  Name of the model to be used. Defaults to 'cyto2'.</li>\n<li><strong>output_path (str, optional):</strong>  Path to save the output file. Defaults to None.</li>\n<li><strong>photo_size (int, optional):</strong>  Size of the patches to be used for segmentation. Defaults to 2048.</li>\n<li><strong>photo_step (int, optional):</strong>  Step size for patch extraction. Defaults to 2000.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Segmented cell mask as a numpy array.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span>,</span><span class=\"param\">\t<span class=\"n\">gpu</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">model_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;cyto2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">photo_size</span><span class=\"o\">=</span><span class=\"mi\">2048</span>,</span><span class=\"param\">\t<span class=\"n\">photo_step</span><span class=\"o\">=</span><span class=\"mi\">2000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.cellpose_segmentor.demo", "modulename": "cellbin2.contrib.cellpose_segmentor", "qualname": "demo", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\npython cellpose_segmentor.py -i\\n&quot;xxx/B02512C5_after_tc_regist.tif&quot;\\n-o\\nxxx/tmp\\n-m\\nxxx/models\\n-n\\ncyto2\\n-g\\n0\\n&#x27;"}, {"fullname": "cellbin2.contrib.cellpose_segmentor.segment4cell", "modulename": "cellbin2.contrib.cellpose_segmentor", "qualname": "segment4cell", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">cell_segmentor</span><span class=\"o\">.</span><span class=\"n\">CellSegParam</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector", "modulename": "cellbin2.contrib.chip_detector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.SUPPORTED_STAIN_TYPE", "modulename": "cellbin2.contrib.chip_detector", "qualname": "SUPPORTED_STAIN_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&lt;TechType.ssDNA: 1&gt;, &lt;TechType.DAPI: 2&gt;, &lt;TechType.HE: 3&gt;)"}, {"fullname": "cellbin2.contrib.chip_detector.weight_name_ext", "modulename": "cellbin2.contrib.chip_detector", "qualname": "weight_name_ext", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;_weights_path&#x27;"}, {"fullname": "cellbin2.contrib.chip_detector.TechToWeightName", "modulename": "cellbin2.contrib.chip_detector", "qualname": "TechToWeightName", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: &#x27;ssdna_weights_path&#x27;, 2: &#x27;dapi_weights_path&#x27;, 3: &#x27;he_weights_path&#x27;}"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel, cellbin2.contrib.base_module.BaseModule"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam.detect_channel", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam.detect_channel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam.stage1_weights_path", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam.stage1_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam.stage2_weights_path", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam.stage2_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam.GPU", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam.GPU", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam.num_threads", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam.num_threads", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam.get_stage1_weights_path", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam.get_stage1_weights_path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam.get_stage2_weights_path", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam.get_stage2_weights_path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipParam.model_config", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector", "kind": "class", "doc": "<p>\u56fe\u50cf\u6570\u636e\uff1a \u82af\u7247\u533a\u57df\u68c0\u6d4b\u5668</p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.__init__", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.__init__", "kind": "function", "doc": "<p>Initialize the ChipDetector object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cfg (ChipParam):</strong>  Configuration parameters for the chip detector.</li>\n<li><strong>stain_type (TechType):</strong>  The type of stain used, which must be one of the supported types.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the provided stain_type is not supported.</li>\n</ul>\n\n<h6 id=\"attributes-initialized\">Attributes initialized:</h6>\n\n<blockquote>\n  <p>cfg (ChipParam): Configuration for the chip detector.\n  stain_type (TechType): The type of stain.\n  chip_actual_size (Tuple[int, int]): Actual size of the chip.\n  left_top, right_top, left_bottom, right_bottom (List[float]): Coordinates for the corners of the chip.\n  scale_x, scale_y (float): Scaling factors for the x and y axes.\n  rotation (float): Rotation angle of the chip.\n  is_available (bool): Flag indicating if the chip detector is available.\n  chip_size (Tuple[float, float]): Size of the chip.\n  source_image: The source image for detection.\n  onnx_model_global, onnx_model_local: Paths to the ONNX models for global and local detection stages.\n  rough_corner_points, finetune_corner_points: Coordinates for rough and fine-tuned corner points.\n  set_points_flag (bool): Flag indicating if the corner points have been set.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>detector = ChipDetector(cfg=my_config, stain_type=TechType.DAPI)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">chip_detector</span><span class=\"o\">.</span><span class=\"n\">ChipParam</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span>)</span>"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.PADDING_SIZE", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.PADDING_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.stain_type", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.stain_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.chip_actual_size", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.chip_actual_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.left_top", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.left_top", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.right_top", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.right_top", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.left_bottom", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.left_bottom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.right_bottom", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.right_bottom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.scale_x", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.scale_x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.scale_y", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.scale_y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.rotation", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.is_available", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.is_available", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.chip_size", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.chip_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, float]"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.source_image", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.source_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.onnx_model_global", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.onnx_model_global", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.onnx_model_local", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.onnx_model_local", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.rough_corner_points", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.rough_corner_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.finetune_corner_points", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.finetune_corner_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.set_points_flag", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.set_points_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.set_corner_points", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.set_corner_points", "kind": "function", "doc": "<p>Set the corner points of the chip.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points (np.ndarray):</strong>  A numpy array of shape (4, 2) representing the corner points of the chip.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.control", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.control", "kind": "function", "doc": "<p>This method controls the validity of the chip detector by checking the length-to-width ratio and the included angles between consecutive corner points.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>threshold_length_rate (float):</strong>  The acceptable error rate for the length-to-width ratio.</li>\n<li><strong>threshold_rotate (float):</strong>  The maximum acceptable error for the included angles.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: This method updates the <code>is_available</code> attribute of the class.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_length_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_rotate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.detect", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.detect", "kind": "function", "doc": "<p>Entry function for the detection process.</p>\n\n<p>This method is the entry point for the detection process. It initializes the detection by parsing the image,\nsetting up control points, and then running the rough and fine-tune stages of detection if the points are not set.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  The path to the image file to be processed.</li>\n<li><strong>actual_size (Tuple[int, int]):</strong>  The actual size of the chip, represented as a tuple of two integers (width, height).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: This method does not return any value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">actual_size</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.parse_image", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.parse_image", "kind": "function", "doc": "<p>Parse the input image and adjust its size.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img (str or np.ndarray):</strong>  The input image file path or image array.</li>\n<li><strong>actual_size (Tuple[int, int]):</strong>  The actual size of the chip.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">actual_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.parse_info", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.parse_info", "kind": "function", "doc": "<p>This method calculates the rotation angle of the chip, its size, scale factors for the x and y axes,\nand assigns the fine-tuned corner points to the corresponding attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.stage_rough", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.stage_rough", "kind": "function", "doc": "<p>Perform rough detection of the chip's corner points.</p>\n\n<p>This method initializes an OBB8Detector with the provided ONNX model and source image,\nthen runs the detector to obtain the rough corner points.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None. The rough corner points are stored in the <code>rough_corner_points</code> attribute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.stage_finetune", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.stage_finetune", "kind": "function", "doc": "<p>Fine-tune the corner points of the detected object.</p>\n\n<p>This method adjusts the rough corner points detected in the previous stage by:</p>\n\n<ol>\n<li>Checking the border to ensure points are within image boundaries.</li>\n<li>Calculating the rotation angle of the object.</li>\n<li>Rotating the image and transforming the corner points.</li>\n<li>Padding the image borders and adjusting the corner points accordingly.</li>\n<li>Using a YOLO detector to further refine the corner points.</li>\n</ol>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>rough_corner_points:</strong>  The initial rough corner points detected.</li>\n<li><strong>source_image:</strong>  The source image being analyzed.</li>\n<li><strong>PADDING_SIZE:</strong>  The size of the padding to be added to the image borders.</li>\n<li><strong>onnx_model_local:</strong>  The ONNX model used for detection.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None. The method updates the <code>finetune_corner_points</code> attribute with the refined points.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.calculate_rotation_angle", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.calculate_rotation_angle", "kind": "function", "doc": "<p>Calculate the angle between the line segment joining the two points with the smallest y-coordinates\nand the horizontal axis.</p>\n\n<p>Parameters:\npoints (list of tuples): List of points in the format (x, y).</p>\n\n<p>Returns:\nfloat: The angle in degrees between the line segment and the horizontal axis.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.padding_border", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.padding_border", "kind": "function", "doc": "<p>Pads the border of the input image with zeros.</p>\n\n<p>Parameters:\nimg (numpy.ndarray): The input image to be padded.\nsize (int): The size of the border to be added to each side of the image.</p>\n\n<p>Returns:\nnumpy.ndarray: The padded image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.ChipDetector.check_border", "modulename": "cellbin2.contrib.chip_detector", "qualname": "ChipDetector.check_border", "kind": "function", "doc": "<p>Validate and reorder an array of corner points.</p>\n\n<p>The function checks if the input is a NumPy array with the shape (4, 2) and reorders the points to ensure\nthey follow the sequence: left-up, left-down, right-down, right-up. If the points are out of order, they are\nreordered accordingly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file (np.ndarray):</strong>  An array of corner points with shape (4, 2).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: The validated and reordered array of corner points, or None if the input is invalid.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.detect_chip", "modulename": "cellbin2.contrib.chip_detector", "qualname": "detect_chip", "kind": "function", "doc": "<p>Detects a chip in the given image file and calculates its parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path:</strong>  The path to the image file or a numpy array containing the image.</li>\n<li><strong>cfg:</strong>  Configuration parameters for the chip detection.</li>\n<li><strong>stain_type:</strong>  The type of staining used (ssDNA, DAPI, HE, IF).</li>\n<li><strong>actual_size:</strong>  The actual size of the chip in pixels at 500nm/pixel resolution (width, height).</li>\n<li><strong>is_debug:</strong>  Flag to enable or disable debug mode.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple containing ChipBoxInfo with detection results and a dictionary of debug images if is_debug is True.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">chip_detector</span><span class=\"o\">.</span><span class=\"n\">ChipParam</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span>,</span><span class=\"param\">\t<span class=\"n\">actual_size</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipBoxInfo</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.chip_detector.main", "modulename": "cellbin2.contrib.chip_detector", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.clarity", "modulename": "cellbin2.contrib.clarity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.clarity.SUPPORTED_STAIN_TYPE", "modulename": "cellbin2.contrib.clarity", "qualname": "SUPPORTED_STAIN_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&lt;TechType.ssDNA: 1&gt;, &lt;TechType.DAPI: 2&gt;)"}, {"fullname": "cellbin2.contrib.clarity.weight_name_ext", "modulename": "cellbin2.contrib.clarity", "qualname": "weight_name_ext", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;_weights_path&#x27;"}, {"fullname": "cellbin2.contrib.clarity.TechToWeightName", "modulename": "cellbin2.contrib.clarity", "qualname": "TechToWeightName", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: &#x27;ssDNA_weights_path&#x27;, 2: &#x27;DAPI_weights_path&#x27;}"}, {"fullname": "cellbin2.contrib.clarity.pt_enhance_method", "modulename": "cellbin2.contrib.clarity", "qualname": "pt_enhance_method", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: &lt;function dapi_enhance&gt;, 2: &lt;function dapi_enhance&gt;, 3: &lt;function he_enhance&gt;}"}, {"fullname": "cellbin2.contrib.clarity.ClarityOutput", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityOutput", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.clarity.ClarityOutput.score", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityOutput.score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.clarity.ClarityOutput.pred", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityOutput.pred", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.contrib.clarity.ClarityOutput.cut_siz", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityOutput.cut_siz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple"}, {"fullname": "cellbin2.contrib.clarity.ClarityOutput.overlap", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityOutput.overlap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.clarity.ClarityOutput.Config", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityOutput.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.clarity.ClarityOutput.Config.arbitrary_types_allowed", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityOutput.Config.arbitrary_types_allowed", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "cellbin2.contrib.clarity.ClarityOutput.model_config", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityOutput.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "cellbin2.contrib.clarity.ClarityParam", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityParam", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel, cellbin2.contrib.base_module.BaseModule"}, {"fullname": "cellbin2.contrib.clarity.ClarityParam.GPU", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityParam.GPU", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.clarity.ClarityParam.num_threads", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityParam.num_threads", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.clarity.ClarityParam.ssDNA_weights_path", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityParam.ssDNA_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.clarity.ClarityParam.DAPI_weights_path", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityParam.DAPI_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.clarity.ClarityParam.model_config", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.clarity.COLOR_SET", "modulename": "cellbin2.contrib.clarity", "qualname": "COLOR_SET", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;red&#x27;: (255, 0, 0), &#x27;lightsalmon&#x27;: (255, 160, 122), &#x27;blue&#x27;: (0, 0, 255), &#x27;lightblue&#x27;: (173, 216, 230), &#x27;yellow&#x27;: (255, 255, 0), &#x27;green&#x27;: (0, 128, 0), &#x27;pink&#x27;: (255, 203, 192), &#x27;black&#x27;: (0, 0, 0)}"}, {"fullname": "cellbin2.contrib.clarity.REPRESENT_4", "modulename": "cellbin2.contrib.clarity", "qualname": "REPRESENT_4", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;black&#x27;, 1: &#x27;blur&#x27;, 2: &#x27;good&#x27;, 3: &#x27;over_expo&#x27;, -1: &#x27;uncertain&#x27;}"}, {"fullname": "cellbin2.contrib.clarity.REPRESENT_6", "modulename": "cellbin2.contrib.clarity", "qualname": "REPRESENT_6", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;black&#x27;, 1: &#x27;good&#x27;, 2: &#x27;first_level_blur&#x27;, 3: &#x27;second_level_blur&#x27;, 4: &#x27;first_level_over_expo&#x27;, 5: &#x27;second_level_over_expo&#x27;, -1: &#x27;uncertain&#x27;}"}, {"fullname": "cellbin2.contrib.clarity.COLOR_4", "modulename": "cellbin2.contrib.clarity", "qualname": "COLOR_4", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;black&#x27;: &#x27;yellow&#x27;, &#x27;blur&#x27;: &#x27;blue&#x27;, &#x27;good&#x27;: &#x27;green&#x27;, &#x27;over_expo&#x27;: &#x27;red&#x27;, &#x27;uncertain&#x27;: &#x27;pink&#x27;}"}, {"fullname": "cellbin2.contrib.clarity.COLOR_6", "modulename": "cellbin2.contrib.clarity", "qualname": "COLOR_6", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;black&#x27;: &#x27;black&#x27;, &#x27;first_level_blur&#x27;: &#x27;blue&#x27;, &#x27;second_level_blur&#x27;: &#x27;blue&#x27;, &#x27;good&#x27;: &#x27;green&#x27;, &#x27;first_level_over_expo&#x27;: &#x27;red&#x27;, &#x27;second_level_over_expo&#x27;: &#x27;red&#x27;, &#x27;uncertain&#x27;: &#x27;pink&#x27;}"}, {"fullname": "cellbin2.contrib.clarity.WEIGHT_MAP_6", "modulename": "cellbin2.contrib.clarity", "qualname": "WEIGHT_MAP_6", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: 0, 1: 1, 2: 0.2, 3: 0, 4: 0.9, 5: 0}"}, {"fullname": "cellbin2.contrib.clarity.WEIGHT_MAP_4", "modulename": "cellbin2.contrib.clarity", "qualname": "WEIGHT_MAP_4", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: 0, 1: 0, 2: 1, 3: 0}"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.__init__", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.__init__", "kind": "function", "doc": "<p>Load clarity model</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cfg:</strong>  ClarityParam</li>\n<li><strong>stain_type:</strong>  \u67d3\u8272\u7c7b\u578b</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">clarity</span><span class=\"o\">.</span><span class=\"n\">ClarityParam</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span>)</span>"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.cfg", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.cfg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.clarity.ClarityParam"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.stain_type", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.stain_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.cl_classify", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.cl_classify", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3, NoneType]"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.pre_func", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.pre_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.num_class", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.num_class", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.counts", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.counts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.score", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.preds", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.preds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.box_lst", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.box_lst", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.boxes_", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.boxes_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.run", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.run", "kind": "function", "doc": "<p>This function will spilit the input image into (64, 64) pieces, then classify each piece into category.\nCategory is ['black', 'over_exposure', 'blur', 'good']</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img ():</strong>  stitched image after tissue cut (numpy ndarray)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>self.counts: counts of each category ['black', 'blur', 'good', 'over_expo']\n  self.score: clarity score\n  self.preds: prediction in\n      - shape is ceil(image_height / (64 - _overlap)),  ceil(image_width / (64 - self._overlap), 2)\n      - 2 -> 1st: class, 2nd probability\n  self.boxes: the pieces coordinate\n      - [[y_begin, y_end, x_begin, x_end], ...]</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">tifffile</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">weight_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/media/Data/dzh/weights/clarity_eval_mobilev3small05064_DAPI_20230608_pytorch.onnx&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;ssDNA_weights_path&#39;</span><span class=\"p\">:</span> <span class=\"n\">weight_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;DAPI_weights_path&#39;</span><span class=\"p\">:</span> <span class=\"n\">weight_path</span><span class=\"p\">,}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stain_type</span> <span class=\"o\">=</span> <span class=\"n\">TechType</span><span class=\"o\">.</span><span class=\"n\">ssDNA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">ClarityParam</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">models_config</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clarity_qc</span> <span class=\"o\">=</span> <span class=\"n\">ClarityQC</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"n\">stain_type</span><span class=\"o\">=</span><span class=\"n\">stain_type</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/media/Data/dzh/data/cellbin2/TRACK_DETECT/A02786D312/stitch/A02786D312_fov_stitched.tif&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">tifffile</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">img_path</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"mi\">2000</span><span class=\"p\">:</span> <span class=\"mi\">2000</span> <span class=\"o\">+</span> <span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"p\">:</span> <span class=\"mi\">2000</span> <span class=\"o\">+</span> <span class=\"mi\">5000</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clarity_qc</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clarity_qc</span><span class=\"o\">.</span><span class=\"n\">score</span>\n<span class=\"go\">0.712282309807516</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.clarity.ClarityQC.post_process", "modulename": "cellbin2.contrib.clarity", "qualname": "ClarityQC.post_process", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>preds:</strong>  \u9700\u8981\u4eceipr\u4e2d\u8bfb\u53d6</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>show_arr: numpy array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">preds</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.clarity.run_detect", "modulename": "cellbin2.contrib.clarity", "qualname": "run_detect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">clarity</span><span class=\"o\">.</span><span class=\"n\">ClarityParam</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct", "modulename": "cellbin2.contrib.fast_correct", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.fast_correct.CROP_BLOCK", "modulename": "cellbin2.contrib.fast_correct", "qualname": "CROP_BLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "2000"}, {"fullname": "cellbin2.contrib.fast_correct.Fast", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.__init__", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.__init__", "kind": "function", "doc": "<p>Fast class to generate corrected mask.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask:</strong>  cell mask</li>\n<li><strong>distance:</strong>  correction distance</li>\n<li><strong>process:</strong>  number of cores to use</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">process</span><span class=\"o\">=</span><span class=\"mi\">8</span></span>)</span>"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.processes", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.processes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.distance", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.distance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.mask", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.mask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.getNeighborLabels8", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.getNeighborLabels8", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.addNeighboursToQueue8", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.addNeighboursToQueue8", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">queued</span>, </span><span class=\"param\"><span class=\"n\">queue</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.crop_mask", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.crop_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.array_to_block", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.array_to_block", "kind": "function", "doc": "<p>Divides array a into subarrays of size p-by-q\np: block row size\nq: block column size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">p</span>, </span><span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.create_edm_label", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.create_edm_label", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask:</strong>  cropped cell mask</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>edm: distance map of input mask\n  maskImg: connected components of input mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.process_queue", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.process_queue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">queued</span>, </span><span class=\"param\"><span class=\"n\">queue</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.correct", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.correct", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">dis</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.handle_error", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.handle_error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.merge_by_row", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.merge_by_row", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">loc</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.merge_by_col", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.merge_by_col", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">final_result</span>, </span><span class=\"param\"><span class=\"n\">loc</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.process", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.Fast.get_mask_fast", "modulename": "cellbin2.contrib.fast_correct", "qualname": "Fast.get_mask_fast", "kind": "function", "doc": "<p>Returns: corrected mask, dtype is np.ndarray</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.run_fast_correct", "modulename": "cellbin2.contrib.fast_correct", "qualname": "run_fast_correct", "kind": "function", "doc": "<p>import os\nsave_dir = \"/media/Data/dzh/data/fast_correct_test/after\"</p>\n\n<h1 id=\"all-black\">all black</h1>\n\n<p>m1 = \"/media/Data/dzh/data/single_cell/debug_for_qiuying/result/C03427C3_mask.tif\"</p>\n\n<h1 id=\"roi-1658x-2501\">roi (1658x 2501)</h1>\n\n<p>m2 = \"/media/Data/dzh/data/cellbin/debug_cell_cor/ssDNA_D02266C2_regist_cellseg_D182_RA1_8_masks.tif\"</p>\n\n<h1 id=\"roi-233-230\">roi (233, 230)</h1>\n\n<p>m3 = \"/media/Data/dzh/data/single_cell/wq_issue/result/C03433F3_mask.tif\"</p>\n\n<h1 id=\"normal-data\">normal data</h1>\n\n<p>m4 = \"/media/Data/dzh/data/cellbin/FF-HE-C-Seg-Upgrade/TEST-all/cellseg_bcdu_H_240823_tf_deploy_test_tc_cls_2/ztron_output/B04372C214_SC_20240925_145336_4.1.0-beta.25.tif\"</p>\n\n<h1 id=\"roi-1609-14957\">roi (1609, 14957)</h1>\n\n<p>m5 = \"/media/Data/dzh/data/fast_correct_test_data/data/Y00935N4_ssDNA_mask(2).tif\"</p>\n\n<h1 id=\"roi-1658-2051\">roi (1658, 2051)</h1>\n\n<p>m6 = \"/media/Data/dzh/data/fast_correct_test_data/data/D02266C2_mask.tif\"\ntest_data = [m6]\nfor i in test_data:\n    i_no_ext, ext = os.path.splitext(os.path.basename(i))\n    cur_save = os.path.join(save_dir, i_no_ext + \"_fast\" + ext)\n    mask = run_fast_correct(mask_path=i)\n    tifffile.imwrite(cur_save, mask, compression=True)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.fast_correct.fast_main", "modulename": "cellbin2.contrib.fast_correct", "qualname": "fast_main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.gmm_correct", "modulename": "cellbin2.contrib.gmm_correct", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.gmm_correct.row", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "row", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gem_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.gmm_correct.creat_cell_gxp", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "creat_cell_gxp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_path</span>, </span><span class=\"param\"><span class=\"n\">gem_path</span>, </span><span class=\"param\"><span class=\"n\">outpath</span><span class=\"o\">=</span><span class=\"s1\">&#39;./&#39;</span>, </span><span class=\"param\"><span class=\"n\">fileName</span><span class=\"o\">=</span><span class=\"s1\">&#39;cellbin_gmm.txt&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM.__init__", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_file</span>, </span><span class=\"param\"><span class=\"n\">gem_file</span>, </span><span class=\"param\"><span class=\"n\">out_path</span>, </span><span class=\"param\"><span class=\"n\">threshold</span>, </span><span class=\"param\"><span class=\"n\">process</span></span>)</span>"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM.mask_file", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM.mask_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM.gem_file", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM.gem_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM.out_path", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM.out_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM.threshold", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM.threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM.process", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM.process", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM.radius", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM.radius", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.gmm_correct.GMM.cell_correct", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "GMM.cell_correct", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.gmm_correct.args_parse", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "args_parse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.gmm_correct.main", "modulename": "cellbin2.contrib.gmm_correct", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.mask_manager", "modulename": "cellbin2.contrib.mask_manager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.mask_manager.MaskManagerInfo", "modulename": "cellbin2.contrib.mask_manager", "qualname": "MaskManagerInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.mask_manager.MaskManagerInfo.tissue_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "MaskManagerInfo.tissue_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.mask_manager.MaskManagerInfo.cell_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "MaskManagerInfo.cell_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.mask_manager.MaskManagerInfo.chip_box", "modulename": "cellbin2.contrib.mask_manager", "qualname": "MaskManagerInfo.chip_box", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[cellbin2.contrib.alignment.basic.ChipBoxInfo, NoneType]"}, {"fullname": "cellbin2.contrib.mask_manager.MaskManagerInfo.stain_type", "modulename": "cellbin2.contrib.mask_manager", "qualname": "MaskManagerInfo.stain_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.common.TechType"}, {"fullname": "cellbin2.contrib.mask_manager.MaskManagerInfo.method", "modulename": "cellbin2.contrib.mask_manager", "qualname": "MaskManagerInfo.method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.mask_manager.MaskManagerInfo.model_config", "modulename": "cellbin2.contrib.mask_manager", "qualname": "MaskManagerInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMaskInfo", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMaskInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMaskInfo.best_tissue_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMaskInfo.best_tissue_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMaskInfo.best_cell_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMaskInfo.best_cell_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMaskInfo.model_config", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMaskInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMask", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMask.init_flag", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMask.init_flag", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMask.init", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMask.init", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_data</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">mask_manager</span><span class=\"o\">.</span><span class=\"n\">MaskManagerInfo</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMask.crop_chip_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMask.crop_chip_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chip_box</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipBoxInfo</span>,</span><span class=\"param\">\t<span class=\"n\">tissue_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cell_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMask.best_cell_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMask.best_cell_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tissue_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">cell_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMask.best_tissue_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMask.best_tissue_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tissue_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cell_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">kernel_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.mask_manager.BestTissueCellMask.get_best_tissue_cell_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "BestTissueCellMask.get_best_tissue_cell_mask", "kind": "function", "doc": "<p>Perform operations on masks based on input data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>input_data (MaskManagerInfo):</strong>  The input data containing the following:\n<ul>\n<li>tissue mask: The tissue mask data.</li>\n<li>cell mask: The cell mask data.</li>\n<li>method (int): Currently can be 0 or 1. 0 represents the default operation, using tissue segmentation to filter cell segmentation; 1 represents the R &amp; D version, using all information to output filtered cell and tissue segmentation.</li>\n<li>stain type (TechType): The staining type from the TechType enumeration.</li>\n<li>chip box (ChipBoxInfo, optional): Information about the chip box.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>BestTissueCellMaskInfo:\n      The output containing the optimized cell mask and the optimized tissue mask.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">input_data</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">mask_manager</span><span class=\"o\">.</span><span class=\"n\">MaskManagerInfo</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">mask_manager</span><span class=\"o\">.</span><span class=\"n\">BestTissueCellMaskInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.mask_manager.instance2semantics", "modulename": "cellbin2.contrib.mask_manager", "qualname": "instance2semantics", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ins</strong>:  \u5b9e\u4f8bmask\uff080-N\uff09</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u8bed\u4e49mask\uff080-1\uff09</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ins</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.mask_manager.merge_cell_mask", "modulename": "cellbin2.contrib.mask_manager", "qualname": "merge_cell_mask", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>nuclear_mask</strong>:  \u539f\u59cbnuclear_mask\n-- \u5b9e\u4f8b\u683c\u5f0f\uff08\u80cc\u666f\u662f0\uff0c\u7136\u540e\u5404\u4e2a\u7ec6\u80de\u8d4b\u503c\u4e00\u4e2aID\uff09\uff0c\u56fe\u50cf\u6700\u5927\u503c\u662f\u7ec6\u80de\u7684\u4e2a\u6570\n-- \u8bed\u4e49\u683c\u5f0f\uff0801\u6570\u7ec4\uff09</p></li>\n<li><p><strong>membrane_mask</strong>:  \u539f\u59cbmembrane_mask\n-- \u5b9e\u4f8b\u683c\u5f0f\uff08\u80cc\u666f\u662f0\uff0c\u7136\u540e\u5404\u4e2a\u7ec6\u80de\u8d4b\u503c\u4e00\u4e2aID\uff09\uff0c\u56fe\u50cf\u6700\u5927\u503c\u662f\u7ec6\u80de\u7684\u4e2a\u6570\n-- \u8bed\u4e49\u683c\u5f0f\uff0801\u6570\u7ec4\uff09</p></li>\n<li><p><strong>conflict_cover</strong>:  \u51b2\u7a81\u4e3b\u4f53 nuclear | membrane</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u5408\u5e76mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.param", "modulename": "cellbin2.contrib.param", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.param.TrackPointsInfo", "modulename": "cellbin2.contrib.param", "qualname": "TrackPointsInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.param.TrackPointsInfo.track_points", "modulename": "cellbin2.contrib.param", "qualname": "TrackPointsInfo.track_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "cellbin2.contrib.param.TrackPointsInfo.good_fov_count", "modulename": "cellbin2.contrib.param", "qualname": "TrackPointsInfo.good_fov_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.param.TrackPointsInfo.score", "modulename": "cellbin2.contrib.param", "qualname": "TrackPointsInfo.score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.param.TrackPointsInfo.fov_location", "modulename": "cellbin2.contrib.param", "qualname": "TrackPointsInfo.fov_location", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.param.TrackPointsInfo.model_config", "modulename": "cellbin2.contrib.param", "qualname": "TrackPointsInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.param.CalibrationInfo", "modulename": "cellbin2.contrib.param", "qualname": "CalibrationInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.param.CalibrationInfo.score", "modulename": "cellbin2.contrib.param", "qualname": "CalibrationInfo.score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.param.CalibrationInfo.offset", "modulename": "cellbin2.contrib.param", "qualname": "CalibrationInfo.offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.param.CalibrationInfo.scale", "modulename": "cellbin2.contrib.param", "qualname": "CalibrationInfo.scale", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.param.CalibrationInfo.rotate", "modulename": "cellbin2.contrib.param", "qualname": "CalibrationInfo.rotate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.param.CalibrationInfo.pass_flag", "modulename": "cellbin2.contrib.param", "qualname": "CalibrationInfo.pass_flag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.param.CalibrationInfo.model_config", "modulename": "cellbin2.contrib.param", "qualname": "CalibrationInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.param.CellSegInfo", "modulename": "cellbin2.contrib.param", "qualname": "CellSegInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.param.CellSegInfo.mask", "modulename": "cellbin2.contrib.param", "qualname": "CellSegInfo.mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.param.CellSegInfo.fast_mask", "modulename": "cellbin2.contrib.param", "qualname": "CellSegInfo.fast_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.param.CellSegInfo.model_config", "modulename": "cellbin2.contrib.param", "qualname": "CellSegInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.param.TissueSegOutputInfo", "modulename": "cellbin2.contrib.param", "qualname": "TissueSegOutputInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.param.TissueSegOutputInfo.tissue_mask", "modulename": "cellbin2.contrib.param", "qualname": "TissueSegOutputInfo.tissue_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.param.TissueSegOutputInfo.threshold_list", "modulename": "cellbin2.contrib.param", "qualname": "TissueSegOutputInfo.threshold_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cellbin2.contrib.param.TissueSegOutputInfo.model_config", "modulename": "cellbin2.contrib.param", "qualname": "TissueSegOutputInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.template", "modulename": "cellbin2.contrib.template", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inference", "modulename": "cellbin2.contrib.template.inference", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.template_points", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.template_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.template_recall", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.template_recall", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.template_valid_area", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.template_valid_area", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.trackcross_qc_pass_flag", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.trackcross_qc_pass_flag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.trackline_channel", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.trackline_channel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.rotation", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.scale_x", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.scale_x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.scale_y", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.scale_y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.Config", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.Config.arbitrary_types_allowed", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.Config.arbitrary_types_allowed", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "cellbin2.contrib.template.inference.TemplateInfo.model_config", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.__init__", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span>,</span><span class=\"param\">\t<span class=\"n\">track_points_config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">point_detector</span><span class=\"o\">.</span><span class=\"n\">TrackPointsParam</span>,</span><span class=\"param\">\t<span class=\"n\">track_lines_config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev1</span><span class=\"o\">.</span><span class=\"n\">track_line</span><span class=\"o\">.</span><span class=\"n\">TrackLinesParam</span>,</span><span class=\"param\">\t<span class=\"n\">template_v1_config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev1</span><span class=\"o\">.</span><span class=\"n\">inference_v1</span><span class=\"o\">.</span><span class=\"n\">TemplateReferenceV1Param</span>,</span><span class=\"param\">\t<span class=\"n\">template_v2_config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev2</span><span class=\"o\">.</span><span class=\"n\">inference_v2</span><span class=\"o\">.</span><span class=\"n\">TemplateReferenceV2Param</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.ref", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.ref", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.stain_type", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.stain_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.common.TechType"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.config_points", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.config_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.template.point_detector.TrackPointsParam"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.config_lines", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.config_lines", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.template.inferencev1.track_line.TrackLinesParam"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.config_v1", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.config_v1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.config_v2", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.config_v2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.file_path", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.file_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.fov_w", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.fov_w", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.fov_h", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.fov_h", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.overlap", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.overlap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.est_scale", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.est_scale", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inference.TemplateReference.inference", "modulename": "cellbin2.contrib.template.inference", "qualname": "TemplateReference.inference", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fov_wh</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">est_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">overlap</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inference.template_inference", "modulename": "cellbin2.contrib.template.inference", "qualname": "template_inference", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">track_points_config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">point_detector</span><span class=\"o\">.</span><span class=\"n\">TrackPointsParam</span>,</span><span class=\"param\">\t<span class=\"n\">track_lines_config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev1</span><span class=\"o\">.</span><span class=\"n\">track_line</span><span class=\"o\">.</span><span class=\"n\">TrackLinesParam</span>,</span><span class=\"param\">\t<span class=\"n\">template_v1_config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev1</span><span class=\"o\">.</span><span class=\"n\">inference_v1</span><span class=\"o\">.</span><span class=\"n\">TemplateReferenceV1Param</span>,</span><span class=\"param\">\t<span class=\"n\">template_v2_config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev2</span><span class=\"o\">.</span><span class=\"n\">inference_v2</span><span class=\"o\">.</span><span class=\"n\">TemplateReferenceV2Param</span>,</span><span class=\"param\">\t<span class=\"n\">overlap</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">fov_wh</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">est_scale</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inference.main", "modulename": "cellbin2.contrib.template.inference", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1", "modulename": "cellbin2.contrib.template.inferencev1", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "kind": "module", "doc": "<p>reference template for image, must need QC data.\ncreate by lizepeng, 2023/1/31 10:00</p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1Param", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param.pass_threshold", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1Param.pass_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param.pair_correct_thr", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1Param.pair_correct_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param.pair_points_thr", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1Param.pair_points_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param.pair_points_qc_thr", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1Param.pair_points_qc_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param.range_image_size_thr", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1Param.range_image_size_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param.cluster_num_thr", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1Param.cluster_num_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1Param.model_config", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1Param.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.__init__", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev1</span><span class=\"o\">.</span><span class=\"n\">inference_v1</span><span class=\"o\">.</span><span class=\"n\">TemplateReferenceV1Param</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.chip_no", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.chip_no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.scale_x", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.scale_x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.scale_y", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.scale_y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.rotation", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.qc_pts", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.qc_pts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.template_qc_pts", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.template_qc_pts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.x_intercept", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.x_intercept", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.y_intercept", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.y_intercept", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.fov_loc_array", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.fov_loc_array", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.template_center_pt", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.template_center_pt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.template_qc", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.template_qc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.mosaic_height", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.mosaic_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.mosaic_width", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.mosaic_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.flag_skip_reference", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.flag_skip_reference", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.template", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.template", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.template_src", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.template_src", "kind": "variable", "doc": "<p>init parm</p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.set_minimize_method", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.set_minimize_method", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>method:</strong>  \u4f18\u5316\u51fd\u6570\u7b97\u6cd5 ['nelder-mead', 'bfgs', 'slsqp']</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.set_scale", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.set_scale", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scale_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">scale_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.set_rotate", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.set_rotate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.set_threshold", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.set_threshold", "kind": "function", "doc": "<p>\u9608\u503c\u53c2\u6570\u5b9a\u4e49</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pair_thresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">qc_thresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">range_thresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">correct_thresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_num</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.set_chipno", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.set_chipno", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chip_no</strong>:  \u82af\u7247\u6807\u51c6\u5468\u671f</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chip_no</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.set_fov_location", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.set_fov_location", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>global_loc</strong>:  \u5168\u5c40\u62fc\u63a5\u5750\u6807</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">global_loc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.set_qc_points", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.set_qc_points", "kind": "function", "doc": "<p>index: template FOV , row_col or [row, col]\npts: {index: [x, y, ind_x, ind_y], ...}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">pts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.pair_to_template", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.pair_to_template", "kind": "function", "doc": "<p>one point of temp0 map to only one point of temp1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">temp_qc</span>, </span><span class=\"param\"><span class=\"n\">temp_re</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.resove_affine_matrix", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.resove_affine_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">H</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.first_template_correct", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.first_template_correct", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_points:</strong>  \u6a21\u677fFOV\u7684 QC\u68c0\u70b9\uff08\u975etrack\u7ebf\u68c0\u70b9\uff09</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_points</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">max_item</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">center_points</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.reference_template", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.reference_template", "kind": "function", "doc": "<p>mode: have three type ['single', 'double', 'multi']</p>\n\n<ul>\n<li>single: only reference template FOV</li>\n<li>double: reference template FOV &amp; minimize the points distance</li>\n<li>multi: reference template FOV &amp; minimize the points distance &amp; change the template center point</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;single&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.get_template_eval", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.get_template_eval", "kind": "function", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>max(dis), mean(dis) \u83b7\u5f97\u6b64\u65f6\u6a21\u677f\u4e0eQC\u70b9\u7684\u6700\u5927\u503c\u4e0e\u5747\u503c</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">area_eval</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.points_area_eval", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.points_area_eval", "kind": "function", "doc": "<p>\u7528\u6765\u8ba1\u7b97\u70b9\u7c07\u96c6\u5408</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points:</strong> </li>\n<li><strong>min_num:</strong>  \u6700\u5c0f\u70b9\u7c07\u7684\u6570\u91cf</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">points</span>, </span><span class=\"param\"><span class=\"n\">min_num</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.get_global_eval", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.get_global_eval", "kind": "function", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u5168\u5c40\u6a21\u677f\u7684\u8bef\u5dee\u77e9\u9635 \u7528\u4e8e\u5c55\u793a</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.save_template", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.save_template", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_path</strong>: </li>\n<li><strong>template</strong>:  \u53ef\u4f20\u5165\u5176\u4ed6\u6a21\u677f\u4fdd\u5b58</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u4fdd\u5b58\u6a21\u677f\u70b9</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">template</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1.homography_image", "modulename": "cellbin2.contrib.template.inferencev1.inference_v1", "qualname": "TemplateReferenceV1.homography_image", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image</strong>:  str | array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u8fd4\u56de\u5355\u5e94\u6027\u77e9\u9635\u548c\u53d8\u6362\u540e\u7684template\u70b9</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.model", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "model", "kind": "variable", "doc": "<p></p>\n", "default_value": "LinearRegression()"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.random_color", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "random_color", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.infinity", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "infinity", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-08"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.rotate", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "rotate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pt</span>, </span><span class=\"param\"><span class=\"n\">angle</span>, </span><span class=\"param\"><span class=\"n\">ori_w</span>, </span><span class=\"param\"><span class=\"n\">ori_h</span>, </span><span class=\"param\"><span class=\"n\">new_w</span>, </span><span class=\"param\"><span class=\"n\">new_h</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.coefficient", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.coefficient", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.bias", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.bias", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.index", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.two_points", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.two_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.set_coefficient_by_rotation", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.set_coefficient_by_rotation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rotation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.init_by_point_pair", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.init_by_point_pair", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pt0</span>, </span><span class=\"param\"><span class=\"n\">pt1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.init_by_point_k", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.init_by_point_k", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pt0</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.rotation", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.rotation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.get_point_by_x", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.get_point_by_x", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.get_point_by_y", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.get_point_by_y", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.Line.line_rotate", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "Line.line_rotate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span>, </span><span class=\"param\"><span class=\"n\">ori_w</span>, </span><span class=\"param\"><span class=\"n\">ori_h</span>, </span><span class=\"param\"><span class=\"n\">new_w</span>, </span><span class=\"param\"><span class=\"n\">new_h</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector.grid", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector.grid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector.generate", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector.generate", "kind": "function", "doc": "<p>This algorithm will not work the angle of image is more than 8 degree</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arr ():</strong>  2D array in uint 8 or uint 16</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>h_lines: horizontal line\n  v_lines: vertical line</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector.points_to_line", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector.points_to_line", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dct</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector.classify_points", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector.classify_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">candidate_pts</span>, </span><span class=\"param\"><span class=\"n\">base_angle</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector.angle_line", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector.angle_line", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle</span>, </span><span class=\"param\"><span class=\"n\">points</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector.select_pts_by_integer_angle", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector.select_pts_by_integer_angle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">candidate_pts</span>, </span><span class=\"param\"><span class=\"n\">base_angle</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector.integer_angle", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector.integer_angle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pts</span>, </span><span class=\"param\"><span class=\"n\">derection</span><span class=\"o\">=</span><span class=\"s1\">&#39;x&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.TrackLineDetector.create_candidate_pts", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "TrackLineDetector.create_candidate_pts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mat</span>, </span><span class=\"param\"><span class=\"n\">derection</span><span class=\"o\">=</span><span class=\"s1\">&#39;x&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.line_detector.main", "modulename": "cellbin2.contrib.template.inferencev1.line_detector", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker", "kind": "class", "doc": "<p>20x\u621640x\u8fd4\u56de\u53ef\u7528\u4e8e\u505a\u6a21\u677f\u63a8\u5bfc\u7684\u56fe\u50cf\n20x -- \u8fd4\u56de\u4e09\u5f20FOV\u56fe\n40x -- \u8fd4\u56de\u4e03\u5f20FOV\u56fe</p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.__init__", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">images_path</span>,</span><span class=\"param\">\t<span class=\"n\">jitter_list</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tissue_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">track_points</span><span class=\"p\">:</span> <span class=\"p\">{}</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.rows", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.rows", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.cols", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.cols", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.images_pair", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.images_pair", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.setImagesPath", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.setImagesPath", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>images_path</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">images_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.setTissueMask", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.setTissueMask", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tissue_mask</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tissue_mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.setTrackPoints", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.setTrackPoints", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>track_points: {'r_c'</strong>:  [x, y]}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">track_points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.setJitter", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.setJitter", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>jitter_list</strong>:  [h_j, v_j]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">jitter_list</span>, </span><span class=\"param\"><span class=\"n\">confi_mask</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.roi_picker.TrackROIPicker.getRoiImages", "modulename": "cellbin2.contrib.template.inferencev1.roi_picker", "qualname": "TrackROIPicker.getRoiImages", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>k</strong>:  \u53d6\u524dK\u5bf9</li>\n<li><strong>threold</strong>:  track\u70b9\u9608\u503c\n\u8fd4\u56de\u5c40\u90e8\u62fc\u63a5\u597d\u7684\u56fe\u50cf\u5bf9</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">threold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.intersect", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "intersect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s1</span>, </span><span class=\"param\"><span class=\"n\">s2</span>, </span><span class=\"param\"><span class=\"n\">s_idx</span>, </span><span class=\"param\"><span class=\"n\">template</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mi\">15</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.map_by_intercept", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "map_by_intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">intercept</span>, </span><span class=\"param\"><span class=\"n\">template</span>, </span><span class=\"param\"><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">2040</span>, </span><span class=\"param\"><span class=\"n\">scale_min</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>, </span><span class=\"param\"><span class=\"n\">scale_max</span><span class=\"o\">=</span><span class=\"mf\">2.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.template_reassign", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "template_reassign", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">template</span>, </span><span class=\"param\"><span class=\"n\">scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.intercept_reassign", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "intercept_reassign", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"n\">intercept_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.__init__", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scope_type ():</strong>  10x or 20x</li>\n<li><strong>scale_range ():</strong>  scale search range</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">magnification</span>, </span><span class=\"param\"><span class=\"n\">scale_range</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.cross_pts", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.cross_pts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.x_scale", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.x_scale", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.y_scale", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.y_scale", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.rotation", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.rotation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.x_cnt", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.x_cnt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.y_cnt", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.y_cnt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.x_err_min", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.x_err_min", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.y_err_min", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.y_err_min", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.template_match", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.template_match", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_intercept</span>, </span><span class=\"param\"><span class=\"n\">y_intercept</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">chip_template</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.match", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.match", "kind": "function", "doc": "<p>What this function do?\nGiven the track line of the image, this algo will match all possible track lines. This algo will get scale and\nrotation based on the possible track lines. After that, this algo will regenerate x and y intercept based on the\nfirst line in each direction and the corresponding scale.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>shape ():</strong>  shape of the image</li>\n<li><strong>track_lines ():</strong>  track line of the image</li>\n<li><strong>chip_template ():</strong>   the template of the chip</li>\n</ul>\n\n<h6 id=\"results\">Results:</h6>\n\n<blockquote>\n  <p>self.cross_pts: list of list (success) -> [[x, y, x_ind, y_ind], ...], None (fail)\n  self.x_scale: float (success), None (fail)\n  self.y_scale: float (success), None (fail)\n  self.rotation: float (success), None (fail)</p>\n</blockquote>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>0: success\n  1: fail</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">track_lines</span>, </span><span class=\"param\"><span class=\"n\">chip_template</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.point_spread_into_template", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.point_spread_into_template", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">templ_points</span>, </span><span class=\"param\"><span class=\"n\">rotation</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">chip_template</span>, </span><span class=\"param\"><span class=\"n\">x_scale</span>, </span><span class=\"param\"><span class=\"n\">y_scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.get_intercept", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.get_intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">intercept0</span>, </span><span class=\"param\"><span class=\"n\">region</span>, </span><span class=\"param\"><span class=\"n\">ind</span>, </span><span class=\"param\"><span class=\"n\">templ</span>, </span><span class=\"param\"><span class=\"n\">scale</span>, </span><span class=\"param\"><span class=\"n\">rotation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.create_cross_points", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.create_cross_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">x_intercept</span>, </span><span class=\"param\"><span class=\"n\">y_intercept</span>, </span><span class=\"param\"><span class=\"n\">shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.TemplateMatcher.make_cross_points", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "TemplateMatcher.make_cross_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">templx_lines</span>, </span><span class=\"param\"><span class=\"n\">temply_lines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.template_match.main", "modulename": "cellbin2.contrib.template.inferencev1.template_match", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLinesParam", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLinesParam", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLinesParam.score_thr", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLinesParam.score_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLinesParam.topk", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLinesParam.topk", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLinesParam.channel", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLinesParam.channel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLinesParam.model_config", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLinesParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.pts_on_img", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "pts_on_img", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">pts</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.line_debug", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "line_debug", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">lines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.__init__", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.__init__", "kind": "function", "doc": "<p>This class is used to do track line detection and template matching by using traditional algo.\nThis algorithm will not work the angle of image is more than 8 degree.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>magnification ():</strong>  10x or 20x</li>\n<li><strong>scale_range ():</strong>  scale search range</li>\n<li><strong>channel ():</strong>  the channel you choose to do line detect if input is multichannel\ndefault is -1 -> use opencv convert rgb to gray</li>\n<li><strong>chip_template ():</strong>  SS2: [\n[240, 300, 330, 390, 390, 330, 300, 240, 420],\n[240, 300, 330, 390, 390, 330, 300, 240, 420]\n]\ndefault is SS2</li>\n</ul>\n\n<h6 id=\"result\">Result:</h6>\n\n<blockquote>\n  <p>self.line_result: track line detection result by traditional method\n      - {'row_col': [track_lines, (image_height, image_width)]}\n      - no dets: {}</p>\n  \n  <p>self.matching_result:\n      - {'row_col': [cross_pts, x_scale, y_scale, rotation}\n      - no matches: {}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">magnification</span>, </span><span class=\"param\"><span class=\"n\">scale_range</span>, </span><span class=\"param\"><span class=\"n\">channel</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">chip_template</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.detect_channel", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.detect_channel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.chip_template", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.chip_template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.line_detector", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.line_detector", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.line_matcher", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.line_matcher", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.line_result", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.line_result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.matching_result", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.matching_result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.score", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.pre_func", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.pre_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.debug", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.save_dir", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.save_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.line_dir", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.line_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.match_dir", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.match_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.set_preprocess_func", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.set_preprocess_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.set_debug_mode", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.set_debug_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.line_detect", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.line_detect", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img_dict (dict):</strong>  {'row_col': [img_path, angle]}, angle can be None if unknown</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.track_match", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.track_match", "kind": "function", "doc": "<p>This func is used to match the track line results</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>self.matching_result (dict): contain result for each fov. Including cross pts, x_scale, y_scale, rotation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.get_best_match", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.get_best_match", "kind": "function", "doc": "<p>This func is used to get the best template fov from all matching result</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pt (list): row_col, cross pts, x_scale, y_scale, rotation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev1.track_line.TrackLineQC.match_eval", "modulename": "cellbin2.contrib.template.inferencev1.track_line", "qualname": "TrackLineQC.match_eval", "kind": "function", "doc": "<p>This func is used to rank all matching result</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>self.matching_result: a ranked matching result</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2", "modulename": "cellbin2.contrib.template.inferencev2", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "kind": "module", "doc": "<p>reference template v2 for image, must need QC data.\ncreate by lizepeng, 2023/4/13 14:09</p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param.v2_ssDNA_pass_thr", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param.v2_ssDNA_pass_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param.v2_HE_pass_thr", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param.v2_HE_pass_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param.v2_scale_range_thr", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param.v2_scale_range_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param.v2_rotate_range_thr", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param.v2_rotate_range_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param.v2_search_range_thr", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param.v2_search_range_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param.v2_rotate_fov_min_thr", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param.v2_rotate_fov_min_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param.v2_scale_limits", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param.v2_scale_limits", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2Param.model_config", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2Param.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2", "kind": "class", "doc": "<p>\u6a21\u677f\u63a8\u5bfc\u7b97\u6cd5V2\n\u5206\u522b\u901a\u8fc7\u70b9\u6765\u62df\u5408\u5927\u81f4\u89d2\u5ea6\u548c\u5c3a\u5ea6\n\u518d\u901a\u8fc7\u521d\u6b65\u6821\u51c6\u5f97\u5230\u5c40\u90e8\u533a\u57df\u7684\u7cbe\u786e\u89d2\u5ea6\u5c3a\u5ea6\u503c\n\u6700\u7ec8\u5168\u5c40\u63a8\u5bfc\u6a21\u677f</p>\n", "bases": "cellbin2.contrib.template.inferencev1.inference_v1.TemplateReferenceV1"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.__init__", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev1</span><span class=\"o\">.</span><span class=\"n\">inference_v1</span><span class=\"o\">.</span><span class=\"n\">TemplateReferenceV1Param</span>,</span><span class=\"param\">\t<span class=\"n\">cfg2</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inferencev2</span><span class=\"o\">.</span><span class=\"n\">inference_v2</span><span class=\"o\">.</span><span class=\"n\">TemplateReferenceV2Param</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.MINIMIZE_METHOD", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.MINIMIZE_METHOD", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;nelder-mead&#x27;, &#x27;slsqp&#x27;, &#x27;bfgs&#x27;]"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.scale_range", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.scale_range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.rotate_range", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.rotate_range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.search_thresh", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.search_thresh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.rotate_fov_min", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.rotate_fov_min", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.scale_limits", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.scale_limits", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.set_scale_flag", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.set_scale_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.set_rotate_flag", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.set_rotate_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.fov_index", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.fov_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.fov_best_point", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.fov_best_point", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.get_fov_info", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.get_fov_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.set_threshold_v2", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.set_threshold_v2", "kind": "function", "doc": "<p>\u6a21\u677f\u63a8\u5bfcV2\u9608\u503c</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scale_range</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">rotate_range</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">rotate_fov_min</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.set_scale", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.set_scale", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scale_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">scale_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.set_rotate", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.set_rotate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.set_qc_points", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.set_qc_points", "kind": "function", "doc": "<p>pts: {index: [x, y, ind_x, ind_y], ...}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.inference_v2.TemplateReferenceV2.reference_template_v2", "modulename": "cellbin2.contrib.template.inferencev2.inference_v2", "qualname": "TemplateReferenceV2.reference_template_v2", "kind": "function", "doc": "<p>\u6a21\u677f\u63a8\u5bfc\u7b97\u6cd5V2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "kind": "module", "doc": "<p>By lizepeng1 - 2024/01/12</p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search.RotateSearch", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "qualname": "RotateSearch", "kind": "class", "doc": "<p>track\u68c0\u70b9\u8fdb\u884c\u89d2\u5ea6\u5224\u5b9a</p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search.RotateSearch.__init__", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "qualname": "RotateSearch.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>search_range:</strong> </li>\n<li><strong>search_point_num:</strong> </li>\n<li><strong>dis_range:</strong> </li>\n<li><strong>point_range:</strong> </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_range</span><span class=\"o\">=</span><span class=\"mi\">90</span>, </span><span class=\"param\"><span class=\"n\">search_point_num</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">dis_range</span><span class=\"o\">=</span><span class=\"mi\">5000</span>, </span><span class=\"param\"><span class=\"n\">point_range</span><span class=\"o\">=</span><span class=\"mi\">20</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search.RotateSearch.search_range", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "qualname": "RotateSearch.search_range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search.RotateSearch.dis_range", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "qualname": "RotateSearch.dis_range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search.RotateSearch.point_range", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "qualname": "RotateSearch.point_range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search.RotateSearch.search_point_num", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "qualname": "RotateSearch.search_point_num", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search.RotateSearch.distance_by_line", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "qualname": "RotateSearch.distance_by_line", "kind": "function", "doc": "<p>\u6309\u8ddd\u79bb\u53d6\u503c</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>line_points:</strong>  points -- [[x1, y1], [x2, y2]]</li>\n<li><strong>points:</strong> </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line_points</span>, </span><span class=\"param\"><span class=\"n\">points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.rotate_search.RotateSearch.get_rotate", "modulename": "cellbin2.contrib.template.inferencev2.rotate_search", "qualname": "RotateSearch.get_rotate", "kind": "function", "doc": "<p>\u83b7\u5f97\u89d2\u5ea6\u503c</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">points</span>, </span><span class=\"param\"><span class=\"n\">fit</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "kind": "module", "doc": "<p>By lizepeng1 - 2024/01/15</p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search.ScaleSearch", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "qualname": "ScaleSearch", "kind": "class", "doc": "<p>track\u68c0\u70b9\u8fdb\u884c\u5c3a\u5ea6\u5224\u5b9a, \u9700\u8981\u7ed9\u660e\u89d2\u5ea6</p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search.ScaleSearch.__init__", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "qualname": "ScaleSearch.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">1.7</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">chip_template</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search.ScaleSearch.search_range", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "qualname": "ScaleSearch.search_range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search.ScaleSearch.chip_template", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "qualname": "ScaleSearch.chip_template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search.ScaleSearch.template", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "qualname": "ScaleSearch.template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search.ScaleSearch.rotation", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "qualname": "ScaleSearch.rotation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search.ScaleSearch.pair_to_template", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "qualname": "ScaleSearch.pair_to_template", "kind": "function", "doc": "<p>one point of temp0 map to only one point of temp1</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dis:</strong>  \u8ddd\u79bb\u6d4b\u91cf</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">temp_qc</span>, </span><span class=\"param\"><span class=\"n\">temp_re</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">dis</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.inferencev2.scale_search.ScaleSearch.get_scale", "modulename": "cellbin2.contrib.template.inferencev2.scale_search", "qualname": "ScaleSearch.get_scale", "kind": "function", "doc": "<p>\u5c3a\u5ea6\u641c\u7d22</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points:</strong> </li>\n<li><strong>rotate:</strong> </li>\n<li><strong>n:</strong>  \u70b9\u6570</li>\n</ul>\n\n<h6 id=\"return\">Return:</h6>\n\n<blockquote>\n  <p>scale:\n  best_point:</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">points</span>, </span><span class=\"param\"><span class=\"n\">rotate</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector", "modulename": "cellbin2.contrib.template.point_detector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.point_detector.pt_enhance_method", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "pt_enhance_method", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: &lt;function dapi_enhance&gt;, 2: &lt;function dapi_enhance&gt;, 3: &lt;function he_enhance&gt;}"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel, cellbin2.contrib.base_module.BaseModule"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.detect_channel", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.detect_channel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.first_level_thr", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.first_level_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.second_level_thr", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.second_level_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.good_thresh", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.good_thresh", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.process", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.process", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.conf_filter", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.conf_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.high_freq_angle_thr", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.high_freq_angle_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.DEFAULT_STAIN_TYPE", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.DEFAULT_STAIN_TYPE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.common.TechType"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.SUPPORTED_STAIN_TYPE", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.SUPPORTED_STAIN_TYPE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[cellbin2.utils.common.TechType, cellbin2.utils.common.TechType, cellbin2.utils.common.TechType]"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.ssDNA_weights_path", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.ssDNA_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.DAPI_weights_path", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.DAPI_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.HE_weights_path", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.HE_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.IF_weights_path", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.IF_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.GPU", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.GPU", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.num_threads", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.num_threads", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointsParam.model_config", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointsParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.template.point_detector.no_enhance", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "no_enhance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.pts_on_img", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "pts_on_img", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">pts</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.divergence", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "divergence", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.save_result_on_image", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "save_result_on_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">enhance_func</span>, </span><span class=\"param\"><span class=\"n\">img_obj</span>, </span><span class=\"param\"><span class=\"n\">cp</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.__init__", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.__init__", "kind": "function", "doc": "<p>This class is used to do track point detection (using deep learning object detection algo).\nWill also do track point quality control based on the distribution among fovs, counts of\ndetections and the confidence score of prediction</p>\n\n<p>Track Eval:</p>\n\n<p>is used to evaluate the track points result from object detection algo.</p>\n\n<h6 id=\"considering\">Considering:</h6>\n\n<blockquote>\n  <ol>\n  <li>track pts count of each fov</li>\n  <li>track pts dets confidence score of each fov</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cfg (TrackPtParam):</strong>  \u914d\u7f6e\u53c2\u6570</li>\n<li><strong>stain_type:</strong>  \u67d3\u8272\u7c7b\u578b</li>\n</ul>\n\n<h6 id=\"result\">Result:</h6>\n\n<blockquote>\n  <p>self.track_result: track point detection result by deep learning method\n      - {'row_col': [[pt_x, pt_y, conf], angle]}\n      - no dets: {}</p>\n  \n  <p>self.fov_mask: score for each fov\n      - numpy 2d array (success)\n      - np.array([]) (fail)</p>\n  \n  <p>self.fovs_score (dict): score for all fovs in order (fov_score &gt; 0)\n      - {'row_col': fov_score}\n      - {} if no fov_score is greater than 0</p>\n  \n  <p>self.score: track_pts eval score, score interval is [0, 1], higher -> better\n      - float</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">weight_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/media/Data/dzh/weights/points_detect_yolov5obb_SSDNA_20220513_pytorch.onnx&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;ssDNA_weights_path&#39;</span><span class=\"p\">:</span> <span class=\"n\">weight_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dapi_weights_path&#39;</span><span class=\"p\">:</span> <span class=\"n\">weight_path</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;he_weights_path&#39;</span><span class=\"p\">:</span> <span class=\"n\">weight_path</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stain_type</span> <span class=\"o\">=</span> <span class=\"n\">TechType</span><span class=\"o\">.</span><span class=\"n\">ssDNA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">TrackPtParam</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">models_config</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tp_qc</span> <span class=\"o\">=</span> <span class=\"n\">TrackPointQC</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"n\">stain_type</span><span class=\"o\">=</span><span class=\"n\">stain_type</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.cfg", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.cfg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.template.point_detector.TrackPointsParam"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.stain_type", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.stain_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.ci", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.ci", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.track_result", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.track_result", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;Dict[(str, List[(List[List[float]], Optional[float])])]&#x27;"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.score", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.fov_mask", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.fov_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.good_fov_count", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.good_fov_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.most_freq_angle", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.most_freq_angle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, int]"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.rgb_warning", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.rgb_warning", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.img_read", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.img_read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span>, </span><span class=\"param\"><span class=\"n\">buffer</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.track_detect", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.track_detect", "kind": "function", "doc": "<p>This function will do track detection using object detection (deep learning) algo.\nself.track_result will be empty if no detections</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img_dict (dict):</strong>  \u5c0f\u56fe\uff1a{'row_col': img_path}\n\u5927\u56fe\uff1a{'row_col': [y_begin, y_end, x_begin, x_end]}</li>\n<li><strong>buffer:</strong>  np.ndarray \u5927\u56fe</li>\n<li><strong>save_dir:</strong>  str \u4fdd\u5b58\u8def\u5f84</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">img_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">buffer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.track_eval", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.track_eval", "kind": "function", "doc": "<p>This func will evaluate track cross quality for fovs</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>self.score: fov track cross score\n  self.fov_mask: 2d array, contain score for each fov\n  self.fovs_order: rank all fovs based on score</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.track_filter", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.track_filter", "kind": "function", "doc": "<p>\u6e05\u9664\u5f02\u5e38track\u68c0\u70b9</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>angle_dif:</strong>  \u4e0e\u4f17\u6570\u6700\u5927\u89d2\u5ea6\u5dee\u5f02</li>\n<li><strong>track_conf:</strong>  track\u70b9\u7684\u6700\u4f4e\u7f6e\u4fe1\u5ea6</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle_dif</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">track_conf</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.TrackPointQC.pts_loc_to_global", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "TrackPointQC.pts_loc_to_global", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img_dict</span>, </span><span class=\"param\"><span class=\"n\">pts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.large_split", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "large_split", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">large_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">overlap</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.image_location", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "image_location", "kind": "function", "doc": "<p>\u5927\u56fe\u5750\u6807\u751f\u6210\u51fd\u6570</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src_fovs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">rows</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.point_detector.run_detect", "modulename": "cellbin2.contrib.template.point_detector", "qualname": "run_detect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">point_detector</span><span class=\"o\">.</span><span class=\"n\">TrackPointsParam</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">overlap</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.track_qc", "modulename": "cellbin2.contrib.template.track_qc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.__init__", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>enhance_func ():</strong>  enhance method used to preprocess image</li>\n<li><strong>model_path ():</strong>  detect weight path</li>\n<li><strong>scope_type:</strong>  10x or 20x</li>\n<li><strong>scale_range ():</strong>  scale search range</li>\n<li><strong>topk:</strong>  topk track point result will be sent to line detect algo</li>\n<li><strong>pt_detect_channel ():</strong>  the channel you choose to do track detect if input is multichannel\ndefault is -1 -> just use the original image</li>\n<li><strong>line_detect_channel ():</strong>   the channel you choose to do line detect if input is multichannel\ndefault is -1 -> use opencv convert rgb to gray if multichannel</li>\n<li><strong>chip_template ():</strong>  SS2: [\n[240, 300, 330, 390, 390, 330, 300, 240, 420],\n[240, 300, 330, 390, 390, 330, 300, 240, 420]\n]\ndefault is SS2</li>\n<li><strong>th ():</strong>  [th, th2) -> track_point_score = 1</li>\n<li><strong>th2 ():</strong>  [th2, inf) -> track_point_score = 2\n<ul>\n<li>use default value as an example</li>\n<li>[0, 5) -> fov is scored as 0</li>\n<li>[5, 20) -> fov is scored as 1</li>\n<li>[20, inf) -> fov is scored as 2</li>\n</ul></li>\n</ul>\n\n<h6 id=\"result\">Result:</h6>\n\n<blockquote>\n  <p>self.pt_result: track point detection result by deep learning method\n      - {'row_col': [[pt_x, pt_y, conf], angle]}\n      - no dets: {}</p>\n  \n  <p>self.pt_score: track_pts eval score, score interval is [0, 1], higher -> better\n      - int\n      - Recommended score threshold for dapi is 0.4?</p>\n  \n  <p>self.line_result:  track line detection result by traditional method\n      - {'row_col': [track_lines, (image_height, image_width)]} (10x)\n      - {'image_name': [track_lines, (image_height, image_width)]} (20x)\n      - no dets: {}</p>\n  \n  <p>self.line_score: count of matched fovs / length of given fovs\n      - as long as this score is greater than 0, you will get at least one template</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">topk</span><span class=\"o\">=</span><span class=\"mi\">10</span></span>)</span>"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.track_pt_qc", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.track_pt_qc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.topk", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.topk", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.pt_result", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.pt_result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.pt_score", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.pt_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.line_result", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.line_result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.line_score", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.line_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.best_match", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.best_match", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.fovs", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.fovs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.good_fov_count", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.good_fov_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.set_chip_template", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.set_chip_template", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.set_topk", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.set_topk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.set_track_pt_thresh", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.set_track_pt_thresh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">th</span>, </span><span class=\"param\"><span class=\"n\">th2</span>, </span><span class=\"param\"><span class=\"n\">good_thresh</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.set_track_pt_process", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.set_track_pt_process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.run_pt_qc", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.run_pt_qc", "kind": "function", "doc": "<p>This func is used to run track point detection on fovs</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fovs ():</strong>  'row_col': img_path}</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>1: fail\n  0: success</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fovs</span>, </span><span class=\"param\"><span class=\"n\">enhance_func</span>, </span><span class=\"param\"><span class=\"n\">detect_channel</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.template.track_qc.RegistQC.run_line_qc", "modulename": "cellbin2.contrib.template.track_qc", "qualname": "RegistQC.run_line_qc", "kind": "function", "doc": "<p>This func is used to detect track line on fovs</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>line_fovs ():</strong>  10x -> None -> choose topk fov from track qc result\n20x -> given by stitch module, {\"image_name\": image (np.ndarray)}</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>1: fail\n  0: success</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">line_fovs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">detect_channel</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">magnification</span><span class=\"o\">=</span><span class=\"s1\">&#39;10x&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">enhance_func</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.tissue_segmentor", "modulename": "cellbin2.contrib.tissue_segmentor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel, cellbin2.contrib.base_module.BaseModule"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.ssDNA_weights_path", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.ssDNA_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.DAPI_weights_path", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.DAPI_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.HE_weights_path", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.HE_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.Transcriptomics_weights_path", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.Transcriptomics_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.Protein_weights_path", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.Protein_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.IF_weights_path", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.IF_weights_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.GPU", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.GPU", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.num_threads", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.num_threads", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegParam.model_config", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegInputInfo", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegInputInfo", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegInputInfo.weight_path_cfg", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegInputInfo.weight_path_cfg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.contrib.tissue_segmentor.TissueSegParam"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegInputInfo.input_path", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegInputInfo.input_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, pathlib.Path]"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegInputInfo.stain_type", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegInputInfo.stain_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.common.TechType"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegInputInfo.chip_size", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegInputInfo.chip_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[Union[float, int], Union[float, int]]"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegInputInfo.threshold_list", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegInputInfo.threshold_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[int, int]"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegInputInfo.model_config", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegInputInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.__init__", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.__init__", "kind": "function", "doc": "<p>Initialize the TissueSegmentation class with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>support_model (SupportModel):</strong>  The model support information.</li>\n<li><strong>cfg (TissueSegParam):</strong>  The configuration parameters for the tissue segmentation.</li>\n<li><strong>stain_type (TechType):</strong>  The type of stain used in the input image.</li>\n<li><strong>gpu (int):</strong>  The GPU index to be used for computation. Default is -1 (CPU).</li>\n<li><strong>num_threads (int):</strong>  The number of threads to be used when computing on the CPU. Default is 0.</li>\n<li><strong>threshold_list (Tuple[int, int]):</strong>  The threshold values for low and high intensity. Only used for IF images.</li>\n<li><strong>chip_size (List):</strong>  The size of the chip to be segmented.</li>\n<li><strong>is_big_chip (bool):</strong>  Flag indicating if the chip is a big chip that requires special preprocessing and postprocessing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">support_model</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">dnn</span><span class=\"o\">.</span><span class=\"n\">tissue_segmentor</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">SupportModel</span>,</span><span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">tissue_segmentor</span><span class=\"o\">.</span><span class=\"n\">TissueSegParam</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span>,</span><span class=\"param\">\t<span class=\"n\">gpu</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_list</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_big_chip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.cfg", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.cfg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.stain_type", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.stain_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.INPUT_SIZE", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.INPUT_SIZE", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.threshold_list", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.threshold_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.chip_size", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.chip_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.is_big_chip", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.is_big_chip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.gpu", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.gpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.num_threads", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.num_threads", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.model_path", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.model_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.tissue_seg", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.tissue_seg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.tissue_segmentor.TissueSegmentation.run", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "TissueSegmentation.run", "kind": "function", "doc": "<p>Perform tissue segmentation on the input image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img (Union[str, npt.NDArray]):</strong>  The input image, which can be provided as a file path or a NumPy array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TissueSegOutputInfo: The segmentation mask.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">TissueSegOutputInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.tissue_segmentor.compute_chip_size", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "compute_chip_size", "kind": "function", "doc": "<p>Calculate the chip size of the input image.</p>\n\n<p>The function divides the height and width of the input image by 20000 to compute\nthe chip size. If the input image has a shape of 1, 2, or 3 along the first axis,\nit is transposed before computing the dimensions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>input_img (np.ndarray):</strong>  The input image as a numpy array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list containing the computed chip height and width.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.tissue_segmentor.segment4tissue", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "segment4tissue", "kind": "function", "doc": "<p>Perform tissue segmentation on the input image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>input_data (TissueSegInputInfo):</strong>  An instance containing the following fields:\n<ul>\n<li>weight_path_cfg (TissueSegParam): Configuration for the tissue segmentation model weights.</li>\n<li>input_path (str): Absolute path to the input image.</li>\n<li>stain_type (TechType): The staining type of the input image.</li>\n<li>gpu (int): GPU index to use for computation. Default is -1, which means using CPU.</li>\n<li>chip_size (Tuple[int, int]): The height and width of the chip. If not provided, it will be computed based on the image size.</li>\n<li>threshold_list (Tuple[int, int], optional):\nThe lower and upper thresholds for segmentation. Only applicable for IF images.\nIf provided, these thresholds will be used for segmentation. If not provided, the OTSU algorithm will be used.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TissueSegOutputInfo:\n      An instance containing the following fields:\n          - tissue_mask (np.ndarray): The output tissue segmentation mask.\n          - threshold_list (Tuple[int, int]):\n              The thresholds used for segmentation. Only applicable for IF images.\n              If input_data.threshold_list is None, the returned thresholds are those calculated by the OTSU algorithm and the theoretical maximum grayscale value\n              (uint8: 255, uint16: 65535). If input_data.threshold_list is not None, the returned thresholds are the same as the input thresholds.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_data</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">tissue_segmentor</span><span class=\"o\">.</span><span class=\"n\">TissueSegInputInfo</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">TissueSegOutputInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.tissue_segmentor.main", "modulename": "cellbin2.contrib.tissue_segmentor", "qualname": "main", "kind": "function", "doc": "<p>Main function to perform tissue segmentation on an input image.</p>\n\n<p>This function parses command-line arguments for the input image path, output file path,\nmodel path, stain type, chip size, mode (onnx or tf), and GPU index. It initializes the\ntissue segmentation model with the given parameters, processes the input image, and saves\nthe resulting segmented image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>input (str):</strong>  Path to the input image file.</li>\n<li><strong>output (str):</strong>  Path to save the output segmented image file.</li>\n<li><strong>model (str):</strong>  Path to the model file.</li>\n<li><strong>stain (str):</strong>  Type of stain used in the input image.</li>\n<li><strong>chip_size (list):</strong>  Height and width of the chip.</li>\n<li><strong>mode (str):</strong>  Mode of the model ('onnx' or 'tf').</li>\n<li><strong>gpu (int):</strong>  Index of the GPU to use.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align", "modulename": "cellbin2.contrib.track_align", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.rotate", "modulename": "cellbin2.contrib.track_align", "qualname": "rotate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ptx</span>, </span><span class=\"param\"><span class=\"n\">pty</span>, </span><span class=\"param\"><span class=\"n\">angle</span>, </span><span class=\"param\"><span class=\"n\">original_shape</span>, </span><span class=\"param\"><span class=\"n\">new_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.multiply_sum", "modulename": "cellbin2.contrib.track_align", "qualname": "multiply_sum", "kind": "function", "doc": "<p>2023/09/20 @fxzhao \u8ba1\u7b97\u77e9\u9635\u76f8\u4e58\u540e\u7684\u7d2f\u52a0\u548c</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.sub_sum", "modulename": "cellbin2.contrib.track_align", "qualname": "sub_sum", "kind": "function", "doc": "<p>2024/01/03 @lzp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.__init__", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.__init__", "kind": "function", "doc": "<p>Vision image: generated based on gene expression matrix\nTransformed image obtained based on\n    - stitched image\n    - scale and rotation</p>\n\n<p>Transformed image should be in the same scale compared to vision image</p>\n\n<h6 id=\"transformed-image-and-vision-image-only-contain\">Transformed image and vision image only contain:</h6>\n\n<blockquote>\n  <ul>\n  <li>n times 90 degree rotation (e.g. 90, 180, 270, etc.)</li>\n  <li>x, y direction offsets</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>self.x_template (list):</strong>  chip template on x direction</li>\n<li><strong>self.y_template (list):</strong>  chip template on y direction</li>\n<li><strong>self.fov_size (float):</strong>  length of a period on chip template</li>\n<li><strong>self.dist_thresh (float):</strong>  maximum distance threshold</li>\n<li><strong>self.transformed_shape (tuple):</strong>  shape of tranformed image</li>\n<li><strong>self.transformed_mass (nd array):</strong>  mass center of transformed image</li>\n<li><strong>self.vision_shape (tuple):</strong>  shape of vision image</li>\n<li><strong>self.vision_mass (nd array):</strong>  mass center of vision image</li>\n<li><strong>self.vision_img (nd array):</strong>  vision image</li>\n<li><strong>self.transformed_image (nd array):</strong>  transformed image</li>\n<li><strong>self.transformed_cfov_pts (nd array):</strong>  selected cross points on transform image</li>\n<li><strong>self.vision_cfov_pts (nd array):</strong>  selected cross points on vision image</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.search_angle_set", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.search_angle_set", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.search_range_x", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.search_range_x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.search_range_y", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.search_range_y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.x_template", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.x_template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.y_template", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.y_template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.fov_size", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.fov_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.dist_thresh", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.dist_thresh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.transformed_shape", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.transformed_shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.transformed_mass", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.transformed_mass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.vision_shape", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.vision_shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.vision_mass", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.vision_mass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.vision_img", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.vision_img", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.transformed_image", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.transformed_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.transformed_cfov_pts", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.transformed_cfov_pts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.vision_cfov_pts", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.vision_cfov_pts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.new_method", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.new_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.set_chip_template", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.set_chip_template", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chip_template</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.get_mass", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.get_mass", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.adjust_cross", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.adjust_cross", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">stitch_template</span>,</span><span class=\"param\">\t<span class=\"n\">scale_x</span>,</span><span class=\"param\">\t<span class=\"n\">scale_y</span>,</span><span class=\"param\">\t<span class=\"n\">fov_stitched_shape</span>,</span><span class=\"param\">\t<span class=\"n\">new_shape</span>,</span><span class=\"param\">\t<span class=\"n\">chip_template</span>,</span><span class=\"param\">\t<span class=\"n\">rotation</span>,</span><span class=\"param\">\t<span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.flip_points", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.flip_points", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points:</strong>  [x, y]</li>\n<li><strong>shape:</strong>  [h, w] == [y, x]</li>\n<li><strong>axis:</strong>  - 0: x\n<ul>\n<li>1: y</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">chip_template</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.cal_score", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.cal_score", "kind": "function", "doc": "<p>2023/09/20 @fxzhao \u4f7f\u7528\u5207\u7247\u4ee3\u66ffpadding\u64cd\u4f5c,\u52a0\u901f\u5e76\u964d\u4f4e\u5185\u5b58</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">transformed_image</span>, </span><span class=\"param\"><span class=\"n\">vision_image</span>, </span><span class=\"param\"><span class=\"n\">offset</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.get_pts_based_on_ids", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.get_pts_based_on_ids", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pts_ids</span>, </span><span class=\"param\"><span class=\"n\">keep_ids</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.down_sample_normalize", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.down_sample_normalize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.get_new_shape", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.get_new_shape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_shape</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.get_rough_offset", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.get_rough_offset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">offset_guess</span>,</span><span class=\"param\">\t<span class=\"n\">rot_guess</span>,</span><span class=\"param\">\t<span class=\"n\">old_shape</span>,</span><span class=\"param\">\t<span class=\"n\">new_shape</span>,</span><span class=\"param\">\t<span class=\"n\">transformed_pts</span>,</span><span class=\"param\">\t<span class=\"n\">vision_pts</span>,</span><span class=\"param\">\t<span class=\"n\">dist_thresh</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.search_fov", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.search_fov", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offset_ori</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.get_best_in_all_angles_offsets", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.get_best_in_all_angles_offsets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.contrib.track_align.AlignByTrack.run", "modulename": "cellbin2.contrib.track_align", "qualname": "AlignByTrack.run", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>transformed_image:</strong> </li>\n<li><strong>vision_img:</strong> </li>\n<li><strong>vision_cp:</strong> </li>\n<li><strong>stitch_tc:</strong> </li>\n<li><strong>flip:</strong> </li>\n<li><strong>rot90_flag:</strong> </li>\n<li><strong>new_method:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transformed_image</span>,</span><span class=\"param\">\t<span class=\"n\">vision_img</span>,</span><span class=\"param\">\t<span class=\"n\">vision_cp</span>,</span><span class=\"param\">\t<span class=\"n\">stitch_tc</span>,</span><span class=\"param\">\t<span class=\"n\">flip</span>,</span><span class=\"param\">\t<span class=\"n\">rot90_flag</span>,</span><span class=\"param\">\t<span class=\"n\">new_method</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn", "modulename": "cellbin2.dnn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.BaseNet", "modulename": "cellbin2.dnn", "qualname": "BaseNet", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "cellbin2.dnn.BaseNet.f_predict", "modulename": "cellbin2.dnn", "qualname": "BaseNet.f_predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.classify", "modulename": "cellbin2.dnn.classify", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.REPRESENT_INV", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "REPRESENT_INV", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;black&#x27;: 0, &#x27;blur&#x27;: 1, &#x27;good&#x27;: 2, &#x27;over_expo&#x27;: 3, &#x27;uncertain&#x27;: -1}"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.softmax", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "softmax", "kind": "function", "doc": "<p>Compute softmax values for each sets of scores in x.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.pre_func", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "pre_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_win</span>, </span><span class=\"param\"><span class=\"n\">win_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "cellbin2.dnn.onnx_net.OnnxNet"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.__init__", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">weight_path</span>, </span><span class=\"param\"><span class=\"n\">batch_size</span>, </span><span class=\"param\"><span class=\"n\">conf_thresh</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">gpu</span><span class=\"o\">=</span><span class=\"s1\">&#39;-1&#39;</span>, </span><span class=\"param\"><span class=\"n\">num_threads</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.conf_thresh", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.conf_thresh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.batch_size", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.batch_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.img_size", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.img_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.overlap", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.overlap", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.mean", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.mean", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.std", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.std", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.predict", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">imgs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.inference", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.inference", "kind": "function", "doc": "<p>1st step: split image into pieces (64, 64)\n2nd step: classify each piece into category (['black', 'over_exposure', 'blur', 'good'])</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img ():</strong>  image in numpy ndarray format</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>count_result: counts of each category\n  score: clarity score\n  pred_re: pred result\n      - shape is ceil(image_height / (64 - _overlap)),  ceil(image_width / (64 - self._overlap), 2)\n      - 2 -> 1st: class, 2nd probability</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.classify.onnx_mobilenet3.OnnxMobileNet3.score_calculator", "modulename": "cellbin2.dnn.classify.onnx_mobilenet3", "qualname": "OnnxMobileNet3.score_calculator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred_arr</span>, </span><span class=\"param\"><span class=\"n\">weight_map</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector", "modulename": "cellbin2.dnn.detector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.init_session", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "init_session", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.PickableInferenceSession", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "PickableInferenceSession", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.PickableInferenceSession.__init__", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "PickableInferenceSession.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_path</span></span>)</span>"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.PickableInferenceSession.model_path", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "PickableInferenceSession.model_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.PickableInferenceSession.sess", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "PickableInferenceSession.sess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.PickableInferenceSession.run", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "PickableInferenceSession.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_name</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.__init__", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conf_thresh</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">iou_thresh</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">gpu</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">num_threads</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">img_func</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.conf_thresh", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.conf_thresh", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.iou_thresh", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.iou_thresh", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.gpu", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.gpu", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.num_threads", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.num_threads", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.img_func", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.img_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.img_size", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.img_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.model", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[cellbin2.dnn.detector.onnx_yolo5_obb.PickableInferenceSession, NoneType]"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.load_model", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.load_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">weight_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.set_func", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.set_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fun</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.preprocess", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.preprocess", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.postprocess", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.postprocess", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">det</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mi\">15</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo5_obb.OBB5Detector.predict", "modulename": "cellbin2.dnn.detector.onnx_yolo5_obb", "qualname": "OBB5Detector.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "kind": "module", "doc": "<p>\ud83c\udf1f Create Time  : 2024/9/19 10:40\n\ud83c\udf1f Author  : CB\ud83d\udc02\ud83d\udc0e - lizepeng\n\ud83c\udf1f File  : test.py\n\ud83c\udf1f Description  :</p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector", "kind": "class", "doc": "<p>YOLOv8 object detection model class for handling inference and visualization.</p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.__init__", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.__init__", "kind": "function", "doc": "<p>Initializes an instance of the YOLOv8 class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>onnx_model:</strong>  Path to the ONNX model.</li>\n<li><strong>input_image:</strong>  Path to the input image.</li>\n<li><strong>confidence_thres:</strong>  Confidence threshold for filtering detections.</li>\n<li><strong>iou_thres:</strong>  IoU (Intersection over Union) threshold for non-maximum suppression.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">onnx_model</span>, </span><span class=\"param\"><span class=\"n\">input_image</span>, </span><span class=\"param\"><span class=\"n\">confidence_thres</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">iou_thres</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span>)</span>"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.source_image", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.source_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.onnx_model", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.onnx_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.confidence_thres", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.confidence_thres", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.iou_thres", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.iou_thres", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.preprocess_func", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.preprocess_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.postprocess_func", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.postprocess_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.parse_image", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.parse_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.set_preprocess_func", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.set_preprocess_func", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.set_postprocess_func", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.set_postprocess_func", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.xywhr2xyxyxyxy", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.xywhr2xyxyxyxy", "kind": "function", "doc": "<p>Convert batched Oriented Bounding Boxes (OBB) from [xywh, rotation]\nto [xy1, xy2, xy3, xy4]. Rotation values should be in radians from 0 to pi/2.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (numpy.ndarray | torch.Tensor):</strong>  Boxes in [cx, cy, w, h, rotation] format of shape (n, 5) or (b, n, 5).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(numpy.ndarray | torch.Tensor): Converted corner points of shape (n, 4, 2) or (b, n, 4, 2).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.preprocess", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.preprocess", "kind": "function", "doc": "<p>Preprocesses the input image before performing inference.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>image_data: Preprocessed image data ready for inference.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">input_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.postprocess", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.postprocess", "kind": "function", "doc": "<p>Performs post-processing on the model's output to extract bounding boxes, scores, and class IDs.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>output (numpy.ndarray):</strong>  The output of the model.</li>\n<li><strong>x_factor:</strong> </li>\n<li><strong>y_factor:</strong> </li>\n<li><strong>obb:</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>numpy.ndarray: The input image with detections drawn on it.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output</span>, </span><span class=\"param\"><span class=\"n\">x_factor</span>, </span><span class=\"param\"><span class=\"n\">y_factor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector.run", "modulename": "cellbin2.dnn.detector.onnx_yolo8", "qualname": "Yolo8Detector.run", "kind": "function", "doc": "<p>Performs inference using an ONNX model and returns the output image with drawn detections.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output_img: The output image with drawn detections.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8_obb", "modulename": "cellbin2.dnn.detector.onnx_yolo8_obb", "kind": "module", "doc": "<p>\ud83c\udf1f Create Time  : 2024/9/19 10:40\n\ud83c\udf1f Author  : CB\ud83d\udc02\ud83d\udc0e - lizepeng\n\ud83c\udf1f File  : test.py\n\ud83c\udf1f Description  :</p>\n"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8_obb.OBB8Detector", "modulename": "cellbin2.dnn.detector.onnx_yolo8_obb", "qualname": "OBB8Detector", "kind": "class", "doc": "<p>YOLOv8 object detection model class for handling inference and visualization.</p>\n", "bases": "cellbin2.dnn.detector.onnx_yolo8.Yolo8Detector"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8_obb.OBB8Detector.__init__", "modulename": "cellbin2.dnn.detector.onnx_yolo8_obb", "qualname": "OBB8Detector.__init__", "kind": "function", "doc": "<p>Initializes an instance of the YOLOv8 class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>onnx_model:</strong>  Path to the ONNX model.</li>\n<li><strong>input_image:</strong>  Path to the input image.</li>\n<li><strong>confidence_thres:</strong>  Confidence threshold for filtering detections.</li>\n<li><strong>iou_thres:</strong>  IoU (Intersection over Union) threshold for non-maximum suppression.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">onnx_model</span>, </span><span class=\"param\"><span class=\"n\">input_image</span>, </span><span class=\"param\"><span class=\"n\">confidence_thres</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">iou_thres</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span>)</span>"}, {"fullname": "cellbin2.dnn.detector.onnx_yolo8_obb.OBB8Detector.postprocess", "modulename": "cellbin2.dnn.detector.onnx_yolo8_obb", "qualname": "OBB8Detector.postprocess", "kind": "function", "doc": "<p>Performs post-processing on the model's output to extract bounding boxes, scores, and class IDs.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>output (numpy.ndarray):</strong>  The output of the model.</li>\n<li><strong>x_factor:</strong> </li>\n<li><strong>y_factor:</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>numpy.ndarray: The input image with detections drawn on it.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output</span>, </span><span class=\"param\"><span class=\"n\">x_factor</span>, </span><span class=\"param\"><span class=\"n\">y_factor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.util", "modulename": "cellbin2.dnn.detector.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.detector.util.pi", "modulename": "cellbin2.dnn.detector.util", "qualname": "pi", "kind": "variable", "doc": "<p></p>\n", "default_value": "3.141592"}, {"fullname": "cellbin2.dnn.detector.util.letterbox", "modulename": "cellbin2.dnn.detector.util", "qualname": "letterbox", "kind": "function", "doc": "<p>Resize and pad image while meeting stride-multiple constraints\n\u8be5\u6a21\u5757\u5c06\u975e\u6b63\u65b9\u5f62\u56fe\u7247\u5148\u4ee5\u957f\u8fb9\u4e0enew_shape\u7684\u6bd4\u4f8b\u8fdb\u884cresize, \u518d\u8865\u9f50\u77ed\u8fb9\u5f62\u6210\u6b63\u65b9\u5f62\n\u5982\u679c\u662f\u6b63\u65b9\u5f62\u56fe\u7247, \u5c31\u662f\u76f4\u63a5resize\u6210new_shape</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>im (array): (height, width, 3)\n  ratio (array): [w_ratio, h_ratio]\n  (dw, dh) (array): [w_padding h_padding]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im</span>, </span><span class=\"param\"><span class=\"n\">new_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">640</span><span class=\"p\">,</span> <span class=\"mi\">640</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.util.scale_polys", "modulename": "cellbin2.dnn.detector.util", "qualname": "scale_polys", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img1_shape</span>, </span><span class=\"param\"><span class=\"n\">polys</span>, </span><span class=\"param\"><span class=\"n\">img0_shape</span>, </span><span class=\"param\"><span class=\"n\">box</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">ratio_pad</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.util.rbox2poly", "modulename": "cellbin2.dnn.detector.util", "qualname": "rbox2poly", "kind": "function", "doc": "<p>Trans rbox format to poly format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rboxes (array/tensor):</strong>  (num_gts, [cx cy l s \u03b8]) \u03b8\u2208[-pi/2, pi/2)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>polys (array/tensor): (num_gts, [x1 y1 x2 y2 x3 y3 x4 y4])</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obboxes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.util.nms_rotate_cpu", "modulename": "cellbin2.dnn.detector.util", "qualname": "nms_rotate_cpu", "kind": "function", "doc": "<p>boxes: format (x_c, y_c, w, h, theta)\nscores: scores of all boxes\niou_threshold:\nmax_output_size: max number of output\nreturn: the remaining index of box</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">boxes</span>, </span><span class=\"param\"><span class=\"n\">scores</span>, </span><span class=\"param\"><span class=\"n\">iou_threshold</span>, </span><span class=\"param\"><span class=\"n\">max_output_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.util.obb_nms_np", "modulename": "cellbin2.dnn.detector.util", "qualname": "obb_nms_np", "kind": "function", "doc": "<p>RIoU NMS - iou_thr.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dets (tensor/array):</strong>  (num, [cx cy w h \u03b8]) \u03b8\u2208[-pi/2, pi/2)</li>\n<li><strong>scores (tensor/array):</strong>  (num)</li>\n<li><strong>iou_thr (float):</strong>  (1)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dets (tensor): (n_nms, [cx cy w h \u03b8])\n  inds (tensor): (n_nms), nms index of dets</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dets</span>, </span><span class=\"param\"><span class=\"n\">scores</span>, </span><span class=\"param\"><span class=\"n\">iou_thr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.util.non_max_suppression_obb_np", "modulename": "cellbin2.dnn.detector.util", "qualname": "non_max_suppression_obb_np", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prediction</span>,</span><span class=\"param\">\t<span class=\"n\">conf_thres</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">iou_thres</span><span class=\"o\">=</span><span class=\"mf\">0.45</span>,</span><span class=\"param\">\t<span class=\"n\">agnostic</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">multi_label</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_det</span><span class=\"o\">=</span><span class=\"mi\">1500</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.detector.util.main", "modulename": "cellbin2.dnn.detector.util", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.onnx_net", "modulename": "cellbin2.dnn.onnx_net", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.onnx_net.OnnxNet", "modulename": "cellbin2.dnn.onnx_net", "qualname": "OnnxNet", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "cellbin2.dnn.BaseNet"}, {"fullname": "cellbin2.dnn.onnx_net.OnnxNet.__init__", "modulename": "cellbin2.dnn.onnx_net", "qualname": "OnnxNet.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_path</span>, </span><span class=\"param\"><span class=\"n\">gpu</span><span class=\"o\">=</span><span class=\"s1\">&#39;-1&#39;</span>, </span><span class=\"param\"><span class=\"n\">num_threads</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "cellbin2.dnn.onnx_net.OnnxNet.f_predict", "modulename": "cellbin2.dnn.onnx_net", "qualname": "OnnxNet.f_predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.onnx_net.OnnxNet.f_get_input_shape", "modulename": "cellbin2.dnn.onnx_net", "qualname": "OnnxNet.f_get_input_shape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.onnx_net.OnnxNet.output_shape", "modulename": "cellbin2.dnn.onnx_net", "qualname": "OnnxNet.output_shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor", "modulename": "cellbin2.dnn.segmentor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace", "modulename": "cellbin2.dnn.segmentor.cell_trace", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace.get_trace", "modulename": "cellbin2.dnn.segmentor.cell_trace", "qualname": "get_trace", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace.get_trace_v2", "modulename": "cellbin2.dnn.segmentor.cell_trace", "qualname": "get_trace_v2", "kind": "function", "doc": "<p>2023/09/20 @fxzhao get_trace\u7684\u5347\u7ea7\u7248\u672c,\u5206\u5757\u5904\u7406,\u964d\u4f4e\u5927\u6570\u636e\u91cf\u4e0b\u7684\u5185\u5b58\u5360\u7528\n2023/09/21 @fxzhao \u589e\u52a0\u6570\u636e\u91cf\u68c0\u6d4b,\u5f53\u6570\u636e\u8f83\u5c0f\u65f6\u4f7f\u7528\u4e0d\u5206\u5757\u65b9\u6cd5</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace.cal_area", "modulename": "cellbin2.dnn.segmentor.cell_trace", "qualname": "cal_area", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_mask</span>, </span><span class=\"param\"><span class=\"n\">tissue_mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace.cal_int", "modulename": "cellbin2.dnn.segmentor.cell_trace", "qualname": "cal_int", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">c_mask</span>, </span><span class=\"param\"><span class=\"n\">t_mask</span>, </span><span class=\"param\"><span class=\"n\">register_img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace.get_partial_res", "modulename": "cellbin2.dnn.segmentor.cell_trace", "qualname": "get_partial_res", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">c_mask</span>, </span><span class=\"param\"><span class=\"n\">t_mask</span>, </span><span class=\"param\"><span class=\"n\">register_img</span>, </span><span class=\"param\"><span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1024</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace.cell_int_hist", "modulename": "cellbin2.dnn.segmentor.cell_trace", "qualname": "cell_int_hist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">c_mask</span>, </span><span class=\"param\"><span class=\"n\">register_img</span>, </span><span class=\"param\"><span class=\"n\">ifshow</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace.test_hist", "modulename": "cellbin2.dnn.segmentor.cell_trace", "qualname": "test_hist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.cell_trace.check_cells_with_tissue", "modulename": "cellbin2.dnn.segmentor.cell_trace", "qualname": "check_cells_with_tissue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tissue_mask</span>, </span><span class=\"param\"><span class=\"n\">cell_mask</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.detector", "modulename": "cellbin2.dnn.segmentor.detector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation.__init__", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;onnx&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gpu</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">win_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">overlap</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">dnn</span><span class=\"o\">.</span><span class=\"n\">segmentor</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"o\">.</span><span class=\"n\">CellSegPreprocess</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">postprocess</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">dnn</span><span class=\"o\">.</span><span class=\"n\">segmentor</span><span class=\"o\">.</span><span class=\"n\">postprocess</span><span class=\"o\">.</span><span class=\"n\">CellSegPostprocess</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation.model_path", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation.model_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation.watershed_win_size", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation.watershed_win_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation.stain_type", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation.stain_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation.preprocess", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation.postprocess", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation.postprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation.f_init_model", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation.f_init_model", "kind": "function", "doc": "<p>init model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.detector.Segmentation.f_predict", "modulename": "cellbin2.dnn.segmentor.detector", "qualname": "Segmentation.f_predict", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: CHANGE</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u63a9\u6a21\u5927\u56fe\n  2023/09/21 @fxzhao \u8bbe\u7f6eneed_fun_ret\u4e3aFalse,\u5f53\u524d\u7248\u672c\u672a\u7528\u5230\u6b64\u7ed3\u679c</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.postprocess", "modulename": "cellbin2.dnn.segmentor.postprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.f_postpocess", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "f_postpocess", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.f_postprocess_v2", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "f_postprocess_v2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.f_watershed", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "f_watershed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.f_postprocess_rna", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "f_postprocess_rna", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.model_postprocess", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "model_postprocess", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;cellseg_bcdu_SHDI_221008_tf&#x27;: {&lt;TechType.ssDNA: 1&gt;: &lt;function f_postprocess_v2&gt;, &lt;TechType.DAPI: 2&gt;: &lt;function f_postprocess_v2&gt;, &lt;TechType.HE: 3&gt;: &lt;function f_postprocess_v2&gt;}, &#x27;cellseg_bcdu_H_240823_tf&#x27;: {&lt;TechType.HE: 3&gt;: &lt;function f_postprocess_v2&gt;}, &#x27;cellseg_unet_RNA_20230606&#x27;: {&lt;TechType.Transcriptomics: 5&gt;: &lt;function f_postprocess_rna&gt;}}"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.CellSegPostprocess", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "CellSegPostprocess", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.CellSegPostprocess.__init__", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "CellSegPostprocess.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span></span>)</span>"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.CellSegPostprocess.model_name", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "CellSegPostprocess.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.postprocess.CellSegPostprocess.m_postprocess", "modulename": "cellbin2.dnn.segmentor.postprocess", "qualname": "CellSegPostprocess.m_postprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.predict", "modulename": "cellbin2.dnn.segmentor.predict", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.predict.CellPredict", "modulename": "cellbin2.dnn.segmentor.predict", "qualname": "CellPredict", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.predict.CellPredict.__init__", "modulename": "cellbin2.dnn.segmentor.predict", "qualname": "CellPredict.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">f_preformat</span>, </span><span class=\"param\"><span class=\"n\">f_postformat</span></span>)</span>"}, {"fullname": "cellbin2.dnn.segmentor.predict.CellPredict.f_predict", "modulename": "cellbin2.dnn.segmentor.predict", "qualname": "CellPredict.f_predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img_lst</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.preprocess", "modulename": "cellbin2.dnn.segmentor.preprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.f_pre_ssdna", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "f_pre_ssdna", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.f_pre_rna", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "f_pre_rna", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.f_pre_he", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "f_pre_he", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.f_pre_he_invert", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "f_pre_he_invert", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.model_preprocess", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "model_preprocess", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;cellseg_bcdu_SHDI_221008_tf&#x27;: {&lt;TechType.ssDNA: 1&gt;: &lt;function f_pre_ssdna&gt;, &lt;TechType.DAPI: 2&gt;: &lt;function f_pre_ssdna&gt;, &lt;TechType.HE: 3&gt;: &lt;function f_pre_he_invert&gt;}, &#x27;cellseg_bcdu_H_240823_tf&#x27;: {&lt;TechType.HE: 3&gt;: &lt;function f_pre_he&gt;}, &#x27;cellseg_unet_RNA_20230606&#x27;: {&lt;TechType.Transcriptomics: 5&gt;: &lt;function f_pre_rna&gt;}}"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.CellSegPreprocess", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "CellSegPreprocess", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.CellSegPreprocess.__init__", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "CellSegPreprocess.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span></span>)</span>"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.CellSegPreprocess.model_name", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "CellSegPreprocess.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.CellSegPreprocess.m_preprocess", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "CellSegPreprocess.m_preprocess", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "cellbin2.dnn.segmentor.preprocess.CellSegPreprocess.im_read", "modulename": "cellbin2.dnn.segmentor.preprocess", "qualname": "CellSegPreprocess.im_read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">im_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.processing", "modulename": "cellbin2.dnn.segmentor.processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.processing.f_preformat", "modulename": "cellbin2.dnn.segmentor.processing", "qualname": "f_preformat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.processing.f_preformat_rna", "modulename": "cellbin2.dnn.segmentor.processing", "qualname": "f_preformat_rna", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.processing.sigmoid", "modulename": "cellbin2.dnn.segmentor.processing", "qualname": "sigmoid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.processing.f_postformat_rna", "modulename": "cellbin2.dnn.segmentor.processing", "qualname": "f_postformat_rna", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.processing.normalize_to_0_255", "modulename": "cellbin2.dnn.segmentor.processing", "qualname": "normalize_to_0_255", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.processing.f_postformat", "modulename": "cellbin2.dnn.segmentor.processing", "qualname": "f_postformat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.processing.f_padding", "modulename": "cellbin2.dnn.segmentor.processing", "qualname": "f_padding", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;constant&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.processing.f_fusion", "modulename": "cellbin2.dnn.segmentor.processing", "qualname": "f_fusion", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img1</span>, </span><span class=\"param\"><span class=\"n\">img2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.segmentor.utils", "modulename": "cellbin2.dnn.segmentor.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.segmentor.utils.ONNX_EXT", "modulename": "cellbin2.dnn.segmentor.utils", "qualname": "ONNX_EXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.onnx&#x27;"}, {"fullname": "cellbin2.dnn.segmentor.utils.SUPPORTED_MODELS", "modulename": "cellbin2.dnn.segmentor.utils", "qualname": "SUPPORTED_MODELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;cellseg_bcdu_SHDI_221008_tf&#x27;, &#x27;cellseg_bcdu_H_240823_tf&#x27;, &#x27;cellseg_unet_RNA_20230606&#x27;]"}, {"fullname": "cellbin2.dnn.segmentor.utils.SUPPORTED_STAIN_TYPE_BY_MODEL", "modulename": "cellbin2.dnn.segmentor.utils", "qualname": "SUPPORTED_STAIN_TYPE_BY_MODEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;cellseg_bcdu_SHDI_221008_tf&#x27;: [&lt;TechType.ssDNA: 1&gt;, &lt;TechType.HE: 3&gt;, &lt;TechType.DAPI: 2&gt;], &#x27;cellseg_bcdu_H_240823_tf&#x27;: [&lt;TechType.HE: 3&gt;], &#x27;cellseg_unet_RNA_20230606&#x27;: [&lt;TechType.Transcriptomics: 5&gt;]}"}, {"fullname": "cellbin2.dnn.segmentor.utils.weight_name_ext", "modulename": "cellbin2.dnn.segmentor.utils", "qualname": "weight_name_ext", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;_weights_path&#x27;"}, {"fullname": "cellbin2.dnn.segmentor.utils.TechToWeightName", "modulename": "cellbin2.dnn.segmentor.utils", "qualname": "TechToWeightName", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;TechType.ssDNA: 1&gt;: &#x27;SSDNA_weights_path&#x27;, &lt;TechType.HE: 3&gt;: &#x27;HE_weights_path&#x27;, &lt;TechType.DAPI: 2&gt;: &#x27;DAPI_weights_path&#x27;, &lt;TechType.Transcriptomics: 5&gt;: &#x27;TRANSCRIPTOMICS_weights_path&#x27;}"}, {"fullname": "cellbin2.dnn.tensorrt_net", "modulename": "cellbin2.dnn.tensorrt_net", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tensorrt_net.TensorRTNet", "modulename": "cellbin2.dnn.tensorrt_net", "qualname": "TensorRTNet", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "cellbin2.dnn.BaseNet"}, {"fullname": "cellbin2.dnn.tensorrt_net.TensorRTNet.__init__", "modulename": "cellbin2.dnn.tensorrt_net", "qualname": "TensorRTNet.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_path</span>, </span><span class=\"param\"><span class=\"n\">gpu</span><span class=\"o\">=</span><span class=\"s1\">&#39;-1&#39;</span>, </span><span class=\"param\"><span class=\"n\">num_threads</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "cellbin2.dnn.tensorrt_net.TensorRTNet.f_predict", "modulename": "cellbin2.dnn.tensorrt_net", "qualname": "TensorRTNet.f_predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor", "modulename": "cellbin2.dnn.tissue_segmentor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.f_post_ssdna_dapi_SAW_V_7_1", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "f_post_ssdna_dapi_SAW_V_7_1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.f_post_ssdna_240618", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "f_post_ssdna_240618", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.f_post_he_240201", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "f_post_he_240201", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.f_post_he_241018", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "f_post_he_241018", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.f_post_transcriptomics_protein_220909", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "f_post_transcriptomics_protein_220909", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.BigChipTissueSegPostprocess", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "BigChipTissueSegPostprocess", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.BigChipTissueSegPostprocess.__init__", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "BigChipTissueSegPostprocess.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span>, </span><span class=\"param\"><span class=\"n\">support_model</span></span>)</span>"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.BigChipTissueSegPostprocess.model_postprocess", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "BigChipTissueSegPostprocess.model_postprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.BigChipTissueSegPostprocess.model_name", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "BigChipTissueSegPostprocess.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess.BigChipTissueSegPostprocess.m_postprocess", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_postprocess", "qualname": "BigChipTissueSegPostprocess.m_postprocess", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.crop_image", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "crop_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.f_pre_ssdna_dapi_SAW_V_7_1", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "f_pre_ssdna_dapi_SAW_V_7_1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.f_pre_ssdna_240618", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "f_pre_ssdna_240618", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.f_pre_he_240201", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "f_pre_he_240201", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.f_pre_he_241018", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "f_pre_he_241018", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.f_pre_transcriptomics_protein_220909", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "f_pre_transcriptomics_protein_220909", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">List</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.BigChipTissueSegPreprocess", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "BigChipTissueSegPreprocess", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.BigChipTissueSegPreprocess.__init__", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "BigChipTissueSegPreprocess.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span>, </span><span class=\"param\"><span class=\"n\">support_model</span>, </span><span class=\"param\"><span class=\"n\">chip_size</span></span>)</span>"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.BigChipTissueSegPreprocess.model_preprocess", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "BigChipTissueSegPreprocess.model_preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.BigChipTissueSegPreprocess.model_name", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "BigChipTissueSegPreprocess.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.BigChipTissueSegPreprocess.m_preprocess", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "BigChipTissueSegPreprocess.m_preprocess", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.BigChipTissueSegPreprocess.chip_size", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "BigChipTissueSegPreprocess.chip_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess.BigChipTissueSegPreprocess.im_read", "modulename": "cellbin2.dnn.tissue_segmentor.big_chip_preprocess", "qualname": "BigChipTissueSegPreprocess.im_read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.stitch_mask", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "stitch_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">List</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.__init__", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_list</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gpu</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;onnx&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">dnn</span><span class=\"o\">.</span><span class=\"n\">tissue_segmentor</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"o\">.</span><span class=\"n\">TissueSegPreprocess</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">dnn</span><span class=\"o\">.</span><span class=\"n\">tissue_segmentor</span><span class=\"o\">.</span><span class=\"n\">big_chip_preprocess</span><span class=\"o\">.</span><span class=\"n\">BigChipTissueSegPreprocess</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">postprocess</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">dnn</span><span class=\"o\">.</span><span class=\"n\">tissue_segmentor</span><span class=\"o\">.</span><span class=\"n\">postprocess</span><span class=\"o\">.</span><span class=\"n\">TissueSegPostprocess</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">dnn</span><span class=\"o\">.</span><span class=\"n\">tissue_segmentor</span><span class=\"o\">.</span><span class=\"n\">big_chip_postprocess</span><span class=\"o\">.</span><span class=\"n\">BigChipTissueSegPostprocess</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.INPUT_SIZE", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.INPUT_SIZE", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.stain_type", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.stain_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.gpu", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.gpu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.mode", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.model", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.mask_num", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.mask_num", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.num_threads", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.num_threads", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.threshold_list", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.threshold_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.pre_format", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.pre_format", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.post_format", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.post_format", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.preprocess", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.postprocess", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.postprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.f_init_model", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.f_init_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.f_predict", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.f_predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">TissueSegOutputInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.detector.TissueSegmentationBcdu.f_predict_big_chip", "modulename": "cellbin2.dnn.tissue_segmentor.detector", "qualname": "TissueSegmentationBcdu.f_predict_big_chip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">chip_size</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">TissueSegOutputInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.transfer_16bit_to_8bit", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "transfer_16bit_to_8bit", "kind": "function", "doc": "<p>Transfer the bit deepth of image from 16bit to 8bit</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_16bit</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.f_post_ssdna_dapi_SAW_V_7_1", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "f_post_ssdna_dapi_SAW_V_7_1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">src_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.f_post_ssdna_240618", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "f_post_ssdna_240618", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">src_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.f_post_he_240201", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "f_post_he_240201", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">src_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.f_post_he_241018", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "f_post_he_241018", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">src_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.f_post_transcriptomics_protein_220909", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "f_post_transcriptomics_protein_220909", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">src_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.f_post_if", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "f_post_if", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_list</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.TissueSegPostprocess", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "TissueSegPostprocess", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.TissueSegPostprocess.__init__", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "TissueSegPostprocess.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span>, </span><span class=\"param\"><span class=\"n\">support_model</span></span>)</span>"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.TissueSegPostprocess.model_postprocess", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "TissueSegPostprocess.model_postprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.TissueSegPostprocess.model_name", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "TissueSegPostprocess.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.postprocess.TissueSegPostprocess.m_postprocess", "modulename": "cellbin2.dnn.tissue_segmentor.postprocess", "qualname": "TissueSegPostprocess.m_postprocess", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.f_pre_ssdna_dapi_SAW_V_7_1", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "f_pre_ssdna_dapi_SAW_V_7_1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.f_pre_ssdna_240618", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "f_pre_ssdna_240618", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.f_pre_he_240201", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "f_pre_he_240201", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.f_pre_he_241018", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "f_pre_he_241018", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.f_pre_transcriptomics_protein_220909", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "f_pre_transcriptomics_protein_220909", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.f_pre_if", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "f_pre_if", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.TissueSegPreprocess", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "TissueSegPreprocess", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.TissueSegPreprocess.__init__", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "TissueSegPreprocess.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span>, </span><span class=\"param\"><span class=\"n\">support_model</span></span>)</span>"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.TissueSegPreprocess.model_preprocess", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "TissueSegPreprocess.model_preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.TissueSegPreprocess.model_name", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "TissueSegPreprocess.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.TissueSegPreprocess.m_preprocess", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "TissueSegPreprocess.m_preprocess", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "cellbin2.dnn.tissue_segmentor.preprocess.TissueSegPreprocess.im_read", "modulename": "cellbin2.dnn.tissue_segmentor.preprocess", "qualname": "TissueSegPreprocess.im_read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.processing", "modulename": "cellbin2.dnn.tissue_segmentor.processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.processing.f_preformat", "modulename": "cellbin2.dnn.tissue_segmentor.processing", "qualname": "f_preformat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.processing.f_postformat", "modulename": "cellbin2.dnn.tissue_segmentor.processing", "qualname": "f_postformat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.dnn.tissue_segmentor.utils", "modulename": "cellbin2.dnn.tissue_segmentor.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.utils.SupportModel", "modulename": "cellbin2.dnn.tissue_segmentor.utils", "qualname": "SupportModel", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.utils.SupportModel.ONNX_EXT", "modulename": "cellbin2.dnn.tissue_segmentor.utils", "qualname": "SupportModel.ONNX_EXT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.utils.SupportModel.SUPPORTED_MODELS", "modulename": "cellbin2.dnn.tissue_segmentor.utils", "qualname": "SupportModel.SUPPORTED_MODELS", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.utils.SupportModel.SUPPORTED_STAIN_TYPE_BY_MODEL", "modulename": "cellbin2.dnn.tissue_segmentor.utils", "qualname": "SupportModel.SUPPORTED_STAIN_TYPE_BY_MODEL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.utils.SupportModel.WEIGHT_NAME_EXT", "modulename": "cellbin2.dnn.tissue_segmentor.utils", "qualname": "SupportModel.WEIGHT_NAME_EXT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.dnn.tissue_segmentor.utils.SupportModel.TECH_WEIGHT_NAME", "modulename": "cellbin2.dnn.tissue_segmentor.utils", "qualname": "SupportModel.TECH_WEIGHT_NAME", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image", "modulename": "cellbin2.image", "kind": "module", "doc": "<p>\u56fe\u50cf\u8bfb\u53d6\u57fa\u7c7b</p>\n"}, {"fullname": "cellbin2.image.CBImage", "modulename": "cellbin2.image", "qualname": "CBImage", "kind": "class", "doc": "<p>channel image: \u5355\u901a\u9053\u56fe</p>\n"}, {"fullname": "cellbin2.image.CBImage.__init__", "modulename": "cellbin2.image", "qualname": "CBImage.__init__", "kind": "function", "doc": "<p>Init image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file:</strong> </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.image.CBImage.read", "modulename": "cellbin2.image", "qualname": "CBImage.read", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file:</strong> </li>\n<li><strong>key:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.CBImage.crop_image", "modulename": "cellbin2.image", "qualname": "CBImage.crop_image", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>border:</strong>  y0, y1, x0, x1</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">border</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.CBImage.resize_image", "modulename": "cellbin2.image", "qualname": "CBImage.resize_image", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>size:</strong>  int, float, List: [y, x], Tuple: [y, x]</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.CBImage.trans_image", "modulename": "cellbin2.image", "qualname": "CBImage.trans_image", "kind": "function", "doc": "<p>\u8c03\u7528pyvips\u8fdb\u884c\u56fe\u50cf\u64cd\u4f5c</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scale:</strong>  - list | tuple, [scale_x, scale_y]</li>\n<li><strong>rotate:</strong> </li>\n<li><strong>rot90:</strong> </li>\n<li><strong>offset:</strong>  [x, y]</li>\n<li><strong>dst_size:</strong>  (height, width)</li>\n<li><strong>flip_lr:</strong> </li>\n<li><strong>flip_ud:</strong> </li>\n<li><strong>trans_mat:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rotate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rot90</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dst_size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">flip_lr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flip_ud</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">trans_mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.CBImage.get_channel", "modulename": "cellbin2.image", "qualname": "CBImage.get_channel", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>channel:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.CBImage.write", "modulename": "cellbin2.image", "qualname": "CBImage.write", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path:</strong> </li>\n<li><strong>compression:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">compression</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.CBImage.write_s", "modulename": "cellbin2.image", "qualname": "CBImage.write_s", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.CBImage.to_gray", "modulename": "cellbin2.image", "qualname": "CBImage.to_gray", "kind": "function", "doc": "<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.CBImage.shape", "modulename": "cellbin2.image", "qualname": "CBImage.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.CBImage.channel", "modulename": "cellbin2.image", "qualname": "CBImage.channel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.CBImage.height", "modulename": "cellbin2.image", "qualname": "CBImage.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.CBImage.width", "modulename": "cellbin2.image", "qualname": "CBImage.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.CBImage.image", "modulename": "cellbin2.image", "qualname": "CBImage.image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.image.CBImage.file_path", "modulename": "cellbin2.image", "qualname": "CBImage.file_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.image.CBImage.ndim", "modulename": "cellbin2.image", "qualname": "CBImage.ndim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.CBImage.depth", "modulename": "cellbin2.image", "qualname": "CBImage.depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.CBImage.print_info", "modulename": "cellbin2.image", "qualname": "CBImage.print_info", "kind": "variable", "doc": "<p>Returns:</p>\n", "annotation": ": Dict"}, {"fullname": "cellbin2.image.cbimread", "modulename": "cellbin2.image", "qualname": "cbimread", "kind": "function", "doc": "<p>Read files as NumPy or CBImage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>files:</strong> </li>\n<li><strong>only_np:</strong> </li>\n<li><strong>**kwargs:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">only_np</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.cbimwrite", "modulename": "cellbin2.image", "qualname": "cbimwrite", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>output_path:</strong> </li>\n<li><strong>files:</strong> </li>\n<li><strong>compression:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">compression</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation", "modulename": "cellbin2.image.augmentation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.augmentation.find_thresh", "modulename": "cellbin2.image.augmentation", "qualname": "find_thresh", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>:  gray image</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>hmin, hmax</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_rgb2gray", "modulename": "cellbin2.image.augmentation", "qualname": "f_rgb2gray", "kind": "function", "doc": "<p>rgb2gray</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>:  (CHANGE) np.array</li>\n<li><strong>need_not</strong>:  if need bitwise_not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">need_not</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_gray2bgr", "modulename": "cellbin2.image.augmentation", "qualname": "f_gray2bgr", "kind": "function", "doc": "<p>gray2bgr</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>:  (CHANGE) np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_clahe_rgb", "modulename": "cellbin2.image.augmentation", "qualname": "f_clahe_rgb", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">128</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_rgb2hsv", "modulename": "cellbin2.image.augmentation", "qualname": "f_rgb2hsv", "kind": "function", "doc": "<p>rgb2hsv</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>:  (CHANGE) np.array</li>\n<li><strong>need_not</strong>:  if need bitwise_not</li>\n<li><strong>channel</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">channel</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">need_not</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_padding", "modulename": "cellbin2.image.augmentation", "qualname": "f_padding", "kind": "function", "doc": "<p>update by dengzhonghan on 2023/2/23</p>\n\n<ol>\n<li>support 3d array padding.</li>\n<li>not support 1d array padding.</li>\n</ol>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img ():</strong>  numpy ndarray (2D or 3D).</li>\n<li><strong>top ():</strong>  number of values padded to the top direction.</li>\n<li><strong>bot ():</strong>  number of values padded to the bottom direction.</li>\n<li><strong>left ():</strong>  number of values padded to the left direction.</li>\n<li><strong>right ():</strong>  number of values padded to the right direction.</li>\n<li><strong>mode ():</strong>  padding mode in numpy, default is constant.</li>\n<li><strong>value ():</strong>  constant value when using constant mode, default is 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pad_img: padded image.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">top</span>, </span><span class=\"param\"><span class=\"n\">bot</span>, </span><span class=\"param\"><span class=\"n\">left</span>, </span><span class=\"param\"><span class=\"n\">right</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;constant&#39;</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_resize", "modulename": "cellbin2.image.augmentation", "qualname": "f_resize", "kind": "function", "doc": "<p>resize img with pillow</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>:  (CHANGE) np.array</li>\n<li><strong>shape</strong>:  tuple</li>\n<li><strong>mode</strong>:  An optional resampling filter. This can be one of Resampling.NEAREST,\nResampling.BOX, Resampling.BILINEAR, Resampling.HAMMING, Resampling.BICUBIC or Resampling.LANCZOS.\nIf the image has mode \u201c1\u201d or \u201cP\u201d, it is always set to Resampling.NEAREST.\nIf the image mode specifies a number of bits, such as \u201cI;16\u201d, then the default filter is Resampling.NEAREST.\nOtherwise, the default filter is Resampling.BICUBIC</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">2048</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;NEAREST&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_percentile_threshold", "modulename": "cellbin2.image.augmentation", "qualname": "f_percentile_threshold", "kind": "function", "doc": "<p>Threshold an image to reduce bright spots</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>:  (CHANGE) numpy array of image data</li>\n<li><strong>percentile</strong>:  cutoff used to threshold image</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array: thresholded version of input image</p>\n</blockquote>\n\n<p>2023/09/20 @fxzhao \u589e\u52a0overwrite_input\u53c2\u6570,\u53ef\u7701\u53bbpercentile\u7684\u4e34\u65f6\u5185\u5b58\u5f00\u9500</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">percentile</span><span class=\"o\">=</span><span class=\"mf\">99.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_equalize_adapthist", "modulename": "cellbin2.image.augmentation", "qualname": "f_equalize_adapthist", "kind": "function", "doc": "<p>Pre-process images using Contrast Limited Adaptive\nHistogram Equalization (CLAHE).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img: (CHANGE) (numpy.array)</strong>:  numpy array of phase image data.</li>\n<li><strong>kernel_size: (integer)</strong>:  Size of kernel for CLAHE,\ndefaults to 1/8 of image size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>numpy.array:Pre-processed image</p>\n</blockquote>\n\n<p>2023/09/20 @fxzhao \u4f7f\u7528cv\u65b9\u6cd5\u66ff\u6362skimage\u65b9\u6cd5,\u63d0\u9ad8\u8ba1\u7b97\u901f\u5ea6\u5e76\u964d\u4f4e\u5185\u5b58\u5360\u7528</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_equalize_adapthist_V2", "modulename": "cellbin2.image.augmentation", "qualname": "f_equalize_adapthist_V2", "kind": "function", "doc": "<p>Pre-process images using Contrast Limited Adaptive\nHistogram Equalization (CLAHE).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img: (CHANGE) (numpy.array)</strong>:  numpy array of phase image data.</li>\n<li><strong>kernel_size: (integer)</strong>:  Size of kernel for CLAHE,\ndefaults to 1/8 of image size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>numpy.array:Pre-processed image</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.rescale_intensity_v2", "modulename": "cellbin2.image.augmentation", "qualname": "rescale_intensity_v2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">out_range</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_histogram_normalization", "modulename": "cellbin2.image.augmentation", "qualname": "f_histogram_normalization", "kind": "function", "doc": "<p>If one of the inputs is a constant-value array, it will\nbe normalized as an array of all zeros of the same shape.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img: (CHANGE) (numpy.array)</strong>:  numpy array of phase image data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>numpy.array:image data with dtype float32.</p>\n</blockquote>\n\n<p>2023/09/20 @fxzhao \u4f7f\u7528numba\u52a0\u901frescale_intensity\u65b9\u6cd5</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_ij_16_to_8", "modulename": "cellbin2.image.augmentation", "qualname": "f_ij_16_to_8", "kind": "function", "doc": "<p>16 bits img to 8 bits</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>:  (CHANGE) np.array</li>\n<li><strong>chunk_size</strong>:  chunk size (bit)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.sliding_window_sum", "modulename": "cellbin2.image.augmentation", "qualname": "sliding_window_sum", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_w</span>, </span><span class=\"param\"><span class=\"n\">new_h</span>, </span><span class=\"param\"><span class=\"n\">down_size</span>, </span><span class=\"param\"><span class=\"n\">vision_img</span>, </span><span class=\"param\"><span class=\"n\">sum_image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.enhance_vision_image", "modulename": "cellbin2.image.augmentation", "qualname": "enhance_vision_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vision_img</span>, </span><span class=\"param\"><span class=\"n\">down_size</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_ij_16_to_8_v2", "modulename": "cellbin2.image.augmentation", "qualname": "f_ij_16_to_8_v2", "kind": "function", "doc": "<p>2023/09/20 @fxzhao f_ij_16_to_8\u7684\u5347\u7ea7\u7248\u672c,\u4f7f\u7528numba\u52a0\u901f\n2023/10/16 @fxzhao \u652f\u6301\u4e09\u901a\u9053\u56fe\u7247\u8f93\u5165</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.enhance", "modulename": "cellbin2.image.augmentation", "qualname": "enhance", "kind": "function", "doc": "<p>Only support 2D array</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arr ():</strong>  2D numpy array</li>\n<li><strong>mode ():</strong>  enhance mode</li>\n<li><strong>thresh ():</strong>  threshold</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">mode</span>, </span><span class=\"param\"><span class=\"n\">thresh</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.encode", "modulename": "cellbin2.image.augmentation", "qualname": "encode", "kind": "function", "doc": "<p>Encode image with min and max pixel value</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arr ():</strong>  2D numpy array</li>\n<li><strong>min_v ():</strong>  min value obtained from enhance method</li>\n<li><strong>max_v ():</strong>  max value</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mat: encoded mat</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">min_v</span>, </span><span class=\"param\"><span class=\"n\">max_v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_ij_auto_contrast_v2", "modulename": "cellbin2.image.augmentation", "qualname": "f_ij_auto_contrast_v2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_ij_auto_contrast_v3", "modulename": "cellbin2.image.augmentation", "qualname": "f_ij_auto_contrast_v3", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.f_ij_auto_contrast", "modulename": "cellbin2.image.augmentation", "qualname": "f_ij_auto_contrast", "kind": "function", "doc": "<p>auto contrast from imagej</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img(ndarray):</strong>  img array</li>\n</ul>\n\n<p>Returns(ndarray):img array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.dapi_enhance", "modulename": "cellbin2.image.augmentation", "qualname": "dapi_enhance", "kind": "function", "doc": "<p>if you implement a new enhance method, the returned arr must be in bgr format</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>img_obj ():</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bgr_arr: numpy array in bgr format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.he_enhance", "modulename": "cellbin2.image.augmentation", "qualname": "he_enhance", "kind": "function", "doc": "<p>add by @limin on 2023/05/15</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.augmentation.line_enhance_method", "modulename": "cellbin2.image.augmentation", "qualname": "line_enhance_method", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;TechType.HE: 3&gt;: &lt;function he_enhance&gt;}"}, {"fullname": "cellbin2.image.mask", "modulename": "cellbin2.image.mask", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.mask.f_fill_all_hole", "modulename": "cellbin2.image.mask", "qualname": "f_fill_all_hole", "kind": "function", "doc": "<p>fill all holes in the mask</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mask_in</strong>:  np.array np.uint8</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array np.uint8</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.mask.f_instance2semantics", "modulename": "cellbin2.image.mask", "qualname": "f_instance2semantics", "kind": "function", "doc": "<p>instance to semantics</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ins(ndarray):</strong> labeled instance</li>\n</ul>\n\n<p>Returns(ndarray):mask</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ins</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.mask.iou", "modulename": "cellbin2.image.mask", "qualname": "iou", "kind": "function", "doc": "<p>add by jqc on 2023/04/10</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a ():</strong> </li>\n<li><strong>b ():</strong> </li>\n<li><strong>epsilon ():</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.morphology", "modulename": "cellbin2.image.morphology", "kind": "module", "doc": "<p>Functions for pre- and post-processing image data</p>\n"}, {"fullname": "cellbin2.image.morphology.f_deep_watershed", "modulename": "cellbin2.image.morphology", "qualname": "f_deep_watershed", "kind": "function", "doc": "<p>Uses <code>maximas</code> and <code>interiors</code> to perform watershed segmentation.\n<code>maximas</code> are used as the watershed seeds for each object and\n<code>interiors</code> are used as the watershed mask.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>outputs:(list)</strong>:  List of [maximas, interiors] model outputs.\nUse <code>maxima_index</code> and <code>interior_index</code> if list is longer than 2,\nor if the outputs are in a different order.</li>\n<li><strong>radius: (int)</strong>:  Radius of disk used to search for maxima</li>\n<li><strong>maxima_threshold:(float)</strong>:  Threshold for the maxima prediction.</li>\n<li><strong>interior_threshold:(float)</strong>:  Threshold for the interior prediction.</li>\n<li><strong>maxima_smooth:(int)</strong>:  smoothing factor to apply to <code>interiors</code>.\nUse <code>0</code> for no smoothing.</li>\n<li><strong>interior_smooth:(int)</strong>:  smoothing factor to apply to <code>interiors</code>.\nUse <code>0</code> for no smoothing.</li>\n<li><strong>maxima_index:(int)</strong>:  The index of the maxima prediction in <code>outputs</code>.</li>\n<li><strong>interior_index:(int)</strong>:  The index of the interior prediction in <code>outputs</code>.</li>\n<li><strong>label_erosion:(int)</strong>:  Number of pixels to erode segmentation labels.</li>\n<li><strong>small_objects_threshold:(int)</strong>:  Removes objects smaller than this size.</li>\n<li><strong>fill_holes_threshold:(int)</strong>:  Maximum size for holes within segmented\nobjects to be filled.</li>\n<li><strong>pixel_expansion:(int)</strong>:  Number of pixels to expand <code>interiors</code>.</li>\n<li><strong>watershed_line:(int)</strong>:  If need watershed line.</li>\n<li><strong>maxima_algorithm:(str)</strong>:  Algorithm used to locate peaks in <code>maximas</code>.\nOne of <code>h_maxima</code> (default) or <code>peak_local_max</code>.\n<code>peak_local_max</code> is much faster but seems to underperform when\ngiven regious of ambiguous maxima.</li>\n<li><strong>kwargs</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>numpy.array: Integer label mask for instance segmentation.</p>\n</blockquote>\n\n<p>Raises:\nValueError: <code>outputs</code> is not properly formatted.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outputs</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">maxima_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">interior_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">maxima_smooth</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">interior_smooth</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">maxima_index</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">interior_index</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">label_erosion</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">small_objects_threshold</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">fill_holes_threshold</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">pixel_expansion</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">watershed_line</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">maxima_algorithm</span><span class=\"o\">=</span><span class=\"s1\">&#39;h_maxima&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.morphology.f_erode_edges", "modulename": "cellbin2.image.morphology", "qualname": "f_erode_edges", "kind": "function", "doc": "<p>Erode edge of objects to prevent them from touching</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mask: (numpy.array)</strong>:  uniquely labeled instance mask</li>\n<li><strong>erosion_width: erosion_width (int)</strong>:  integer value for pixel width to erode edges</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>numpy.array: mask where each instance has had the edges eroded</p>\n</blockquote>\n\n<p>Raises:\nValueError: mask.ndim is not 2 or 3</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">erosion_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.morphology.f_fill_holes", "modulename": "cellbin2.image.morphology", "qualname": "f_fill_holes", "kind": "function", "doc": "<p>Fills holes located completely within a given label with pixels of the same value</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label_img: (numpy.array)</strong>:  a 2D labeled image</li>\n<li><strong>size: (int)</strong>:  maximum size for a hole to be filled in</li>\n<li><strong>connectivity: (int)</strong>:  the connectivity used to define the hole</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>numpy.array: a labeled image with no holes smaller than <code>size</code>\n          contained within any label.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label_img</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">connectivity</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.morphology.f_watershed", "modulename": "cellbin2.image.morphology", "qualname": "f_watershed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold", "modulename": "cellbin2.image.threshold", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.threshold.f_th_otsu", "modulename": "cellbin2.image.threshold", "qualname": "f_th_otsu", "kind": "function", "doc": "<p>otsu</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_mean", "modulename": "cellbin2.image.threshold", "qualname": "f_th_mean", "kind": "function", "doc": "<p>mean</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_li", "modulename": "cellbin2.image.threshold", "qualname": "f_th_li", "kind": "function", "doc": "<p>li</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_triangle", "modulename": "cellbin2.image.threshold", "qualname": "f_th_triangle", "kind": "function", "doc": "<p>triangle</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_isodata", "modulename": "cellbin2.image.threshold", "qualname": "f_th_isodata", "kind": "function", "doc": "<p>isodata</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_minimum", "modulename": "cellbin2.image.threshold", "qualname": "f_th_minimum", "kind": "function", "doc": "<p>minimum</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_yen", "modulename": "cellbin2.image.threshold", "qualname": "f_th_yen", "kind": "function", "doc": "<p>yen</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_sauvola", "modulename": "cellbin2.image.threshold", "qualname": "f_th_sauvola", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">win_size</span><span class=\"o\">=</span><span class=\"mi\">15</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>, </span><span class=\"param\"><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_shanbhag", "modulename": "cellbin2.image.threshold", "qualname": "f_th_shanbhag", "kind": "function", "doc": "<p>shanbhag\nmaybe have some bugs</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.threshold.f_th_max_entropy", "modulename": "cellbin2.image.threshold", "qualname": "f_th_max_entropy", "kind": "function", "doc": "<p>max_entrop\nmaybe have some bugs</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: np.array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform", "modulename": "cellbin2.image.transform", "kind": "module", "doc": "<p>\u56fe\u50cf\u53d8\u6362\u7c7b</p>\n"}, {"fullname": "cellbin2.image.transform.format_to_dtype", "modulename": "cellbin2.image.transform", "qualname": "format_to_dtype", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;uchar&#x27;: &lt;class &#x27;numpy.uint8&#x27;&gt;, &#x27;char&#x27;: &lt;class &#x27;numpy.int8&#x27;&gt;, &#x27;ushort&#x27;: &lt;class &#x27;numpy.uint16&#x27;&gt;, &#x27;short&#x27;: &lt;class &#x27;numpy.int16&#x27;&gt;, &#x27;uint&#x27;: &lt;class &#x27;numpy.uint32&#x27;&gt;, &#x27;int&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;, &#x27;float&#x27;: &lt;class &#x27;numpy.float32&#x27;&gt;, &#x27;double&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;, &#x27;complex&#x27;: &lt;class &#x27;numpy.complex64&#x27;&gt;, &#x27;dpcomplex&#x27;: &lt;class &#x27;numpy.complex128&#x27;&gt;}"}, {"fullname": "cellbin2.image.transform.dtype_to_format", "modulename": "cellbin2.image.transform", "qualname": "dtype_to_format", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;uint8&#x27;: &#x27;uchar&#x27;, &#x27;int8&#x27;: &#x27;char&#x27;, &#x27;uint16&#x27;: &#x27;ushort&#x27;, &#x27;int16&#x27;: &#x27;short&#x27;, &#x27;uint32&#x27;: &#x27;uint&#x27;, &#x27;int32&#x27;: &#x27;int&#x27;, &#x27;float32&#x27;: &#x27;float&#x27;, &#x27;float64&#x27;: &#x27;double&#x27;, &#x27;complex64&#x27;: &#x27;complex&#x27;, &#x27;complex128&#x27;: &#x27;dpcomplex&#x27;}"}, {"fullname": "cellbin2.image.transform.crop_around_center", "modulename": "cellbin2.image.transform", "qualname": "crop_around_center", "kind": "function", "doc": "<p>Given a NumPy / OpenCV 2 image, crops it to the given width and height,\naround it's centre point</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.rotatedRectWithMaxArea", "modulename": "cellbin2.image.transform", "qualname": "rotatedRectWithMaxArea", "kind": "function", "doc": "<p>Given a rectangle of size wxh that has been rotated by 'angle' (in\nradians), computes the width and height of the largest possible\naxis-aligned rectangle (maximal area) within the rotated rectangle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform", "kind": "class", "doc": "<p>Wrap a VipsImage object.</p>\n", "bases": "pyvips.vimage.Image"}, {"fullname": "cellbin2.image.transform.ImageTransform.__init__", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.__init__", "kind": "function", "doc": "<p>Wrap around a pointer.</p>\n\n<p>Wraps a GObject instance around an underlying pointer. When the\ninstance is garbage-collected, the underlying object is unreferenced.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "cellbin2.image.transform.ImageTransform.image", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.transform.ImageTransform.set_image", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.set_image", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image_path</strong>:  str | array</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.offset", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.offset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">y_offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">dst_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.scale", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.scale", "kind": "function", "doc": "<p>Scale an image to uchar.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>out = in.scale(exp=float, log=bool)</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>out (Image): Output image</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in (Image):</strong>  Input image</li>\n</ul>\n\n<h6 id=\"keyword-args\">Keyword args:</h6>\n\n<blockquote>\n  <p>exp (float): Exponent for log scale\n  log (bool): Log scale</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>.Error</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.resize", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.resize", "kind": "function", "doc": "<p>Resize an image.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>out = in.resize(scale, kernel=Union[str, Kernel], gap=float, vscale=float)</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>out (Image): Output image</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in (Image):</strong>  Input image argument</li>\n<li><strong>scale (float):</strong>  Scale image by this factor</li>\n</ul>\n\n<h6 id=\"keyword-args\">Keyword args:</h6>\n\n<blockquote>\n  <p>kernel (Union[str, Kernel]): Resampling kernel\n  gap (float): Reducing gap\n  vscale (float): Vertical scale image by this factor</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>.Error</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dst_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.rot90", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.rot90", "kind": "function", "doc": "<p>2023/09/21 @fxzhao \u589e\u52a0\u53c2\u6570ret_dst,\u9ed8\u8ba4\u4e3aTrue\u8fd4\u56de\u6570\u636e,\u5426\u5219\u8fd4\u56deNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rot90_type</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ret_dst</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.rot", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.rot", "kind": "function", "doc": "<p>Rotate an image.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>out = in.rot(angle)</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>out (Image): Output image</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in (Image):</strong>  Input image</li>\n<li><strong>angle (Union[str, Angle]):</strong>  Angle to rotate image</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>.Error</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.rot_scale", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.rot_scale", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.flip", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.flip", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>flip_type</strong>:  'ver' | 'hor'</li>\n</ul>\n\n<p>2023/09/21 @fxzhao \u589e\u52a0\u53c2\u6570ret_dst,\u9ed8\u8ba4\u4e3aTrue\u8fd4\u56de\u6570\u636e,\u5426\u5219\u8fd4\u56deNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flip_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ret_dst</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.rot_and_crop", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.rot_and_crop", "kind": "function", "doc": "<p>Given the angle, return the maximum rectangle within the rotated rectangle.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>angle ():</strong>  angle in degree</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>arr_cropped: cropped rotated image</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.numpy2vips", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.numpy2vips", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.vips2numpy", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.vips2numpy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.ImageTransform.to_image", "modulename": "cellbin2.image.transform", "qualname": "ImageTransform.to_image", "kind": "function", "doc": "<p>pyvips -> array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.transform.main", "modulename": "cellbin2.image.transform", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.wsi_split", "modulename": "cellbin2.image.wsi_split", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.__init__", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.__init__", "kind": "function", "doc": "<p>update by dengzhonghan on 2023/05/15, add func_name, default is empty\nupdate by cenweixuan on 2023/3/07\nhelp split the img and run the function piece by piece then combine the pieces into img</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong>: (ndarray)</li>\n<li><strong>win_shape</strong>: (tuple)pieces shape</li>\n<li><strong>overlap</strong>:  int or float</li>\n<li><strong>need_fun_ret</strong>:  fun's batch return</li>\n<li><strong>need_combine_ret</strong>:  if need combine ret</li>\n<li><strong>editable</strong>: True to overwrite the img with dst</li>\n<li><strong>batch_size</strong>: &gt;0 your fun must support to input a list</li>\n<li><strong>tar_dtype</strong>: output dtype</li>\n<li><strong>dst_shape</strong>: output shape</li>\n<li><strong>win_back</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span>,</span><span class=\"param\">\t<span class=\"n\">win_shape</span>,</span><span class=\"param\">\t<span class=\"n\">overlap</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">need_fun_ret</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">need_combine_ret</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">editable</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\ttar_dtype=&lt;class &#x27;numpy.uint8&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">func_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dst_shape</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">win_back</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.get_nums", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.get_nums", "kind": "function", "doc": "<p>get row and col nums\nReturns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.f_set_run_fun", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.f_set_run_fun", "kind": "function", "doc": "<p>set function you want to run</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fun(adress):</strong> function</li>\n<li><strong>*args(adress):</strong> args</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fun</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.f_set_pre_fun", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.f_set_pre_fun", "kind": "function", "doc": "<p>set function use in preprocessing</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fun(adress):</strong> function</li>\n<li><strong>*args(adress):</strong> args</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fun</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.f_set_fusion_fun", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.f_set_fusion_fun", "kind": "function", "doc": "<p>set function use in fusion</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fun(adress):</strong> function</li>\n<li><strong>*args(adress):</strong> args</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fun</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.f_split2run", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.f_split2run", "kind": "function", "doc": "<p>run the fun\nReturns:box list,fun return,dst img</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.y_nums", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.y_nums", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.x_nums", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.x_nums", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.image.wsi_split.SplitWSI.box_lst", "modulename": "cellbin2.image.wsi_split", "qualname": "SplitWSI.box_lst", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix", "modulename": "cellbin2.matrix", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.box_detect", "modulename": "cellbin2.matrix.box_detect", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector.__init__", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">binsize</span><span class=\"o\">=</span><span class=\"mi\">21</span>, </span><span class=\"param\"><span class=\"n\">down_size</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">morph_size</span><span class=\"o\">=</span><span class=\"mi\">9</span>, </span><span class=\"param\"><span class=\"n\">gene_base_size</span><span class=\"o\">=</span><span class=\"mi\">19992</span></span>)</span>"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector.gene_base_size", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector.gene_base_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector.binsize", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector.binsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector.down_size", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector.down_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector.morph_size", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector.morph_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector.image", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector.image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector.get_box4maximize_area", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector.get_box4maximize_area", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dst:</strong> </li>\n<li><strong>box_size:</strong> </li>\n<li><strong>min_size:</strong> </li>\n<li><strong>step:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dst</span>, </span><span class=\"param\"><span class=\"n\">box_size</span>, </span><span class=\"param\"><span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mi\">256</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.box_detect.MatrixBoxDetector.detect", "modulename": "cellbin2.matrix.box_detect", "qualname": "MatrixBoxDetector.detect", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix:</strong> </li>\n<li><strong>chip_size:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.box_detect.detect_chip_box", "modulename": "cellbin2.matrix.box_detect", "qualname": "detect_chip_box", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix:</strong> </li>\n<li><strong>chip_size:</strong>  \"A1C3\" == 3 * 2</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipBoxInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.box_detect.main", "modulename": "cellbin2.matrix.box_detect", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.index_points_detect", "modulename": "cellbin2.matrix.index_points_detect", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector.__init__", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector.template", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector.template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector.image", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector.image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector.get_mass", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector.get_mass", "kind": "function", "doc": "<p>2023/09/20 @fxzhao \u79fb\u9664\u7c7b\u578b\u8f6c\u6362,\u4e0d\u5f71\u54cd\u7ed3\u679c</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector.find_cross_ind", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector.find_cross_ind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">position</span>, </span><span class=\"param\"><span class=\"n\">summation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector.find_first_tp", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector.find_first_tp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_center</span>, </span><span class=\"param\"><span class=\"n\">find_range</span><span class=\"o\">=</span><span class=\"mi\">3000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector.one_to_all", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector.one_to_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">template</span>, </span><span class=\"param\"><span class=\"n\">mid_pos</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.index_points_detect.IndexPointsDetector.find_cross", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "IndexPointsDetector.find_cross", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gene_exp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.index_points_detect.detect_cross_points", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "detect_cross_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inference</span><span class=\"o\">.</span><span class=\"n\">TemplateInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.index_points_detect.main", "modulename": "cellbin2.matrix.index_points_detect", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix", "modulename": "cellbin2.matrix.matrix", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.matrix.parse_gef_line", "modulename": "cellbin2.matrix.matrix", "qualname": "parse_gef_line", "kind": "function", "doc": "<p>Speedup parse lines with numba</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.GeneticStandards", "modulename": "cellbin2.matrix.matrix", "qualname": "GeneticStandards", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.matrix.matrix.GeneticStandards.bin20_thr", "modulename": "cellbin2.matrix.matrix", "qualname": "GeneticStandards.bin20_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.matrix.matrix.GeneticStandards.bin50_thr", "modulename": "cellbin2.matrix.matrix", "qualname": "GeneticStandards.bin50_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.matrix.matrix.GeneticStandards.bin200_thr", "modulename": "cellbin2.matrix.matrix", "qualname": "GeneticStandards.bin200_thr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.matrix.matrix.GeneticStandards.model_config", "modulename": "cellbin2.matrix.matrix", "qualname": "GeneticStandards.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.matrix.matrix.cMatrix", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix", "kind": "class", "doc": "<p>\u5355\u4e2a\u77e9\u9635\u7ba1\u7406</p>\n"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.x_start", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.x_start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.y_start", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.y_start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.h_x_start", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.h_x_start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.h_y_start", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.h_y_start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.file_path", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.file_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.read", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.read", "kind": "function", "doc": "<p>this function copy from,\n    <a href=\"https://dcscode.genomics.cn/stomics/saw/register/-/blob/main/register/utils/matrixloader.py?ref_type=heads\">https://dcscode.genomics.cn/stomics/saw/register/-/blob/main/register/utils/matrixloader.py?ref_type=heads</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_path</strong>:  matrix file path</li>\n<li><strong>chunk_size</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">10485760</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.gef_gef_shape", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.gef_gef_shape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.detect_feature", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.detect_feature", "kind": "function", "doc": "<p>track lines \u68c0\u6d4b\uff0c\u77e9\u9635\u6570\u636e\uff1a\u82af\u7247\u533a\u57df\u8bc6\u522b\uff0c\u7528\u4e8e\u914d\u51c6</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">chip_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.check_standards", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.check_standards", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gs</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">GeneticStandards</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.template", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.chip_box", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.chip_box", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.matrix.matrix.cMatrix.heatmap", "modulename": "cellbin2.matrix.matrix", "qualname": "cMatrix.heatmap", "kind": "variable", "doc": "<p>\u7070\u5ea6\u70ed\u56fe\uff1a \u7528\u4e8e\u914d\u51c6</p>\n"}, {"fullname": "cellbin2.matrix.matrix.adjust_mask_shape", "modulename": "cellbin2.matrix.matrix", "qualname": "adjust_mask_shape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gef_path</span>, </span><span class=\"param\"><span class=\"n\">mask_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.gem_to_gef", "modulename": "cellbin2.matrix.matrix", "qualname": "gem_to_gef", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gem_path</span>, </span><span class=\"param\"><span class=\"n\">gef_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.save_cell_bin_data", "modulename": "cellbin2.matrix.matrix", "qualname": "save_cell_bin_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dst_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">cell_mask</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.generate_vis_gef", "modulename": "cellbin2.matrix.matrix", "qualname": "generate_vis_gef", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dst_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.save_tissue_bin_data", "modulename": "cellbin2.matrix.matrix", "qualname": "save_tissue_bin_data", "kind": "function", "doc": "<p>\u83b7\u53d6\uff1a\u7ec4\u7ec7\u533a\u57df\u5185BinN\u6570\u636e</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dst_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tissue_mask</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">bin_siz</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.get_tissue_bin_data", "modulename": "cellbin2.matrix.matrix", "qualname": "get_tissue_bin_data", "kind": "function", "doc": "<p>\u83b7\u53d6\uff1a\u7ec4\u7ec7\u533a\u57df\u5185BinN\u6570\u636e</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tissue_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">bin_siz</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.get_bin_n_data", "modulename": "cellbin2.matrix.matrix", "qualname": "get_bin_n_data", "kind": "function", "doc": "<p>\u83b7\u53d6\uff1a\u82af\u7247\u5168\u90e8\u533a\u57df\u5185BinN\u6570\u636e</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">bin_siz</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.main", "modulename": "cellbin2.matrix.matrix", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.matrix.matrix.create_martix_image", "modulename": "cellbin2.matrix.matrix", "qualname": "create_martix_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules", "modulename": "cellbin2.modules", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.analyze", "modulename": "cellbin2.modules.analyze", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.analyze.Analyze", "modulename": "cellbin2.modules.analyze", "qualname": "Analyze", "kind": "class", "doc": "<p>\u805a\u7c7b\uff0c\u6ce8\u91ca\u90e8\u5206</p>\n"}, {"fullname": "cellbin2.modules.analyze.Analyze.__init__", "modulename": "cellbin2.modules.analyze", "qualname": "Analyze.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "cellbin2.modules.analyze.Analyze.data", "modulename": "cellbin2.modules.analyze", "qualname": "Analyze.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.analyze.Analyze.cluster", "modulename": "cellbin2.modules.analyze", "qualname": "Analyze.cluster", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.analyze.Analyze.annotate", "modulename": "cellbin2.modules.analyze", "qualname": "Analyze.annotate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.analyze.main", "modulename": "cellbin2.modules.analyze", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract", "modulename": "cellbin2.modules.extract", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.extract.cell_seg", "modulename": "cellbin2.modules.extract.cell_seg", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.extract.cell_seg.run_cell_seg", "modulename": "cellbin2.modules.extract.cell_seg", "qualname": "run_cell_seg", "kind": "function", "doc": "<p>Run cell segmentation based on the type of technology used in the image file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file containing the cell data.</li>\n<li><strong>image_path (Path):</strong>  The path to the input image file.</li>\n<li><strong>save_path (Path):</strong>  The path to save the segmented cell mask.</li>\n<li><strong>config (Config):</strong>  The configuration settings for cell segmentation.</li>\n<li><strong>channel_image (Optional[Union[ipr.ImageChannel, ipr.IFChannel]]):</strong>  The channel image data, if available.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The segmented cell mask.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">channel_image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.matrix_extract", "modulename": "cellbin2.modules.extract.matrix_extract", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.extract.matrix_extract.extract4stitched", "modulename": "cellbin2.modules.extract.matrix_extract", "qualname": "extract4stitched", "kind": "function", "doc": "<p>Extracts matrix data for a stitched image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file to process.</li>\n<li><strong>param_chip (StereoChip):</strong>  Parameters for the stereo chip.</li>\n<li><strong>m_naming (naming.DumpMatrixFileNaming):</strong>  Naming convention for matrix files.</li>\n<li><strong>config (Config):</strong>  Configuration settings.</li>\n<li><strong>detect_feature (bool):</strong>  Whether to detect features. Default is True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">m_naming</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">naming</span><span class=\"o\">.</span><span class=\"n\">DumpMatrixFileNaming</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">detect_feature</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.matrix_extract.extract4matrix", "modulename": "cellbin2.modules.extract.matrix_extract", "qualname": "extract4matrix", "kind": "function", "doc": "<p>Extracts matrix data for stitched images based on cell and tissue masks.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>p_naming (naming.DumpPipelineFileNaming):</strong>  Naming convention for pipeline files.</li>\n<li><strong>image_file (ProcFile):</strong>  Processed image file.</li>\n<li><strong>m_naming (naming.DumpMatrixFileNaming):</strong>  Naming convention for matrix files.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">p_naming</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">naming</span><span class=\"o\">.</span><span class=\"n\">DumpPipelineFileNaming</span>,</span><span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">m_naming</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">naming</span><span class=\"o\">.</span><span class=\"n\">DumpMatrixFileNaming</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.matrix_extract.main", "modulename": "cellbin2.modules.extract.matrix_extract", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.qc", "modulename": "cellbin2.modules.extract.qc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.extract.qc.scale_estimate", "modulename": "cellbin2.modules.extract.qc", "qualname": "scale_estimate", "kind": "function", "doc": "<p>Estimate the average scaling factor between the image and the chip dimensions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file object.</li>\n<li><strong>param_chip (StereoChip):</strong>  The chip parameter object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The average scaling factor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_file</span>, </span><span class=\"param\"><span class=\"n\">param_chip</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.qc.estimate_fov_size", "modulename": "cellbin2.modules.extract.qc", "qualname": "estimate_fov_size", "kind": "function", "doc": "<p>Estimate the Field of View (FOV) size based on the provided image and chip parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file object.</li>\n<li><strong>param_chip (StereoChip):</strong>  The chip parameters object.</li>\n<li><strong>fov_wh (tuple):</strong>  The original FOV width and height.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing the estimated FOV width and height, and the scale factor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">fov_wh</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.qc.detect_chip", "modulename": "cellbin2.modules.extract.qc", "qualname": "detect_chip", "kind": "function", "doc": "<p>Detects a chip in the given image file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file to be processed.</li>\n<li><strong>param_chip (StereoChip):</strong>  Parameters defining the stereo chip.</li>\n<li><strong>config (Config):</strong>  Configuration settings for the detection process.</li>\n<li><strong>debug (bool):</strong>  Flag to enable or disable debugging.</li>\n<li><strong>output_path (str):</strong>  Path where debug images will be saved if debugging is enabled.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ChipBoxInfo: Information about the detected chip.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipBoxInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.qc.run_clarity", "modulename": "cellbin2.modules.extract.qc", "qualname": "run_clarity", "kind": "function", "doc": "<p>Run clarity detection on the provided image file using the specified configuration.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file to be analyzed.</li>\n<li><strong>config (Config):</strong>  The configuration settings for the clarity detection.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ClarityOutput: The output of the clarity detection process.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.qc.inference_template", "modulename": "cellbin2.modules.extract.qc", "qualname": "inference_template", "kind": "function", "doc": "<p>Perform template inference on the given image file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cut_siz (Tuple[int, int]):</strong>  The size of the cut image.</li>\n<li><strong>est_scale (float):</strong>  The estimated scale of the image.</li>\n<li><strong>image_file (ProcFile):</strong>  The image file to be processed.</li>\n<li><strong>param_chip (StereoChip):</strong>  Parameters for the stereo chip.</li>\n<li><strong>config (Config):</strong>  Configuration settings for the inference.</li>\n<li><strong>overlap (float, optional):</strong>  The overlap value for the inference. Defaults to 0.0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[TrackPointsInfo, inference.TemplateInfo]: The resulting track points and template information.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cut_siz</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">est_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">overlap</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">TrackPointsInfo</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inference</span><span class=\"o\">.</span><span class=\"n\">TemplateInfo</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.qc.pre_registration", "modulename": "cellbin2.modules.extract.qc", "qualname": "pre_registration", "kind": "function", "doc": "<p>Prepare and perform the registration of an image based on provided parameters and configurations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file to be registered.</li>\n<li><strong>param_chip (StereoChip):</strong>  Parameters for the stereo chip.</li>\n<li><strong>channel_image (Union[ipr.ImageChannel, ipr.IFChannel]):</strong>  The channel image containing box and template information.</li>\n<li><strong>config (Config):</strong>  Configuration settings for registration.</li>\n<li><strong>output_path (str):</strong>  Path where the output should be saved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>re_out: The result of the alignment process.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">channel_image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.qc.run_qc", "modulename": "cellbin2.modules.extract.qc", "qualname": "run_qc", "kind": "function", "doc": "<p>Perform quality control (QC) on the provided image file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file to be analyzed.</li>\n<li><strong>param_chip (StereoChip):</strong>  Parameters for the stereo chip.</li>\n<li><strong>config (Config):</strong>  Configuration settings for QC.</li>\n<li><strong>output_path (str):</strong>  Path where output files will be saved.</li>\n<li><strong>debug (bool):</strong>  Flag to enable debug mode.</li>\n<li><strong>fov_wh (tuple):</strong>  Field of view width and height.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Union[ipr.ImageChannel, ipr.IFChannel]: An ImageChannel or IFChannel object with updated QC information.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">fov_wh</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.register", "modulename": "cellbin2.modules.extract.register", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.extract.register.RegistrationParam", "modulename": "cellbin2.modules.extract.register", "qualname": "RegistrationParam", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.extract.register.RegistrationParam.HE_channel", "modulename": "cellbin2.modules.extract.register", "qualname": "RegistrationParam.HE_channel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.modules.extract.register.RegistrationParam.rot90", "modulename": "cellbin2.modules.extract.register", "qualname": "RegistrationParam.rot90", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.extract.register.RegistrationParam.flip", "modulename": "cellbin2.modules.extract.register", "qualname": "RegistrationParam.flip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.extract.register.RegistrationParam.model_config", "modulename": "cellbin2.modules.extract.register", "qualname": "RegistrationParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.extract.register.transform_to_register", "modulename": "cellbin2.modules.extract.register", "qualname": "transform_to_register", "kind": "function", "doc": "<p>Transforms and registers images based on provided parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cur_f_name (naming.DumpImageFileNaming):</strong>  The current file naming object.</li>\n<li><strong>info (Optional[RegistrationOutput], optional):</strong>  The registration output information. Defaults to None.</li>\n<li><strong>cur_c_image (Optional[Union[IFChannel, ImageChannel]], optional):</strong>  The current channel image. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cur_f_name</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">naming</span><span class=\"o\">.</span><span class=\"n\">DumpImageFileNaming</span>,</span><span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">RegistrationOutput</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cur_c_image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.register.run_register", "modulename": "cellbin2.modules.extract.register", "qualname": "run_register", "kind": "function", "doc": "<p>This module integrates the overall logic for image registration and returns registration parameters for downstream use.</p>\n\n<p>There are several scenarios:</p>\n\n<ol>\n<li>IF image: Returns the registration parameters of the reused image.</li>\n<li>Image + Matrix: Performs pre-registration, centroid method, and chip box registration.</li>\n<li>Image + Image: Not supported yet.</li>\n</ol>\n\n<p>Returns (RegisterOutput): Registration parameters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">cur_f_name</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">naming</span><span class=\"o\">.</span><span class=\"n\">DumpImageFileNaming</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">channel_images</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.tissue_seg", "modulename": "cellbin2.modules.extract.tissue_seg", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.extract.tissue_seg.run_tissue_seg", "modulename": "cellbin2.modules.extract.tissue_seg", "qualname": "run_tissue_seg", "kind": "function", "doc": "<p>Run tissue segmentation on the given image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file object.</li>\n<li><strong>image_path (Path):</strong>  The path to the input image.</li>\n<li><strong>save_path (Path):</strong>  The path to save the resulting tissue mask.</li>\n<li><strong>config (Config):</strong>  Configuration object containing tissue segmentation settings.</li>\n<li><strong>chip_info (StereoChip):</strong>  Information about the stereo chip used.</li>\n<li><strong>channel_image (Optional[Union[ipr.ImageChannel, ipr.IFChannel]]):</strong>  Optional channel image object to update with tissue segmentation data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: The resulting tissue mask.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">chip_info</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">channel_image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.transform", "modulename": "cellbin2.modules.extract.transform", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.extract.transform.read_transform", "modulename": "cellbin2.modules.extract.transform", "qualname": "read_transform", "kind": "function", "doc": "<p>Reads and applies transformations to an image based on various parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_file (ProcFile):</strong>  The image file object.</li>\n<li><strong>param_chip (StereoChip):</strong>  The stereo chip parameters.</li>\n<li><strong>channel_images (Dict[str, Union[IFChannel, ImageChannel]]):</strong>  Dictionary of channel images.</li>\n<li><strong>files (Dict[int, ProcFile]):</strong>  Dictionary of files.</li>\n<li><strong>research_mode (bool):</strong>  Flag indicating if research mode is enabled.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple: A tuple containing scale factors (s), rotation angle (r), and offset.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">channel_images</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">research_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.extract.transform.run_transform", "modulename": "cellbin2.modules.extract.transform", "qualname": "run_transform", "kind": "function", "doc": "<p>Apply transformations to an image based on parameters such as scale, rotation, and offset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file:</strong>  The processing file containing the image to be transformed.</li>\n<li><strong>channel_images (dict):</strong>  Dictionary mapping channel names to image channel objects.</li>\n<li><strong>param_chip:</strong>  Parameters for the stereo chip.</li>\n<li><strong>files (dict):</strong>  Dictionary mapping file IDs to processing files.</li>\n<li><strong>cur_f_name:</strong>  Naming convention object for file output.</li>\n<li><strong>if_track (bool):</strong>  Boolean flag indicating if tracking is enabled.</li>\n<li><strong>research_mode (bool):</strong>  Boolean flag indicating if research mode is enabled.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span>,</span><span class=\"param\">\t<span class=\"n\">channel_images</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">param_chip</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">stereo_chip</span><span class=\"o\">.</span><span class=\"n\">StereoChip</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cur_f_name</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">naming</span><span class=\"o\">.</span><span class=\"n\">DumpImageFileNaming</span>,</span><span class=\"param\">\t<span class=\"n\">if_track</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">research_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.image_qc", "modulename": "cellbin2.modules.image_qc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.image_qc.ImageQC", "modulename": "cellbin2.modules.image_qc", "qualname": "ImageQC", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.image_qc.ImageQC.__init__", "modulename": "cellbin2.modules.image_qc", "qualname": "ImageQC.__init__", "kind": "function", "doc": "<p>Initialize the ImageQC class.</p>\n\n<p>This class is in charge of image quality control operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config_file (str):</strong>  The path to the configuration file.</li>\n<li><strong>chip_mask_file (str):</strong>  The path to the chip mask file.</li>\n<li><strong>weights_root (str):</strong>  The path to the weights folder.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">chip_mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">weights_root</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "cellbin2.modules.image_qc.ImageQC.weights_root", "modulename": "cellbin2.modules.image_qc", "qualname": "ImageQC.weights_root", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.image_qc.ImageQC.param_chip", "modulename": "cellbin2.modules.image_qc", "qualname": "ImageQC.param_chip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.image_qc.ImageQC.config", "modulename": "cellbin2.modules.image_qc", "qualname": "ImageQC.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.image_qc.ImageQC.p_naming", "modulename": "cellbin2.modules.image_qc", "qualname": "ImageQC.p_naming", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.modules.naming.DumpPipelineFileNaming"}, {"fullname": "cellbin2.modules.image_qc.ImageQC.run", "modulename": "cellbin2.modules.image_qc", "qualname": "ImageQC.run", "kind": "function", "doc": "<p>Executes the Image Quality Control (ImageQC) process.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chip_no (str):</strong>  The chip number used to load chip information.</li>\n<li><strong>input_image (str):</strong>  The path to the input image.</li>\n<li><strong>stain_type (str):</strong>  The staining type used for image processing.</li>\n<li><strong>param_file (str):</strong>  The path to the parameter file containing configuration details for image processing.</li>\n<li><strong>output_path (str):</strong>  The path where output files will be saved.</li>\n<li><strong>debug (bool):</strong>  Whether to enable debug mode, which outputs additional debug information.</li>\n<li><strong>research_mode (bool):</strong>  Whether to enable research mode, which compresses the result files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: A status code. 0 indicates success, and 1 indicates failure.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">chip_no</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">input_image</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">param_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">research_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.image_qc.image_quality_control", "modulename": "cellbin2.modules.image_qc", "qualname": "image_quality_control", "kind": "function", "doc": "<p>Perform image quality control tasks.</p>\n\n<p>This function initializes an ImageQC object and runs the quality control process.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>weights_root (str):</strong>  Local directory path where the CNN weight files are stored.</li>\n<li><strong>chip_no (str):</strong>  Serial number of the sample chip.</li>\n<li><strong>input_image (str):</strong>  Local path to the stained image.</li>\n<li><strong>stain_type (str):</strong>  Stain type corresponding to the input image.</li>\n<li><strong>param_file (str):</strong>  Local path to the input parameter file.</li>\n<li><strong>output_path (str):</strong>  Local directory path where the output files will be stored.</li>\n<li><strong>debug (bool, optional):</strong>  Boolean flag to enable debug mode. Defaults to False.</li>\n<li><strong>research_mode (bool, optional):</strong>  Boolean flag to enable research mode. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: Status code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">weights_root</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chip_no</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">input_image</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">param_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">research_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.image_qc.main", "modulename": "cellbin2.modules.image_qc", "qualname": "main", "kind": "function", "doc": "<p>Main function to execute image quality control.</p>\n\n<p>This function parses the command - line arguments and parameters,\nand then invokes the <code>image_quality_control</code> function to carry out\nthe quality control process on the input image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>args (argparse.Namespace):</strong>  Parsed command - line arguments that contain input parameters.</li>\n<li><strong>para (dict):</strong>  Additional parameters for the quality control process.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">para</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.matrix_qc", "modulename": "cellbin2.modules.matrix_qc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.matrix_qc.MatrixQC", "modulename": "cellbin2.modules.matrix_qc", "qualname": "MatrixQC", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.matrix_qc.main", "modulename": "cellbin2.modules.matrix_qc", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata", "modulename": "cellbin2.modules.metadata", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.metadata.map_kit2type", "modulename": "cellbin2.modules.metadata", "qualname": "map_kit2type", "kind": "function", "doc": "<p>Maps the kit name to its corresponding type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kit_name (str):</strong>  The name of the kit.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The type of the kit, which can be 'Transcriptomics', 'Protein', or 'UNKNOWN'.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kit_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.ProcRegistration", "modulename": "cellbin2.modules.metadata", "qualname": "ProcRegistration", "kind": "class", "doc": "<p>A class to represent a process registration.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>fixed_image (int):</strong>  The fixed image identifier.</li>\n<li><strong>trackline (bool):</strong>  A flag indicating whether to track the line.</li>\n<li><strong>reuse (int):</strong>  The reuse identifier.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.metadata.ProcRegistration.fixed_image", "modulename": "cellbin2.modules.metadata", "qualname": "ProcRegistration.fixed_image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.modules.metadata.ProcRegistration.trackline", "modulename": "cellbin2.modules.metadata", "qualname": "ProcRegistration.trackline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.ProcRegistration.reuse", "modulename": "cellbin2.modules.metadata", "qualname": "ProcRegistration.reuse", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.modules.metadata.ProcRegistration.model_config", "modulename": "cellbin2.modules.metadata", "qualname": "ProcRegistration.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.metadata.ProcFile", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile", "kind": "class", "doc": "<p>ProcFile class to handle file operations and validations for processing.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.metadata.ProcFile.file_path", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.file_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metadata.ProcFile.tech_type", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.tech_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metadata.ProcFile.chip_detect", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.chip_detect", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.ProcFile.quality_control", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.quality_control", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.ProcFile.tissue_segmentation", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.tissue_segmentation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.ProcFile.cell_segmentation", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.cell_segmentation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.ProcFile.correct_r", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.correct_r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.modules.metadata.ProcFile.channel_align", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.channel_align", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.modules.metadata.ProcFile.registration", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.registration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.modules.metadata.ProcRegistration"}, {"fullname": "cellbin2.modules.metadata.ProcFile.tech", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.tech", "kind": "variable", "doc": "<p>Returns the TechType enum value corresponding to the tech_type string.</p>\n", "annotation": ": cellbin2.utils.common.TechType"}, {"fullname": "cellbin2.modules.metadata.ProcFile.is_image", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.is_image", "kind": "variable", "doc": "<p>Checks if the file is an image based on its suffix.</p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.ProcFile.is_matrix", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.is_matrix", "kind": "variable", "doc": "<p>Checks if the file is a matrix based on its suffix.</p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.ProcFile.tag", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.tag", "kind": "variable", "doc": "<p>Returns the tag extracted from the file name.</p>\n"}, {"fullname": "cellbin2.modules.metadata.ProcFile.is_exists", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.is_exists", "kind": "variable", "doc": "<p>Checks if the file exists at the given file_path.</p>\n"}, {"fullname": "cellbin2.modules.metadata.ProcFile.get_group_name", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.get_group_name", "kind": "function", "doc": "<p>Generates a group name based on the serial number (sn) and pattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sn</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;IF&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.ProcFile.valid_check", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.valid_check", "kind": "function", "doc": "<p>Validates the file processing parameters against the provided configuration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.ProcFile.model_config", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.metadata.ProcFile.model_post_init", "modulename": "cellbin2.modules.metadata", "qualname": "ProcFile.model_post_init", "kind": "function", "doc": "<p>This function is meant to behave like a BaseModel method to initialise private attributes.</p>\n\n<p>It takes context as an argument since that's what pydantic-core passes when calling it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>self:</strong>  The BaseModel instance.</li>\n<li><strong>context:</strong>  The context.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.ProcMolecularFile", "modulename": "cellbin2.modules.metadata", "qualname": "ProcMolecularFile", "kind": "class", "doc": "<p>A class to represent a processed molecular file.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>exp_matrix (int):</strong>  The experimental matrix.</li>\n<li><strong>cell_mask (List[int]):</strong>  The cell mask.</li>\n<li><strong>extra_method (str):</strong>  An additional molecular classification method, currently not used.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.metadata.ProcMolecularFile.exp_matrix", "modulename": "cellbin2.modules.metadata", "qualname": "ProcMolecularFile.exp_matrix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.modules.metadata.ProcMolecularFile.cell_mask", "modulename": "cellbin2.modules.metadata", "qualname": "ProcMolecularFile.cell_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "cellbin2.modules.metadata.ProcMolecularFile.extra_method", "modulename": "cellbin2.modules.metadata", "qualname": "ProcMolecularFile.extra_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metadata.ProcMolecularFile.model_config", "modulename": "cellbin2.modules.metadata", "qualname": "ProcMolecularFile.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.metadata.Run", "modulename": "cellbin2.modules.metadata", "qualname": "Run", "kind": "class", "doc": "<p>A class representing a Run object with various boolean attributes.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>qc (bool):</strong>  Whether or not quality control is performed.</li>\n<li><strong>alignment (bool):</strong>  Whether or not alignment is performed.</li>\n<li><strong>matrix_extract (bool):</strong>  Whether or not matrix extraction is performed.</li>\n<li><strong>report (bool):</strong>  Whether or not a report is generated.</li>\n<li><strong>annotation (bool):</strong>  Whether or not annotation is performed.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.metadata.Run.qc", "modulename": "cellbin2.modules.metadata", "qualname": "Run.qc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.Run.alignment", "modulename": "cellbin2.modules.metadata", "qualname": "Run.alignment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.Run.matrix_extract", "modulename": "cellbin2.modules.metadata", "qualname": "Run.matrix_extract", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.Run.report", "modulename": "cellbin2.modules.metadata", "qualname": "Run.report", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.Run.annotation", "modulename": "cellbin2.modules.metadata", "qualname": "Run.annotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.modules.metadata.Run.model_config", "modulename": "cellbin2.modules.metadata", "qualname": "Run.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.metadata.ProcParam", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam", "kind": "class", "doc": "<p>ProcParam class is used to handle and validate the parameters for image and molecular file processing.\nIt contains methods for printing file information, checking inputs, and retrieving image files.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.metadata.ProcParam.image_process", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam.image_process", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, cellbin2.modules.metadata.ProcFile]"}, {"fullname": "cellbin2.modules.metadata.ProcParam.molecular_classify", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam.molecular_classify", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, cellbin2.modules.metadata.ProcMolecularFile]"}, {"fullname": "cellbin2.modules.metadata.ProcParam.run", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam.run", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.modules.metadata.Run"}, {"fullname": "cellbin2.modules.metadata.ProcParam.print_files_info", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam.print_files_info", "kind": "function", "doc": "<p>Prints the information of files to be processed in a tabular format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>files (dict):</strong>  Dictionary of files to be processed.</li>\n<li><strong>mode (str):</strong>  Mode of processing, either 'imageQC' or 'Scheduler'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;imageQC&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.ProcParam.check_inputs", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam.check_inputs", "kind": "function", "doc": "<p>Checks the validity of the input configuration for each image file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cfg (Config):</strong>  Configuration object for validation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.ProcParam.get_image_files", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam.get_image_files", "kind": "function", "doc": "<p>Retrieves and filters image files based on the specified criteria.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>do_image_qc (bool):</strong>  Flag to include image QC files.</li>\n<li><strong>do_scheduler (bool):</strong>  Flag to include scheduler files.</li>\n<li><strong>cheek_exists (bool):</strong>  Flag to check if files exist.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict[int, ProcFile]: Dictionary of filtered image files.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">do_image_qc</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">do_scheduler</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cheek_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcFile</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.ProcParam.get_molecular_classify", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam.get_molecular_classify", "kind": "function", "doc": "<p>Retrieves molecular classification files.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict[int, ProcMolecularFile]: Dictionary of molecular classification files.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcMolecularFile</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.ProcParam.model_config", "modulename": "cellbin2.modules.metadata", "qualname": "ProcParam.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.metadata.print_main_modules", "modulename": "cellbin2.modules.metadata", "qualname": "print_main_modules", "kind": "function", "doc": "<p>Print the main modules of the processing pipeline.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pp (ProcParam):</strong>  The processing parameters object.</li>\n<li><strong>sn (str):</strong>  The sample name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pp</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcParam</span>, </span><span class=\"param\"><span class=\"n\">sn</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.read_param_file", "modulename": "cellbin2.modules.metadata", "qualname": "read_param_file", "kind": "function", "doc": "<p>Reads a parameter file and returns a ProcParam object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  Path to the parameter file.</li>\n<li><strong>cfg (object):</strong>  Configuration object.</li>\n<li><strong>out_path (str, optional):</strong>  Optional path to save the processed parameters as a JSON file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ProcParam: A ProcParam object containing the parameters read from the file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">ProcParam</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metadata.main", "modulename": "cellbin2.modules.metadata", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics", "modulename": "cellbin2.modules.metrics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.metrics.MatrixArray", "modulename": "cellbin2.modules.metrics", "qualname": "MatrixArray", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.metrics.MatrixArray.bin1_matrix", "modulename": "cellbin2.modules.metrics", "qualname": "MatrixArray.bin1_matrix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.MatrixArray.tissue_bin_matrix", "modulename": "cellbin2.modules.metrics", "qualname": "MatrixArray.tissue_bin_matrix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.MatrixArray.cell_bin_matrix", "modulename": "cellbin2.modules.metrics", "qualname": "MatrixArray.cell_bin_matrix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.MatrixArray.cell_bin_adjusted_matrix", "modulename": "cellbin2.modules.metrics", "qualname": "MatrixArray.cell_bin_adjusted_matrix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.MatrixArray.matrix_type", "modulename": "cellbin2.modules.metrics", "qualname": "MatrixArray.matrix_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.common.TechType"}, {"fullname": "cellbin2.modules.metrics.MatrixArray.model_config", "modulename": "cellbin2.modules.metrics", "qualname": "MatrixArray.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.metrics.ImageSource", "modulename": "cellbin2.modules.metrics", "qualname": "ImageSource", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.metrics.ImageSource.stitch_image", "modulename": "cellbin2.modules.metrics", "qualname": "ImageSource.stitch_image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.ImageSource.cell_mask", "modulename": "cellbin2.modules.metrics", "qualname": "ImageSource.cell_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.ImageSource.registration_image", "modulename": "cellbin2.modules.metrics", "qualname": "ImageSource.registration_image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.ImageSource.tissue_mask", "modulename": "cellbin2.modules.metrics", "qualname": "ImageSource.tissue_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.ImageSource.cell_correct_mask", "modulename": "cellbin2.modules.metrics", "qualname": "ImageSource.cell_correct_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.ImageSource.model_config", "modulename": "cellbin2.modules.metrics", "qualname": "ImageSource.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.metrics.FileSource", "modulename": "cellbin2.modules.metrics", "qualname": "FileSource", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.modules.metrics.FileSource.ipr_file", "modulename": "cellbin2.modules.metrics", "qualname": "FileSource.ipr_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.FileSource.rpi_file", "modulename": "cellbin2.modules.metrics", "qualname": "FileSource.rpi_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.FileSource.matrix_list", "modulename": "cellbin2.modules.metrics", "qualname": "FileSource.matrix_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cellbin2.modules.metrics.MatrixArray]"}, {"fullname": "cellbin2.modules.metrics.FileSource.sn", "modulename": "cellbin2.modules.metrics", "qualname": "FileSource.sn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.modules.metrics.FileSource.image_dict", "modulename": "cellbin2.modules.metrics", "qualname": "FileSource.image_dict", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, cellbin2.modules.metrics.ImageSource]"}, {"fullname": "cellbin2.modules.metrics.FileSource.model_config", "modulename": "cellbin2.modules.metrics", "qualname": "FileSource.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.modules.metrics.BIN_OUTPUT_VIEW", "modulename": "cellbin2.modules.metrics", "qualname": "BIN_OUTPUT_VIEW", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "cellbin2.modules.metrics.Metrics", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics", "kind": "class", "doc": "<p>\u6307\u6807\uff1a\u57fa\u4e8e\u6d41\u7a0b\u7ed3\u679c\uff0c\u6c47\u603b\u53ca\u8ba1\u7b97\u5404\u4e2a\u6a21\u5757\u6307\u6807\uff0c\u670d\u52a1\u4e8e\u62a5\u544a</p>\n"}, {"fullname": "cellbin2.modules.metrics.Metrics.__init__", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filesource</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">FileSource</span>, </span><span class=\"param\"><span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "cellbin2.modules.metrics.Metrics.filesource", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.filesource", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.metrics.Metrics.pipe_naming", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.pipe_naming", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.metrics.Metrics.output_data", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.output_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.metrics.Metrics.load", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_report_para", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_report_para", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_image_list", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_image_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.create_heatmap_list", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.create_heatmap_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.save_json_file", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.save_json_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_statistic_data", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_statistic_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_distribution_fig", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_distribution_fig", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.image_array_to_base64", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.image_array_to_base64", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img_array</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_cellbin_scatterplot", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_cellbin_scatterplot", "kind": "function", "doc": "<p>plot cellbin2 MID and cell-density scatterplot</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>0</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_cluster_data", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_cluster_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_image_infor", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_image_infor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_cellseg_data", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_cellseg_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.set_trackpoint_chipbox", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.set_trackpoint_chipbox", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.Metrics.output_path", "modulename": "cellbin2.modules.metrics", "qualname": "Metrics.output_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.metrics.calculate", "modulename": "cellbin2.modules.metrics", "qualname": "calculate", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>param</strong>:  CellBin\u7ed3\u679c\u6587\u4ef6\uff08\u591a\u4e2a\uff09</li>\n<li><strong>output_path</strong>:  \u6307\u6807\u7edf\u8ba1\u7ed3\u675f\u540e\u751f\u6210\u7684\u4e34\u65f6\u53ca\u9759\u6001\u6587\u4ef6\uff0c\u670d\u52a1\u4e8e\u62a5\u544a\u751f\u6210</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">FileSource</span>, </span><span class=\"param\"><span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.metrics.main", "modulename": "cellbin2.modules.metrics", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.naming", "modulename": "cellbin2.modules.naming", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.my_property_dec", "modulename": "cellbin2.modules.naming", "qualname": "my_property_dec", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">property</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.__init__", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">m_type</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span></span>)</span>"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.sn", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.sn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.m_type", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.m_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.save_dir", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.save_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.cell_bin_matrix", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.cell_bin_matrix", "kind": "variable", "doc": "<p>CellBin gef</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.cell_correct_bin_matrix", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.cell_correct_bin_matrix", "kind": "variable", "doc": "<p>CellBin correct gef</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.tissue_bin_matrix", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.tissue_bin_matrix", "kind": "variable", "doc": "<p>Tissuebin gef</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.matrix_template", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.matrix_template", "kind": "variable", "doc": "<p>Track template on gene matrix</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.heatmap", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.heatmap", "kind": "variable", "doc": "<p>Gene matrix in tif format</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.cell_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.cell_mask", "kind": "variable", "doc": "<p>Cell mask on gene matrix</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.cell_correct_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.cell_correct_mask", "kind": "variable", "doc": "<p>Cell correct mask on gene matrix</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpMatrixFileNaming.tissue_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpMatrixFileNaming.tissue_mask", "kind": "variable", "doc": "<p>Tissue mask on gene matrix</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.__init__", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sn</span>, </span><span class=\"param\"><span class=\"n\">stain_type</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span></span>)</span>"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.sn", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.sn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.stain_type", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.stain_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.save_dir", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.save_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.stitch_image", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.stitch_image", "kind": "variable", "doc": "<p>Stitched image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.transform_cell_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.transform_cell_mask", "kind": "variable", "doc": "<p>Cell mask on transformed image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.transform_cell_mask_raw", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.transform_cell_mask_raw", "kind": "variable", "doc": "<p>Cell raw mask on transformed image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.transform_tissue_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.transform_tissue_mask", "kind": "variable", "doc": "<p>Tissue mask on transformed image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.transform_tissue_mask_raw", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.transform_tissue_mask_raw", "kind": "variable", "doc": "<p>Tissue raw mask on transformed image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.transformed_image", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.transformed_image", "kind": "variable", "doc": "<p>Transformed image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.transformed_template", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.transformed_template", "kind": "variable", "doc": "<p>Track template on transformed image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.transformed_track_template", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.transformed_track_template", "kind": "variable", "doc": "<p>Track detect result on transformed image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.register_template", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.register_template", "kind": "variable", "doc": "<p>Track template on registered image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.register_track_template", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.register_track_template", "kind": "variable", "doc": "<p>Track detect result on registered image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.cell_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.cell_mask", "kind": "variable", "doc": "<p>Cell mask on registered image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.cell_mask_merged", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.cell_mask_merged", "kind": "variable", "doc": "<p>Merged cell mask on registered image (nuclear + cell membrane)</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.cell_mask_raw", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.cell_mask_raw", "kind": "variable", "doc": "<p>Cell raw mask on registered image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.tissue_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.tissue_mask", "kind": "variable", "doc": "<p>Tissue mask on registered image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.tissue_mask_raw", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.tissue_mask_raw", "kind": "variable", "doc": "<p>Tissue raw mask on registered image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.registration_image", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.registration_image", "kind": "variable", "doc": "<p>Registered image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpImageFileNaming.stitched_template", "modulename": "cellbin2.modules.naming", "qualname": "DumpImageFileNaming.stitched_template", "kind": "variable", "doc": "<p>Track template on stitched image</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming", "kind": "class", "doc": "<p>\u5b9e\u73b0\u5bf9CellBin\u8f93\u51fa\u6587\u4ef6\u7684\u547d\u540d\u7ba1\u7406\uff0c\u8f93\u51fa\u6587\u4ef6\u5185\u90e8\u5173\u952e\u5b57\u6bb5\u7684\u547d\u540d\u7ba1\u7406</p>\n"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.__init__", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chip_no</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span></span>)</span>"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.save_dir", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.save_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.report", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.report", "kind": "variable", "doc": "<p>CellBin 2.0 report</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.metrics", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.metrics", "kind": "variable", "doc": "<p>CellBin 2.0 Metrics</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.ipr", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.ipr", "kind": "variable", "doc": "<p>Image processing record</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.rpi", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.rpi", "kind": "variable", "doc": "<p>Recorded image processing (for visualization)</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.final_nuclear_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.final_nuclear_mask", "kind": "variable", "doc": "<p>Final nuclear mask</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.final_cell_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.final_cell_mask", "kind": "variable", "doc": "<p>Final cell mask</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.final_tissue_mask", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.final_tissue_mask", "kind": "variable", "doc": "<p>Final tissue mask</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.input_json", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.input_json", "kind": "variable", "doc": "<p>CellBin 2.0 input params</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.tar_gz", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.tar_gz", "kind": "variable", "doc": "<p>tar.gz file</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.DumpPipelineFileNaming.stereo", "modulename": "cellbin2.modules.naming", "qualname": "DumpPipelineFileNaming.stereo", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "cellbin2.modules.naming.main", "modulename": "cellbin2.modules.naming", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report", "modulename": "cellbin2.modules.report", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.report.min_html", "modulename": "cellbin2.modules.report.min_html", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.report.min_html.minify_html", "modulename": "cellbin2.modules.report.min_html", "qualname": "minify_html", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">html_string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report.min_html.convert_png_to_base64", "modulename": "cellbin2.modules.report.min_html", "qualname": "convert_png_to_base64", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">html</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report.min_html.image_to_base64", "modulename": "cellbin2.modules.report.min_html", "qualname": "image_to_base64", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report.min_html.operat_html", "modulename": "cellbin2.modules.report.min_html", "qualname": "operat_html", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">html_path</span>, </span><span class=\"param\"><span class=\"n\">outfile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m", "modulename": "cellbin2.modules.report_m", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.report_m.CURR_PATH", "modulename": "cellbin2.modules.report_m", "qualname": "CURR_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/modules&#x27;"}, {"fullname": "cellbin2.modules.report_m.REPORT_MODULE", "modulename": "cellbin2.modules.report_m", "qualname": "REPORT_MODULE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/modules/report&#x27;"}, {"fullname": "cellbin2.modules.report_m.RESULT_JSON_PARH", "modulename": "cellbin2.modules.report_m", "qualname": "RESULT_JSON_PARH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/modules/report/js&#x27;"}, {"fullname": "cellbin2.modules.report_m.JSON_TEMPLATE", "modulename": "cellbin2.modules.report_m", "qualname": "JSON_TEMPLATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/modules/report/js/result_template.js&#x27;"}, {"fullname": "cellbin2.modules.report_m.RESOLUTION", "modulename": "cellbin2.modules.report_m", "qualname": "RESOLUTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.0005"}, {"fullname": "cellbin2.modules.report_m.COLORS", "modulename": "cellbin2.modules.report_m", "qualname": "COLORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;#E64B35&#x27;, &#x27;#4DBBD5&#x27;, &#x27;#00A087&#x27;, &#x27;#3C5488&#x27;, &#x27;#F39B7F&#x27;, &#x27;#8491B4&#x27;, &#x27;#91D1C2&#x27;, &#x27;#DC0000&#x27;, &#x27;#7E6148&#x27;, &#x27;#B09C85&#x27;, &#x27;#3B4992&#x27;, &#x27;#EE0000&#x27;, &#x27;#008B45&#x27;, &#x27;#631879&#x27;, &#x27;#008280&#x27;, &#x27;#BB0021&#x27;, &#x27;#5F559B&#x27;, &#x27;#A20056&#x27;, &#x27;#808180&#x27;, &#x27;#1B1919&#x27;, &#x27;#BC3C29&#x27;, &#x27;#0072B5&#x27;, &#x27;#E18727&#x27;, &#x27;#20854E&#x27;, &#x27;#7876B1&#x27;, &#x27;#6F99AD&#x27;, &#x27;#FFDC91&#x27;, &#x27;#EE4C97&#x27;, &#x27;#00468B&#x27;, &#x27;#ED0000&#x27;, &#x27;#42B540&#x27;, &#x27;#0099B4&#x27;, &#x27;#925E9F&#x27;, &#x27;#FDAF91&#x27;, &#x27;#AD002A&#x27;, &#x27;#ADB6B6&#x27;, &#x27;#1B1919&#x27;, &#x27;#374E55&#x27;, &#x27;#DF8F44&#x27;, &#x27;#00A1D5&#x27;, &#x27;#B24745&#x27;, &#x27;#79AF97&#x27;, &#x27;#6A6599&#x27;, &#x27;#80796B&#x27;, &#x27;#0073C2&#x27;, &#x27;#EFC000&#x27;, &#x27;#868686&#x27;, &#x27;#CD534C&#x27;, &#x27;#7AA6DC&#x27;, &#x27;#003C67&#x27;]"}, {"fullname": "cellbin2.modules.report_m.Report", "modulename": "cellbin2.modules.report_m", "qualname": "Report", "kind": "class", "doc": "<p>\u62a5\u544a: \u4e0d\u9650\u5236\u5f62\u5f0f\uff08HTML \uff09</p>\n"}, {"fullname": "cellbin2.modules.report_m.Report.__init__", "modulename": "cellbin2.modules.report_m", "qualname": "Report.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>json_template</strong>:   \u751f\u6210\u62a5\u544a\u7684\u9700\u8981\u7684json\u6587\u4ef6\u6a21\u677f</li>\n<li><strong>matrics_json</strong>:   \u8ba1\u7b97\u51fa\u7684\u6307\u6807json\u6587\u4ef6</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrics_json</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/modules/report/js&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">json_template</span><span class=\"o\">=</span><span class=\"s1\">&#39;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/modules/report/js/result_template.js&#39;</span></span>)</span>"}, {"fullname": "cellbin2.modules.report_m.Report.json_path", "modulename": "cellbin2.modules.report_m", "qualname": "Report.json_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.report_m.Report.save_path", "modulename": "cellbin2.modules.report_m", "qualname": "Report.save_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.report_m.Report.save_js", "modulename": "cellbin2.modules.report_m", "qualname": "Report.save_js", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.Report.setparam", "modulename": "cellbin2.modules.report_m", "qualname": "Report.setparam", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.Report.set_statistic_data", "modulename": "cellbin2.modules.report_m", "qualname": "Report.set_statistic_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.Report.set_distribution_data", "modulename": "cellbin2.modules.report_m", "qualname": "Report.set_distribution_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.Report.set_heatmap_data", "modulename": "cellbin2.modules.report_m", "qualname": "Report.set_heatmap_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.Report.set_image_list", "modulename": "cellbin2.modules.report_m", "qualname": "Report.set_image_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.Report.set_cluster_data", "modulename": "cellbin2.modules.report_m", "qualname": "Report.set_cluster_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.Report.set_image_ipr", "modulename": "cellbin2.modules.report_m", "qualname": "Report.set_image_ipr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.creat_report", "modulename": "cellbin2.modules.report_m", "qualname": "creat_report", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matric_json</span>, </span><span class=\"param\"><span class=\"n\">save_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.report_m.main", "modulename": "cellbin2.modules.report_m", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.run_state", "modulename": "cellbin2.modules.run_state", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.MatrixRunState", "modulename": "cellbin2.modules.run_state", "qualname": "MatrixRunState", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.MatrixRunState.__init__", "modulename": "cellbin2.modules.run_state", "qualname": "MatrixRunState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src_file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dst_dir</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cellbin2.modules.run_state.MatrixRunState.cell_bin_matrix", "modulename": "cellbin2.modules.run_state", "qualname": "MatrixRunState.cell_bin_matrix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.MatrixRunState.cell_correct_bin_matrix", "modulename": "cellbin2.modules.run_state", "qualname": "MatrixRunState.cell_correct_bin_matrix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.MatrixRunState.tissue_bin_matrix", "modulename": "cellbin2.modules.run_state", "qualname": "MatrixRunState.tissue_bin_matrix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.MatrixRunState.matrix_template", "modulename": "cellbin2.modules.run_state", "qualname": "MatrixRunState.matrix_template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.ImageRunState", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.ImageRunState.__init__", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dst_dir</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">sn</span>, </span><span class=\"param\"><span class=\"n\">stain_type</span></span>)</span>"}, {"fullname": "cellbin2.modules.run_state.ImageRunState.cell_mask", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState.cell_mask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.ImageRunState.cell_correct_mask", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState.cell_correct_mask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.ImageRunState.tissue_mask", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState.tissue_mask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.ImageRunState.transformed_image", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState.transformed_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.ImageRunState.registration_image", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState.registration_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.ImageRunState.transformed_template", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState.transformed_template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.ImageRunState.stitched_template", "modulename": "cellbin2.modules.run_state", "qualname": "ImageRunState.stitched_template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.PipelineRunState", "modulename": "cellbin2.modules.run_state", "qualname": "PipelineRunState", "kind": "class", "doc": "<p>\u5b9e\u73b0\u5bf9CellBin\u8f93\u51fa\u6587\u4ef6\u7684\u547d\u540d\u7ba1\u7406\uff0c\u8f93\u51fa\u6587\u4ef6\u5185\u90e8\u5173\u952e\u5b57\u6bb5\u7684\u547d\u540d\u7ba1\u7406</p>\n"}, {"fullname": "cellbin2.modules.run_state.PipelineRunState.__init__", "modulename": "cellbin2.modules.run_state", "qualname": "PipelineRunState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chip_no</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dst_dir</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cellbin2.modules.run_state.PipelineRunState.image_qc", "modulename": "cellbin2.modules.run_state", "qualname": "PipelineRunState.image_qc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.PipelineRunState.scheduler", "modulename": "cellbin2.modules.run_state", "qualname": "PipelineRunState.scheduler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.PipelineRunState.metrics", "modulename": "cellbin2.modules.run_state", "qualname": "PipelineRunState.metrics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.run_state.PipelineRunState.report", "modulename": "cellbin2.modules.run_state", "qualname": "PipelineRunState.report", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.scheduler", "modulename": "cellbin2.modules.scheduler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.scheduler.Scheduler", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler", "kind": "class", "doc": "<p>A scheduler class responsible for managing the registration, segmentation, calibration, and matrix extraction processes.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>weights_root (str):</strong>  The root directory for storing CNN weight files.</li>\n<li><strong>param_chip (StereoChip):</strong>  An instance of StereoChip for handling chip mask information.</li>\n<li><strong>config (Config):</strong>  An instance of Config for managing configuration settings.</li>\n<li><strong>_files (Dict[int, ProcFile]):</strong>  A dictionary to store processed files.</li>\n<li><strong>_ipr (ImageProcessRecord):</strong>  An instance of ImageProcessRecord for managing image processing records.</li>\n<li><strong>_channel_images (Dict[str, Union[IFChannel, ImageChannel]]):</strong>  A dictionary to store channel images.</li>\n<li><strong>_output_path (str):</strong>  The output directory path.</li>\n<li><strong>p_naming (DumpPipelineFileNaming):</strong>  An instance of DumpPipelineFileNaming for managing file naming conventions.</li>\n<li><strong>matrix_file:</strong>  The matrix file to be processed.</li>\n</ul>\n"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.__init__", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.__init__", "kind": "function", "doc": "<p>Initialize the StereoPipeline object with the given configuration file, chip mask file, and weights root.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config_file (str):</strong>  Path to the configuration file.</li>\n<li><strong>chip_mask_file (str):</strong>  Path to the chip mask file.</li>\n<li><strong>weights_root (str):</strong>  Root directory for weights.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">chip_mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">weights_root</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.weights_root", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.weights_root", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.param_chip", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.param_chip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.config", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.p_naming", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.p_naming", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.modules.naming.DumpPipelineFileNaming"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.matrix_file", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.matrix_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.run_segmentation", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.run_segmentation", "kind": "function", "doc": "<p>Run tissue and cell segmentation on the given image file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>f (ProcFile):</strong>  The file object containing segmentation settings.</li>\n<li><strong>im_path (Path):</strong>  The path to the image file.</li>\n<li><strong>ts_raw_save_path (Path):</strong>  The path to save the raw tissue segmentation mask.</li>\n<li><strong>cs_raw_save_path (Path):</strong>  The path to save the raw cell segmentation mask.</li>\n<li><strong>ts_save_path (str):</strong>  The path to save the final tissue segmentation mask.</li>\n<li><strong>cs_save_path (str):</strong>  The path to save the final cell segmentation mask.</li>\n<li><strong>cur_c_image (object, optional):</strong>  The current channel image or IF channel image, if available.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">f</span>,</span><span class=\"param\">\t<span class=\"n\">im_path</span>,</span><span class=\"param\">\t<span class=\"n\">ts_raw_save_path</span>,</span><span class=\"param\">\t<span class=\"n\">cs_raw_save_path</span>,</span><span class=\"param\">\t<span class=\"n\">ts_save_path</span>,</span><span class=\"param\">\t<span class=\"n\">cs_save_path</span>,</span><span class=\"param\">\t<span class=\"n\">cur_c_image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.run_single_image", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.run_single_image", "kind": "function", "doc": "<p>Process each single image in the pipeline.</p>\n\n<p>This method iterates over each image file, performs necessary transformations,\nand applies segmentation. It handles both cases where IPR data is available and\nwhere it is not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.run_mul_image", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.run_mul_image", "kind": "function", "doc": "<p>Process multiple images for registration.</p>\n\n<p>This method handles the registration of multiple images. It iterates over\nthe files in self._files and processes only the images. If the image is\nregistered, it performs the registration process. If not, it transforms\nthe image to a registered format.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.run_merge_masks", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.run_merge_masks", "kind": "function", "doc": "<p>This method processes and merges cell masks for each molecular classification file.\nIt extracts the cell mask from the file, determines the naming convention, and merges\nthe masks if necessary. Finally, it corrects the cell mask using the fast correction\nalgorithm and saves the results.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.run", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.run", "kind": "function", "doc": "<p>Run the main pipeline for processing the images.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chip_no (str):</strong>  The serial number of the chip.</li>\n<li><strong>input_image (str):</strong>  The path to the input image file.</li>\n<li><strong>stain_type (str):</strong>  The type of stain used in the image.</li>\n<li><strong>param_file (str):</strong>  The path to the parameter file.</li>\n<li><strong>output_path (str):</strong>  The directory where the output files will be saved.</li>\n<li><strong>ipr_path (str):</strong>  The path to the image process record file.</li>\n<li><strong>matrix_path (str):</strong>  The path to the matrix file.</li>\n<li><strong>kit (str):</strong>  The type of kit used (e.g., Transcriptomics, Protein).</li>\n<li><strong>debug (bool):</strong>  Flag to enable debug mode.</li>\n<li><strong>research_mode (bool):</strong>  Flag to enable research mode.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">chip_no</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">input_image</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">param_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ipr_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">matrix_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">kit</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">research_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.scheduler.Scheduler.del_files", "modulename": "cellbin2.modules.scheduler", "qualname": "Scheduler.del_files", "kind": "function", "doc": "<p>Deletes files from the output directory, excluding those specified to be kept.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>f_to_keep (list):</strong>  List of file properties that should not be deleted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f_to_keep</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.scheduler.scheduler_pipeline", "modulename": "cellbin2.modules.scheduler", "qualname": "scheduler_pipeline", "kind": "function", "doc": "<p>This function serves as the main pipeline for scheduling the image processing tasks.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>weights_root (str):</strong>  Local directory path for storing CNN weight files.</li>\n<li><strong>chip_no (str):</strong>  Sample chip number.</li>\n<li><strong>input_image (str):</strong>  Local path of the stained image.</li>\n<li><strong>stain_type (str):</strong>  Staining type corresponding to the stained image.</li>\n<li><strong>param_file (str):</strong>  Local path of the parameter file.</li>\n<li><strong>output_path (str):</strong>  Local directory path for storing output files.</li>\n<li><strong>matrix_path (str):</strong>  Local directory path for storing the expression matrix.</li>\n<li><strong>ipr_path (str):</strong>  Local directory path for storing the image processing record file.</li>\n<li><strong>kit (str):</strong>  Kit type (e.g., Transcriptomics, Protein).</li>\n<li><strong>debug (bool, optional):</strong>  Debug mode flag. Defaults to False.</li>\n<li><strong>research_mode (bool, optional):</strong>  Research mode flag. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: Status code.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">weights_root</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chip_no</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">input_image</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">param_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">matrix_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ipr_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">kit</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">research_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.modules.scheduler.main", "modulename": "cellbin2.modules.scheduler", "qualname": "main", "kind": "function", "doc": "<p>The main function that initializes and runs the scheduler pipeline.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>args (argparse.Namespace):</strong>  Parsed command - line arguments containing the configuration and input data.</li>\n<li><strong>para (dict):</strong>  Additional parameters required for the pipeline.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">para</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils", "modulename": "cellbin2.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.obj2dict", "modulename": "cellbin2.utils", "qualname": "obj2dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.dict2h5", "modulename": "cellbin2.utils", "qualname": "dict2h5", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dct</span>, </span><span class=\"param\"><span class=\"n\">h5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.h52dict", "modulename": "cellbin2.utils", "qualname": "h52dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">h5</span>, </span><span class=\"param\"><span class=\"n\">dct</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.HDF5", "modulename": "cellbin2.utils", "qualname": "HDF5", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.HDF5.read", "modulename": "cellbin2.utils", "qualname": "HDF5.read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.HDF5.write", "modulename": "cellbin2.utils", "qualname": "HDF5.write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">extra</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.Dict2Obj", "modulename": "cellbin2.utils", "qualname": "Dict2Obj", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.Dict2Obj.__init__", "modulename": "cellbin2.utils", "qualname": "Dict2Obj.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dct</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "cellbin2.utils.DictEncoder", "modulename": "cellbin2.utils", "qualname": "DictEncoder", "kind": "class", "doc": "<p>\u9002\u914djson\u5404\u79cd\u6570\u636e\u7c7b\u578b</p>\n", "bases": "json.encoder.JSONEncoder"}, {"fullname": "cellbin2.utils.DictEncoder.default", "modulename": "cellbin2.utils", "qualname": "DictEncoder.default", "kind": "function", "doc": "<p>Implement this method in a subclass such that it returns\na serializable object for <code>o</code>, or calls the base implementation\n(to raise a <code>TypeError</code>).</p>\n\n<p>For example, to support arbitrary iterators, you could\nimplement default like this::</p>\n\n<pre><code>def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return JSONEncoder.default(self, o)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.dict2json", "modulename": "cellbin2.utils", "qualname": "dict2json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">json_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.main", "modulename": "cellbin2.utils", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape", "modulename": "cellbin2.utils.cell_shape", "kind": "module", "doc": "<p>\u7ec6\u80de\u8f6e\u5ed3\u70b9\u5199\u5165cgef\u6587\u4ef6\n\u7248\u672c\uff1aV1.0.1</p>\n"}, {"fullname": "cellbin2.utils.cell_shape.final_border_length", "modulename": "cellbin2.utils.cell_shape", "qualname": "final_border_length", "kind": "variable", "doc": "<p></p>\n", "default_value": "16"}, {"fullname": "cellbin2.utils.cell_shape.attr_x_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "attr_x_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "cellbin2.utils.cell_shape.attr_y_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "attr_y_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "cellbin2.utils.cell_shape.attr_gene_count_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "attr_gene_count_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "cellbin2.utils.cell_shape.attr_exp_count_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "attr_exp_count_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "cellbin2.utils.cell_shape.attr_dnb_count_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "attr_dnb_count_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "cellbin2.utils.cell_shape.attr_area_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "attr_area_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "7"}, {"fullname": "cellbin2.utils.cell_shape.attr_cell_type_id_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "attr_cell_type_id_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "cellbin2.utils.cell_shape.attr_cluster_id_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "attr_cluster_id_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "9"}, {"fullname": "cellbin2.utils.cell_shape.H5_FILE_POINT", "modulename": "cellbin2.utils.cell_shape", "qualname": "H5_FILE_POINT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": h5py._hl.files.File"}, {"fullname": "cellbin2.utils.cell_shape.create_group", "modulename": "cellbin2.utils.cell_shape", "qualname": "create_group", "kind": "function", "doc": "<p>h5\u6587\u4ef6\u521b\u5efagroup</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group_name</strong>:  group \u540d\u79f0</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>group \u5bf9\u8c61</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">group_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.set_attrs", "modulename": "cellbin2.utils.cell_shape", "qualname": "set_attrs", "kind": "function", "doc": "<p>h5 group \u8bbe\u7f6e\u5c5e\u6027</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group</strong>:  group \u540d\u79f0</li>\n<li><strong>key</strong>:  \u5c5e\u6027\u540d</li>\n<li><strong>values</strong>:  \u5c5e\u6027\u503c</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">_hl</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">Group</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.create_dataset", "modulename": "cellbin2.utils.cell_shape", "qualname": "create_dataset", "kind": "function", "doc": "<p>h5 group \u521b\u5efa\u6570\u636e\u96c6</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group</strong>:  group\u540d\u79f0</li>\n<li><strong>name</strong>:  \u6570\u636e\u96c6\u540d\u79f0</li>\n<li><strong>data</strong>:  \u6570\u636e</li>\n<li><strong>dtype</strong>:  \u6570\u636e\u7c7b\u578b **\u6682\u672a\u7528\u5230</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">_hl</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">Group</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.print_running_time", "modulename": "cellbin2.utils.cell_shape", "qualname": "print_running_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.create_info_json_2d", "modulename": "cellbin2.utils.cell_shape", "qualname": "create_info_json_2d", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.divChunk", "modulename": "cellbin2.utils.cell_shape", "qualname": "divChunk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_count</span>, </span><span class=\"param\"><span class=\"n\">bounding_size_x</span>, </span><span class=\"param\"><span class=\"n\">bounding_size_y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.getCellInfoList", "modulename": "cellbin2.utils.cell_shape", "qualname": "getCellInfoList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.split_32points_cell_border", "modulename": "cellbin2.utils.cell_shape", "qualname": "split_32points_cell_border", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">border_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.get_valid_border_len", "modulename": "cellbin2.utils.cell_shape", "qualname": "get_valid_border_len", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">border_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.append_cell_to_chunk", "modulename": "cellbin2.utils.cell_shape", "qualname": "append_cell_to_chunk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell</span>, </span><span class=\"param\"><span class=\"n\">chunk_cells_dict</span>, </span><span class=\"param\"><span class=\"n\">lower_bound</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span>, </span><span class=\"param\"><span class=\"n\">grid_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.create_chunk_grids_dict", "modulename": "cellbin2.utils.cell_shape", "qualname": "create_chunk_grids_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.create_cell_dict", "modulename": "cellbin2.utils.cell_shape", "qualname": "create_cell_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_id</span>, </span><span class=\"param\"><span class=\"n\">basic_info</span>, </span><span class=\"param\"><span class=\"n\">cell_border</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.get_line_distance", "modulename": "cellbin2.utils.cell_shape", "qualname": "get_line_distance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">point1</span>, </span><span class=\"param\"><span class=\"n\">point2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.get_triangle_area", "modulename": "cellbin2.utils.cell_shape", "qualname": "get_triangle_area", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">point1</span>, </span><span class=\"param\"><span class=\"n\">point2</span>, </span><span class=\"param\"><span class=\"n\">point3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.valingam_whyatt_shape_simplification", "modulename": "cellbin2.utils.cell_shape", "qualname": "valingam_whyatt_shape_simplification", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target_count</span>, </span><span class=\"param\"><span class=\"n\">point_list</span>, </span><span class=\"param\"><span class=\"n\">is_need_earcut</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.CellBorder", "modulename": "cellbin2.utils.cell_shape", "qualname": "CellBorder", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.CellBorder.__init__", "modulename": "cellbin2.utils.cell_shape", "qualname": "CellBorder.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_id</span>, </span><span class=\"param\"><span class=\"n\">border_data</span>, </span><span class=\"param\"><span class=\"n\">is_split_cell</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "cellbin2.utils.cell_shape.CellBorder.id", "modulename": "cellbin2.utils.cell_shape", "qualname": "CellBorder.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.CellBorder.border_data", "modulename": "cellbin2.utils.cell_shape", "qualname": "CellBorder.border_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.CellBorder.is_split_cell", "modulename": "cellbin2.utils.cell_shape", "qualname": "CellBorder.is_split_cell", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.CellBorder.border_vertex_len", "modulename": "cellbin2.utils.cell_shape", "qualname": "CellBorder.border_vertex_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.CellBorder.get_border_points_bytes", "modulename": "cellbin2.utils.cell_shape", "qualname": "CellBorder.get_border_points_bytes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.CellBorder.get_LOD_vertices_index", "modulename": "cellbin2.utils.cell_shape", "qualname": "CellBorder.get_LOD_vertices_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.Chunk", "modulename": "cellbin2.utils.cell_shape", "qualname": "Chunk", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.Chunk.__init__", "modulename": "cellbin2.utils.cell_shape", "qualname": "Chunk.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_key</span>, </span><span class=\"param\"><span class=\"n\">_folder_dir</span>, </span><span class=\"param\"><span class=\"n\">_cell_list</span></span>)</span>"}, {"fullname": "cellbin2.utils.cell_shape.Chunk.key", "modulename": "cellbin2.utils.cell_shape", "qualname": "Chunk.key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.Chunk.folder_dir", "modulename": "cellbin2.utils.cell_shape", "qualname": "Chunk.folder_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.Chunk.cell_list", "modulename": "cellbin2.utils.cell_shape", "qualname": "Chunk.cell_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.cell_shape.Chunk.output_byte_file", "modulename": "cellbin2.utils.cell_shape", "qualname": "Chunk.output_byte_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.Chunk.write_h5", "modulename": "cellbin2.utils.cell_shape", "qualname": "Chunk.write_h5", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.f_main", "modulename": "cellbin2.utils.cell_shape", "qualname": "f_main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cgeffile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.cell_shape.main", "modulename": "cellbin2.utils.cell_shape", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog", "modulename": "cellbin2.utils.clog", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.clog.PROG_VERSION", "modulename": "cellbin2.utils.clog", "qualname": "PROG_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;0.1&#x27;"}, {"fullname": "cellbin2.utils.clog.PROG_DATE", "modulename": "cellbin2.utils.clog", "qualname": "PROG_DATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;2021-07-25&#x27;"}, {"fullname": "cellbin2.utils.clog.usage", "modulename": "cellbin2.utils.clog", "qualname": "usage", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\nVersion 0.1  by Chen Bichao  2021-07-25\\nUsage: \\nimport clog\\nclog.log2file()\\n\\nclog.info(&quot;Test info.&quot;)\\nclog.warning(&quot;Logging warning.&quot;)\\n&#x27;"}, {"fullname": "cellbin2.utils.clog.ROOT", "modulename": "cellbin2.utils.clog", "qualname": "ROOT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RootLogger root (WARNING)&gt;"}, {"fullname": "cellbin2.utils.clog.CRITICAL", "modulename": "cellbin2.utils.clog", "qualname": "CRITICAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "50"}, {"fullname": "cellbin2.utils.clog.ERROR", "modulename": "cellbin2.utils.clog", "qualname": "ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "40"}, {"fullname": "cellbin2.utils.clog.WARNING", "modulename": "cellbin2.utils.clog", "qualname": "WARNING", "kind": "variable", "doc": "<p></p>\n", "default_value": "30"}, {"fullname": "cellbin2.utils.clog.INFO", "modulename": "cellbin2.utils.clog", "qualname": "INFO", "kind": "variable", "doc": "<p></p>\n", "default_value": "20"}, {"fullname": "cellbin2.utils.clog.DEBUG", "modulename": "cellbin2.utils.clog", "qualname": "DEBUG", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "cellbin2.utils.clog.level_name", "modulename": "cellbin2.utils.clog", "qualname": "level_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "{50: &#x27;CRITICAL&#x27;, 40: &#x27;ERROR&#x27;, 30: &#x27;WARNING&#x27;, 20: &#x27;INFO&#x27;, 10: &#x27;DEBUG&#x27;}"}, {"fullname": "cellbin2.utils.clog.CustomFormatter", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter", "kind": "class", "doc": "<p>Formatter instances are used to convert a LogRecord to text.</p>\n\n<p>Formatters need to know how a LogRecord is constructed. They are\nresponsible for converting a LogRecord to (usually) a string which can\nbe interpreted by either a human or an external system. The base Formatter\nallows a formatting string to be specified. If none is supplied, the\nstyle-dependent default value, \"%(message)s\", \"{message}\", or\n\"${message}\", is used.</p>\n\n<p>The Formatter can be initialized with a format string which makes use of\nknowledge of the LogRecord attributes - e.g. the default value mentioned\nabove makes use of the fact that the user's message and arguments are pre-\nformatted into a LogRecord's message attribute. Currently, the useful\nattributes in a LogRecord are described by:</p>\n\n<p>%(name)s            Name of the logger (logging channel)\n%(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                    WARNING, ERROR, CRITICAL)\n%(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",\n                    \"WARNING\", \"ERROR\", \"CRITICAL\")\n%(pathname)s        Full pathname of the source file where the logging\n                    call was issued (if available)\n%(filename)s        Filename portion of pathname\n%(module)s          Module (name portion of filename)\n%(lineno)d          Source line number where the logging call was issued\n                    (if available)\n%(funcName)s        Function name\n%(created)f         Time when the LogRecord was created (time.time()\n                    return value)\n%(asctime)s         Textual time when the LogRecord was created\n%(msecs)d           Millisecond portion of the creation time\n%(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                    relative to the time the logging module was loaded\n                    (typically at application startup time)\n%(thread)d          Thread ID (if available)\n%(threadName)s      Thread name (if available)\n%(process)d         Process ID (if available)\n%(message)s         The result of record.getMessage(), computed just as\n                    the record is emitted</p>\n", "bases": "logging.Formatter"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.grey", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.grey", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[38;20m&#x27;"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.yellow", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.yellow", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[33;20m&#x27;"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.red", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.red", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[31;20m&#x27;"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.green", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.green", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[32;20m&#x27;"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.bold_red", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.bold_red", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[31;1m&#x27;"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.reset", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.reset", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[0m&#x27;"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.format", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.format", "kind": "function", "doc": "<p>Format the specified record as text.</p>\n\n<p>The record's attribute dictionary is used as the operand to a\nstring formatting operation which yields the returned string.\nBefore formatting the dictionary, a couple of preparatory steps\nare carried out. The message attribute of the record is computed\nusing LogRecord.getMessage(). If the formatting string uses the\ntime (as determined by a call to usesTime(), formatTime() is\ncalled to format the event time. If there is exception information,\nit is formatted using formatException() and appended to the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.msg_format", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.msg_format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27; %(message)s &#x27;"}, {"fullname": "cellbin2.utils.clog.CustomFormatter.FORMATS", "modulename": "cellbin2.utils.clog", "qualname": "CustomFormatter.FORMATS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{10: &#x27;\\x1b[32;20m[%(levelname).4s %(asctime)s p%(process)s %(funcName)s %(filename)s:%(lineno)s]\\x1b[0m\\x1b[38;20m %(message)s \\x1b[0m&#x27;, 20: &#x27;\\x1b[32;20m[%(levelname).4s %(asctime)s p%(process)s %(funcName)s %(filename)s:%(lineno)s]\\x1b[0m\\x1b[38;20m %(message)s \\x1b[0m&#x27;, 30: &#x27;\\x1b[33;20m[%(levelname).4s %(asctime)s p%(process)s %(funcName)s %(filename)s:%(lineno)s]\\x1b[0m\\x1b[38;20m %(message)s \\x1b[0m&#x27;, 40: &#x27;\\x1b[31;20m[%(levelname).4s %(asctime)s p%(process)s %(funcName)s %(filename)s:%(lineno)s]\\x1b[0m\\x1b[38;20m %(message)s \\x1b[0m&#x27;, 50: &#x27;\\x1b[31;1m[%(levelname).4s %(asctime)s p%(process)s %(funcName)s %(filename)s:%(lineno)s]\\x1b[0m\\x1b[38;20m %(message)s \\x1b[0m&#x27;}"}, {"fullname": "cellbin2.utils.clog.CLogger", "modulename": "cellbin2.utils.clog", "qualname": "CLogger", "kind": "class", "doc": "<p>Custom logger class to format and instantiate logger.</p>\n"}, {"fullname": "cellbin2.utils.clog.CLogger.__init__", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.__init__", "kind": "function", "doc": "<p>Initialize logger, default logger has one StreamHandler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "cellbin2.utils.clog.CLogger.file_handler", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.file_handler", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "cellbin2.utils.clog.CLogger.logger", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.clog.CLogger.stream_handler", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.stream_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.clog.CLogger.logfile", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.logfile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.clog.CLogger.log2file", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.log2file", "kind": "function", "doc": "<p>Save logging to file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.CLogger.get_logfile", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.get_logfile", "kind": "function", "doc": "<p>Get current logging file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.CLogger.st_formatter", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.st_formatter", "kind": "function", "doc": "<p>Logging formatter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.CLogger.set_level", "modulename": "cellbin2.utils.clog", "qualname": "CLogger.set_level", "kind": "function", "doc": "<p>Set logger level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.TqdmToLogger", "modulename": "cellbin2.utils.clog", "qualname": "TqdmToLogger", "kind": "class", "doc": "<p>Output stream for TQDM which will output to logger module instead of\nthe StdOut.</p>\n", "bases": "_io.StringIO"}, {"fullname": "cellbin2.utils.clog.TqdmToLogger.__init__", "modulename": "cellbin2.utils.clog", "qualname": "TqdmToLogger.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.utils.clog.TqdmToLogger.logger", "modulename": "cellbin2.utils.clog", "qualname": "TqdmToLogger.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "cellbin2.utils.clog.TqdmToLogger.level", "modulename": "cellbin2.utils.clog", "qualname": "TqdmToLogger.level", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "cellbin2.utils.clog.TqdmToLogger.buf", "modulename": "cellbin2.utils.clog", "qualname": "TqdmToLogger.buf", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "cellbin2.utils.clog.TqdmToLogger.write", "modulename": "cellbin2.utils.clog", "qualname": "TqdmToLogger.write", "kind": "function", "doc": "<p>Write string to file.</p>\n\n<p>Returns the number of characters written, which is always equal to\nthe length of the string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">buf</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.TqdmToLogger.flush", "modulename": "cellbin2.utils.clog", "qualname": "TqdmToLogger.flush", "kind": "function", "doc": "<p>Flush write buffers, if applicable.</p>\n\n<p>This is not implemented for read-only and non-blocking streams.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.cl", "modulename": "cellbin2.utils.clog", "qualname": "cl", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;cellbin2.utils.clog.CLogger object&gt;"}, {"fullname": "cellbin2.utils.clog.logger", "modulename": "cellbin2.utils.clog", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cellbin2.utils.clog (INFO)&gt;"}, {"fullname": "cellbin2.utils.clog.get_logfile", "modulename": "cellbin2.utils.clog", "qualname": "get_logfile", "kind": "function", "doc": "<p>Get current logging file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.log2file", "modulename": "cellbin2.utils.clog", "qualname": "log2file", "kind": "function", "doc": "<p>Save logging to file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.set_level", "modulename": "cellbin2.utils.clog", "qualname": "set_level", "kind": "function", "doc": "<p>Set logger level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.debug", "modulename": "cellbin2.utils.clog", "qualname": "debug", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'DEBUG'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.info", "modulename": "cellbin2.utils.clog", "qualname": "info", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'INFO'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.warning", "modulename": "cellbin2.utils.clog", "qualname": "warning", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'WARNING'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.error", "modulename": "cellbin2.utils.clog", "qualname": "error", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'ERROR'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.critical", "modulename": "cellbin2.utils.clog", "qualname": "critical", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'CRITICAL'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.critical(\"Houston, we have a %s\", \"major disaster\", exc_info=1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.clog.tqdm_out", "modulename": "cellbin2.utils.clog", "qualname": "tqdm_out", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;cellbin2.utils.clog.TqdmToLogger object&gt;"}, {"fullname": "cellbin2.utils.clog.exception", "modulename": "cellbin2.utils.clog", "qualname": "exception", "kind": "function", "doc": "<p>Convenience method for logging an ERROR with exception information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.common", "modulename": "cellbin2.utils.common", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.common.TechType", "modulename": "cellbin2.utils.common", "qualname": "TechType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "cellbin2.utils.common.TechType.ssDNA", "modulename": "cellbin2.utils.common", "qualname": "TechType.ssDNA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TechType.ssDNA: 1&gt;"}, {"fullname": "cellbin2.utils.common.TechType.DAPI", "modulename": "cellbin2.utils.common", "qualname": "TechType.DAPI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TechType.DAPI: 2&gt;"}, {"fullname": "cellbin2.utils.common.TechType.HE", "modulename": "cellbin2.utils.common", "qualname": "TechType.HE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TechType.HE: 3&gt;"}, {"fullname": "cellbin2.utils.common.TechType.IF", "modulename": "cellbin2.utils.common", "qualname": "TechType.IF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TechType.IF: 4&gt;"}, {"fullname": "cellbin2.utils.common.TechType.Transcriptomics", "modulename": "cellbin2.utils.common", "qualname": "TechType.Transcriptomics", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TechType.Transcriptomics: 5&gt;"}, {"fullname": "cellbin2.utils.common.TechType.Protein", "modulename": "cellbin2.utils.common", "qualname": "TechType.Protein", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TechType.Protein: 6&gt;"}, {"fullname": "cellbin2.utils.common.TechType.Null", "modulename": "cellbin2.utils.common", "qualname": "TechType.Null", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TechType.Null: 7&gt;"}, {"fullname": "cellbin2.utils.common.TechType.UNKNOWN", "modulename": "cellbin2.utils.common", "qualname": "TechType.UNKNOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TechType.UNKNOWN: 10&gt;"}, {"fullname": "cellbin2.utils.common.KIT_VERSIONS", "modulename": "cellbin2.utils.common", "qualname": "KIT_VERSIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;Stereo-seq T FF V1.2&#x27;, &#x27;Stereo-seq T FF V1.3&#x27;, &#x27;Stereo-CITE T FF V1.0&#x27;, &#x27;Stereo-CITE T FF V1.1&#x27;, &#x27;Stereo-seq N FFPE V1.0&#x27;)"}, {"fullname": "cellbin2.utils.common.KIT_VERSIONS_R", "modulename": "cellbin2.utils.common", "qualname": "KIT_VERSIONS_R", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;Stereo-seq T FF V1.2 R&#x27;, &#x27;Stereo-seq T FF V1.3 R&#x27;, &#x27;Stereo-CITE T FF V1.0 R&#x27;, &#x27;Stereo-CITE T FF V1.1 R&#x27;, &#x27;Stereo-seq N FFPE V1.0 R&#x27;)"}, {"fullname": "cellbin2.utils.common.bPlaceHolder", "modulename": "cellbin2.utils.common", "qualname": "bPlaceHolder", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "cellbin2.utils.common.fPlaceHolder", "modulename": "cellbin2.utils.common", "qualname": "fPlaceHolder", "kind": "variable", "doc": "<p></p>\n", "default_value": "-999.999"}, {"fullname": "cellbin2.utils.common.iPlaceHolder", "modulename": "cellbin2.utils.common", "qualname": "iPlaceHolder", "kind": "variable", "doc": "<p></p>\n", "default_value": "-999"}, {"fullname": "cellbin2.utils.common.sPlaceHolder", "modulename": "cellbin2.utils.common", "qualname": "sPlaceHolder", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;-&#x27;"}, {"fullname": "cellbin2.utils.common.FILES_TO_KEEP", "modulename": "cellbin2.utils.common", "qualname": "FILES_TO_KEEP", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;)"}, {"fullname": "cellbin2.utils.common.FILES_TO_KEEP_RESEARCH", "modulename": "cellbin2.utils.common", "qualname": "FILES_TO_KEEP_RESEARCH", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;, &lt;property object&gt;)"}, {"fullname": "cellbin2.utils.common.ErrorCode", "modulename": "cellbin2.utils.common", "qualname": "ErrorCode", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "cellbin2.utils.common.ErrorCode.qcFail", "modulename": "cellbin2.utils.common", "qualname": "ErrorCode.qcFail", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ErrorCode.qcFail: 1&gt;"}, {"fullname": "cellbin2.utils.common.ErrorCode.missFile", "modulename": "cellbin2.utils.common", "qualname": "ErrorCode.missFile", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ErrorCode.missFile: 2&gt;"}, {"fullname": "cellbin2.utils.common.ErrorCode.sizeInconsistent", "modulename": "cellbin2.utils.common", "qualname": "ErrorCode.sizeInconsistent", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ErrorCode.sizeInconsistent: 3&gt;"}, {"fullname": "cellbin2.utils.common.ErrorCode.weightDownloadFail", "modulename": "cellbin2.utils.common", "qualname": "ErrorCode.weightDownloadFail", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ErrorCode.weightDownloadFail: 4&gt;"}, {"fullname": "cellbin2.utils.common.ErrorCode.unexpectedError", "modulename": "cellbin2.utils.common", "qualname": "ErrorCode.unexpectedError", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ErrorCode.unexpectedError: 254&gt;"}, {"fullname": "cellbin2.utils.common.write_e2f", "modulename": "cellbin2.utils.common", "qualname": "write_e2f", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.config", "modulename": "cellbin2.utils.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.DefaultIMage", "modulename": "cellbin2.utils.config", "qualname": "DefaultIMage", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.10/concepts/models/\">https://docs.pydantic.dev/2.10/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>__class_vars__:</strong>  The names of the class variables defined on the model.</li>\n<li><strong>__private_attributes__:</strong>  Metadata about the private attributes of the model.</li>\n<li><strong>__signature__:</strong>  The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</li>\n<li><strong>__pydantic_complete__:</strong>  Whether model building is completed, or if there are still undefined fields.</li>\n<li><strong>__pydantic_core_schema__:</strong>  The core schema of the model.</li>\n<li><strong>__pydantic_custom_init__:</strong>  Whether the model has a custom <code>__init__</code> function.</li>\n<li><strong>__pydantic_decorators__:</strong>  Metadata containing the decorators defined on the model.\nThis replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</li>\n<li><strong>__pydantic_generic_metadata__:</strong>  Metadata for generic models; contains data used for a similar purpose to\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.</li>\n<li><strong>__pydantic_parent_namespace__:</strong>  Parent namespace of the model, used for automatic rebuilding of models.</li>\n<li><strong>__pydantic_post_init__:</strong>  The name of the post-init method for the model, if defined.</li>\n<li><strong>__pydantic_root_model__:</strong>  Whether the model is a [<code>RootModel</code>][pydantic.root_model.RootModel].</li>\n<li><strong>__pydantic_serializer__:</strong>  The <code>pydantic-core</code> <code>SchemaSerializer</code> used to dump instances of the model.</li>\n<li><strong>__pydantic_validator__:</strong>  The <code>pydantic-core</code> <code>SchemaValidator</code> used to validate instances of the model.</li>\n<li><strong>__pydantic_fields__:</strong>  A dictionary of field names and their corresponding [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</li>\n<li><strong>__pydantic_computed_fields__:</strong>  A dictionary of computed field names and their corresponding [<code>ComputedFieldInfo</code>][pydantic.fields.ComputedFieldInfo] objects.</li>\n<li><strong>__pydantic_extra__:</strong>  A dictionary containing extra values, if [<code>extra</code>][pydantic.config.ConfigDict.extra]\nis set to <code>'allow'</code>.</li>\n<li><strong>__pydantic_fields_set__:</strong>  The names of fields explicitly set during instantiation.</li>\n<li><strong>__pydantic_private__:</strong>  Values of private attributes set on the model instance.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cellbin2.utils.config.DefaultIMage.clarity", "modulename": "cellbin2.utils.config", "qualname": "DefaultIMage.clarity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.config.DefaultIMage.model_config", "modulename": "cellbin2.utils.config", "qualname": "DefaultIMage.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "cellbin2.utils.config.Config", "modulename": "cellbin2.utils.config", "qualname": "Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.__init__", "modulename": "cellbin2.utils.config", "qualname": "Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">weights_root</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.utils.config.Config.clarity", "modulename": "cellbin2.utils.config", "qualname": "Config.clarity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.track_points", "modulename": "cellbin2.utils.config", "qualname": "Config.track_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.default_image", "modulename": "cellbin2.utils.config", "qualname": "Config.default_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.calibration", "modulename": "cellbin2.utils.config", "qualname": "Config.calibration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.template_ref_v1", "modulename": "cellbin2.utils.config", "qualname": "Config.template_ref_v1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.template_ref_v2", "modulename": "cellbin2.utils.config", "qualname": "Config.template_ref_v2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.track_lines", "modulename": "cellbin2.utils.config", "qualname": "Config.track_lines", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.chip_detector", "modulename": "cellbin2.utils.config", "qualname": "Config.chip_detector", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.cell_segmentation", "modulename": "cellbin2.utils.config", "qualname": "Config.cell_segmentation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.tissue_segmentation", "modulename": "cellbin2.utils.config", "qualname": "Config.tissue_segmentation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.registration", "modulename": "cellbin2.utils.config", "qualname": "Config.registration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.cell_correct", "modulename": "cellbin2.utils.config", "qualname": "Config.cell_correct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.Config.genetic_standards", "modulename": "cellbin2.utils.config", "qualname": "Config.genetic_standards", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.config.main", "modulename": "cellbin2.utils.config", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr", "modulename": "cellbin2.utils.ipr", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.IPR_VERSION", "modulename": "cellbin2.utils.ipr", "qualname": "IPR_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;0.3.0&#x27;"}, {"fullname": "cellbin2.utils.ipr.ALLOWED", "modulename": "cellbin2.utils.ipr", "qualname": "ALLOWED", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;bool&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;numpy.int64&#x27;&gt;, &lt;class &#x27;numpy.int32&#x27;&gt;, &lt;class &#x27;numpy.float64&#x27;&gt;, &lt;class &#x27;numpy.ndarray&#x27;&gt;, &lt;class &#x27;numpy.bool_&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;]"}, {"fullname": "cellbin2.utils.ipr.BaseIpr", "modulename": "cellbin2.utils.ipr", "qualname": "BaseIpr", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.BaseIpr.get_attrs", "modulename": "cellbin2.utils.ipr", "qualname": "BaseIpr.get_attrs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.ImageInfo", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo", "kind": "class", "doc": "<p></p>\n", "bases": "BaseIpr"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.AppFileVer", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.AppFileVer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.BackgroundBalance", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.BackgroundBalance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.BitDepth", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.BitDepth", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Brightness", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Brightness", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.ChannelCount", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.ChannelCount", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.ColorEnhancement", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.ColorEnhancement", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Contrast", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Contrast", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.DeviceSN", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.DeviceSN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.DistortionCorrection", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.DistortionCorrection", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.ExposureTime", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.ExposureTime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.FOVHeight", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.FOVHeight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.FOVWidth", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.FOVWidth", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Gain", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Gain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Gamma", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Gamma", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.GammaShift", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.GammaShift", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Illuminance", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Illuminance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Manufacturer", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Manufacturer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Model", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Overlap", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Overlap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.PixelSizeX", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.PixelSizeX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.PixelSizeY", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.PixelSizeY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.QCResultFile", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.QCResultFile", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.RegisterVersion", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.RegisterVersion", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.RGBScale", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.RGBScale", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.STOmicsChipSN", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.STOmicsChipSN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.ScanChannel", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.ScanChannel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.ScanCols", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.ScanCols", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.ScanObjective", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.ScanObjective", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.ScanRows", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.ScanRows", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.ScanTime", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.ScanTime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.Sharpness", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.Sharpness", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.StitchedImage", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.StitchedImage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.WhiteBalance", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.WhiteBalance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.STOmicsChipFovCol", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.STOmicsChipFovCol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.ImageInfo.STOmicsChipFovRow", "modulename": "cellbin2.utils.ipr", "qualname": "ImageInfo.STOmicsChipFovRow", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.QCInfo", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo", "kind": "class", "doc": "<p></p>\n", "bases": "BaseIpr"}, {"fullname": "cellbin2.utils.ipr.QCInfo.ClarityPreds", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.ClarityPreds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.QCInfo.ClarityCounts", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.ClarityCounts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.QCInfo.ClarityCutSize", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.ClarityCutSize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;List[(int, int)]&#x27;"}, {"fullname": "cellbin2.utils.ipr.QCInfo.ClarityOverlap", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.ClarityOverlap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.ClarityScore", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.ClarityScore", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.Experimenter", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.Experimenter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.QCInfo.GoodFovCount", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.GoodFovCount", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.ImageQCVersion", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.ImageQCVersion", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.QCInfo.QCPassFlag", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.QCPassFlag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.RemarkInfo", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.RemarkInfo", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.QCInfo.StainType", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.StainType", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.QCInfo.TemplateRecall", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.TemplateRecall", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.QCInfo.TemplateValidArea", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.TemplateValidArea", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.QCInfo.TotalFovCount", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.TotalFovCount", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.TrackCrossQCPassFlag", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.TrackCrossQCPassFlag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.ChipDetectQCPassFlag", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.ChipDetectQCPassFlag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.TrackLineChannel", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.TrackLineChannel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.TrackLineScore", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.TrackLineScore", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.QCInfo.CrossPoints", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.CrossPoints", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.ipr.CrossPoints"}, {"fullname": "cellbin2.utils.ipr.QCInfo.ChipBBox", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.ChipBBox", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cellbin2.utils.ipr.ChipBBox"}, {"fullname": "cellbin2.utils.ipr.QCInfo.update_clarity", "modulename": "cellbin2.utils.ipr", "qualname": "QCInfo.update_clarity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">clarity_out</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">clarity</span><span class=\"o\">.</span><span class=\"n\">ClarityOutput</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.ChipBBox", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.LeftTop", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.LeftTop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.LeftBottom", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.LeftBottom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.RightTop", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.RightTop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.RightBottom", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.RightBottom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.ScaleX", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.ScaleX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.ScaleY", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.ScaleY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.ChipSize", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.ChipSize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.Rotation", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.Rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.IsAvailable", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.IsAvailable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.update", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">box</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipBoxInfo</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.ChipBBox.get", "modulename": "cellbin2.utils.ipr", "qualname": "ChipBBox.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.CrossPoints", "modulename": "cellbin2.utils.ipr", "qualname": "CrossPoints", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.CrossPoints.add_dataset", "modulename": "cellbin2.utils.ipr", "qualname": "CrossPoints.add_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.CrossPoints.add_points", "modulename": "cellbin2.utils.ipr", "qualname": "CrossPoints.add_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.CrossPoints.group_points", "modulename": "cellbin2.utils.ipr", "qualname": "CrossPoints.group_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.CrossPoints.stack_points", "modulename": "cellbin2.utils.ipr", "qualname": "CrossPoints.stack_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.CrossPoints.clear", "modulename": "cellbin2.utils.ipr", "qualname": "CrossPoints.clear", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.Register00OffsetInfo", "modulename": "cellbin2.utils.ipr", "qualname": "Register00OffsetInfo", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Register00OffsetInfo.offset", "modulename": "cellbin2.utils.ipr", "qualname": "Register00OffsetInfo.offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "cellbin2.utils.ipr.Register00OffsetInfo.dist", "modulename": "cellbin2.utils.ipr", "qualname": "Register00OffsetInfo.dist", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.Register00OffsetInfo.update", "modulename": "cellbin2.utils.ipr", "qualname": "Register00OffsetInfo.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">Registration00Offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.Register00", "modulename": "cellbin2.utils.ipr", "qualname": "Register00", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Register00.rot0", "modulename": "cellbin2.utils.ipr", "qualname": "Register00.rot0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Register00.rot90", "modulename": "cellbin2.utils.ipr", "qualname": "Register00.rot90", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Register00.rot180", "modulename": "cellbin2.utils.ipr", "qualname": "Register00.rot180", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Register00.rot270", "modulename": "cellbin2.utils.ipr", "qualname": "Register00.rot270", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Register00.update", "modulename": "cellbin2.utils.ipr", "qualname": "Register00.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">Registration00Output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.Register00.get", "modulename": "cellbin2.utils.ipr", "qualname": "Register00.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">Registration00Output</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.RegisterInfo", "modulename": "cellbin2.utils.ipr", "qualname": "RegisterInfo", "kind": "class", "doc": "<p></p>\n", "bases": "BaseIpr"}, {"fullname": "cellbin2.utils.ipr.RegisterInfo.OffsetX", "modulename": "cellbin2.utils.ipr", "qualname": "RegisterInfo.OffsetX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.RegisterInfo.OffsetY", "modulename": "cellbin2.utils.ipr", "qualname": "RegisterInfo.OffsetY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.RegisterInfo.Flip", "modulename": "cellbin2.utils.ipr", "qualname": "RegisterInfo.Flip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.RegisterInfo.Method", "modulename": "cellbin2.utils.ipr", "qualname": "RegisterInfo.Method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.RegisterInfo.CounterRot90", "modulename": "cellbin2.utils.ipr", "qualname": "RegisterInfo.CounterRot90", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.RegisterInfo.MatrixShape", "modulename": "cellbin2.utils.ipr", "qualname": "RegisterInfo.MatrixShape", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "cellbin2.utils.ipr.RegisterInfo.update", "modulename": "cellbin2.utils.ipr", "qualname": "RegisterInfo.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">RegistrationOutput</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.Register", "modulename": "cellbin2.utils.ipr", "qualname": "Register", "kind": "class", "doc": "<p></p>\n", "bases": "RegisterInfo"}, {"fullname": "cellbin2.utils.ipr.Register.Rotation", "modulename": "cellbin2.utils.ipr", "qualname": "Register.Rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.Register.ScaleX", "modulename": "cellbin2.utils.ipr", "qualname": "Register.ScaleX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.Register.ScaleY", "modulename": "cellbin2.utils.ipr", "qualname": "Register.ScaleY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.Register.XStart", "modulename": "cellbin2.utils.ipr", "qualname": "Register.XStart", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.Register.YStart", "modulename": "cellbin2.utils.ipr", "qualname": "Register.YStart", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.Register.MatrixTemplate", "modulename": "cellbin2.utils.ipr", "qualname": "Register.MatrixTemplate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.Register.RegisterTemplate", "modulename": "cellbin2.utils.ipr", "qualname": "Register.RegisterTemplate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.Register.RegisterTrackTemplate", "modulename": "cellbin2.utils.ipr", "qualname": "Register.RegisterTrackTemplate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.Register.GeneChipBBox", "modulename": "cellbin2.utils.ipr", "qualname": "Register.GeneChipBBox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Register.Register00", "modulename": "cellbin2.utils.ipr", "qualname": "Register.Register00", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Register.RegisterChip", "modulename": "cellbin2.utils.ipr", "qualname": "Register.RegisterChip", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.TissueSeg", "modulename": "cellbin2.utils.ipr", "qualname": "TissueSeg", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.TissueSeg.TissueMask", "modulename": "cellbin2.utils.ipr", "qualname": "TissueSeg.TissueMask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.TissueSeg.TissueSegScore", "modulename": "cellbin2.utils.ipr", "qualname": "TissueSeg.TissueSegScore", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.TissueSeg.TissueSegShape", "modulename": "cellbin2.utils.ipr", "qualname": "TissueSeg.TissueSegShape", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "cellbin2.utils.ipr.CellSeg", "modulename": "cellbin2.utils.ipr", "qualname": "CellSeg", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.CellSeg.CellMask", "modulename": "cellbin2.utils.ipr", "qualname": "CellSeg.CellMask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.CellSeg.CellSegTrace", "modulename": "cellbin2.utils.ipr", "qualname": "CellSeg.CellSegTrace", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.CellSeg.CellSegShape", "modulename": "cellbin2.utils.ipr", "qualname": "CellSeg.CellSegShape", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "cellbin2.utils.ipr.ScopeStitch", "modulename": "cellbin2.utils.ipr", "qualname": "ScopeStitch", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ScopeStitch.GlobalHeight", "modulename": "cellbin2.utils.ipr", "qualname": "ScopeStitch.GlobalHeight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ScopeStitch.GlobalWidth", "modulename": "cellbin2.utils.ipr", "qualname": "ScopeStitch.GlobalWidth", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.ipr.ScopeStitch.GlobalLoc", "modulename": "cellbin2.utils.ipr", "qualname": "ScopeStitch.GlobalLoc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.StitchEval", "modulename": "cellbin2.utils.ipr", "qualname": "StitchEval", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.StitchEval.MaxDeviation", "modulename": "cellbin2.utils.ipr", "qualname": "StitchEval.MaxDeviation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.StitchEval.GlobalDeviation", "modulename": "cellbin2.utils.ipr", "qualname": "StitchEval.GlobalDeviation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.Stitch", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Stitch.TemplateSource", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.TemplateSource", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.Stitch.WhichStitch", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.WhichStitch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.ipr.Stitch.TemplatePoint", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.TemplatePoint", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.Stitch.TrackPoint", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.TrackPoint", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.Stitch.TransformTemplate", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.TransformTemplate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.Stitch.TransformTrackPoint", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.TransformTrackPoint", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.Stitch.TransformChipBBox", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.TransformChipBBox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Stitch.ScopeStitch", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.ScopeStitch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Stitch.StitchEval", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.StitchEval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Stitch.TransformShape", "modulename": "cellbin2.utils.ipr", "qualname": "Stitch.TransformShape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Scope", "modulename": "cellbin2.utils.ipr", "qualname": "Scope", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Scope.Confidence", "modulename": "cellbin2.utils.ipr", "qualname": "Scope.Confidence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.Scope.OffsetX", "modulename": "cellbin2.utils.ipr", "qualname": "Scope.OffsetX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.Scope.OffsetY", "modulename": "cellbin2.utils.ipr", "qualname": "Scope.OffsetY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "cellbin2.utils.ipr.Calibration", "modulename": "cellbin2.utils.ipr", "qualname": "Calibration", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Calibration.CalibrationQCPassFlag", "modulename": "cellbin2.utils.ipr", "qualname": "Calibration.CalibrationQCPassFlag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.int64"}, {"fullname": "cellbin2.utils.ipr.Calibration.Scope", "modulename": "cellbin2.utils.ipr", "qualname": "Calibration.Scope", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.Calibration.update", "modulename": "cellbin2.utils.ipr", "qualname": "Calibration.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">CalibrationInfo</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.ManualState", "modulename": "cellbin2.utils.ipr", "qualname": "ManualState", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ManualState.calibration", "modulename": "cellbin2.utils.ipr", "qualname": "ManualState.calibration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ManualState.cellseg", "modulename": "cellbin2.utils.ipr", "qualname": "ManualState.cellseg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ManualState.register", "modulename": "cellbin2.utils.ipr", "qualname": "ManualState.register", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ManualState.stitch", "modulename": "cellbin2.utils.ipr", "qualname": "ManualState.stitch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ManualState.tissueseg", "modulename": "cellbin2.utils.ipr", "qualname": "ManualState.tissueseg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.StereoResepSwitch", "modulename": "cellbin2.utils.ipr", "qualname": "StereoResepSwitch", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.StereoResepSwitch.cellseg", "modulename": "cellbin2.utils.ipr", "qualname": "StereoResepSwitch.cellseg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.StereoResepSwitch.register", "modulename": "cellbin2.utils.ipr", "qualname": "StereoResepSwitch.register", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.StereoResepSwitch.stitch", "modulename": "cellbin2.utils.ipr", "qualname": "StereoResepSwitch.stitch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.StereoResepSwitch.tissueseg", "modulename": "cellbin2.utils.ipr", "qualname": "StereoResepSwitch.tissueseg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.ipr.ImageChannel", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel", "kind": "class", "doc": "<p></p>\n", "bases": "cellbin2.utils.HDF5"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.CellSeg", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.CellSeg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.ImageInfo", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.ImageInfo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.QCInfo", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.QCInfo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.Register", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.Register", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.Stitch", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.Stitch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.TissueSeg", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.TissueSeg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.update_template_points", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.update_template_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">points_info</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">TrackPointsInfo</span>,</span><span class=\"param\">\t<span class=\"n\">template_info</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">inference</span><span class=\"o\">.</span><span class=\"n\">TemplateInfo</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.update_registration", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.update_registration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">RegistrationOutput</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.get_registration", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.get_registration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">RegistrationOutput</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.update_basic_info", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.update_basic_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">chip_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">stain_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.box_info", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.box_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.stitched_template_info", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.stitched_template_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageChannel.transform_template_info", "modulename": "cellbin2.utils.ipr", "qualname": "ImageChannel.transform_template_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.IFChannel", "modulename": "cellbin2.utils.ipr", "qualname": "IFChannel", "kind": "class", "doc": "<p></p>\n", "bases": "ImageChannel"}, {"fullname": "cellbin2.utils.ipr.IFChannel.Calibration", "modulename": "cellbin2.utils.ipr", "qualname": "IFChannel.Calibration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.IFChannel.CellSeg", "modulename": "cellbin2.utils.ipr", "qualname": "IFChannel.CellSeg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.IFChannel.ImageInfo", "modulename": "cellbin2.utils.ipr", "qualname": "IFChannel.ImageInfo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.IFChannel.QCInfo", "modulename": "cellbin2.utils.ipr", "qualname": "IFChannel.QCInfo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.IFChannel.Register", "modulename": "cellbin2.utils.ipr", "qualname": "IFChannel.Register", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.IFChannel.Stitch", "modulename": "cellbin2.utils.ipr", "qualname": "IFChannel.Stitch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.IFChannel.TissueSeg", "modulename": "cellbin2.utils.ipr", "qualname": "IFChannel.TissueSeg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageProcessRecord", "modulename": "cellbin2.utils.ipr", "qualname": "ImageProcessRecord", "kind": "class", "doc": "<p></p>\n", "bases": "cellbin2.utils.HDF5"}, {"fullname": "cellbin2.utils.ipr.ImageProcessRecord.IPRVersion", "modulename": "cellbin2.utils.ipr", "qualname": "ImageProcessRecord.IPRVersion", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageProcessRecord.ManualState", "modulename": "cellbin2.utils.ipr", "qualname": "ImageProcessRecord.ManualState", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.ImageProcessRecord.Preview", "modulename": "cellbin2.utils.ipr", "qualname": "ImageProcessRecord.Preview", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "cellbin2.utils.ipr.ImageProcessRecord.StereoResepSwitch", "modulename": "cellbin2.utils.ipr", "qualname": "ImageProcessRecord.StereoResepSwitch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.ipr.write_channel_image", "modulename": "cellbin2.utils.ipr", "qualname": "write_channel_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span>,</span><span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.write", "modulename": "cellbin2.utils.ipr", "qualname": "write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span>,</span><span class=\"param\">\t<span class=\"n\">ipr</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageProcessRecord</span>,</span><span class=\"param\">\t<span class=\"n\">extra_images</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.read", "modulename": "cellbin2.utils.ipr", "qualname": "read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageProcessRecord</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">IFChannel</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">ipr</span><span class=\"o\">.</span><span class=\"n\">ImageChannel</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.read_key_metrics", "modulename": "cellbin2.utils.ipr", "qualname": "read_key_metrics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.ipr.main", "modulename": "cellbin2.utils.ipr", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix", "modulename": "cellbin2.utils.matrix", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix", "kind": "class", "doc": "<p>\u5355\u4e2a\u77e9\u9635\u7ba1\u7406\uff0c\u662f cellbin \u751f\u6210\u7684\u77e9\u9635\uff0c\u4fdd\u5b58\u7684\u65f6\u5019\uff0c\u4f1a\u8f6c\u6210gef\u7684\u65b9\u5f0f\u4f9b\u540e\u7eed\u8bfb\u5199</p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.__init__", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_path</strong>:  cellbin gef \u7684\u6587\u4ef6\u8def\u5f84</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">matrix_type</span><span class=\"o\">=&lt;</span><span class=\"n\">TechType</span><span class=\"o\">.</span><span class=\"n\">Transcriptomics</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.file_path", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.file_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.matrix_type", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.matrix_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.raw_data", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.raw_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.cluster_data", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.cluster_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.sn", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.sn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.cell_diameter", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.cell_diameter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.cell_n_gene", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.cell_n_gene", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.cell_MID_counts", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.cell_MID_counts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.reset", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.reset", "kind": "function", "doc": "<p>\u91ca\u653e\u5185\u5b58</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.shape", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.read", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gef_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.get_cellcount", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.get_cellcount", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.get_cellarea", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.get_cellarea", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.get_genetype", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.get_genetype", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.get_MID", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.get_MID", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.get_total_MID", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.get_total_MID", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.get_faction_cell_gene", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.get_faction_cell_gene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshod</span><span class=\"o\">=</span><span class=\"mi\">200</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.plot_statistic_vio", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.plot_statistic_vio", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.get_cluster_data", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.get_cluster_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.celldensity", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.celldensity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.plot_spatail_figure", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.plot_spatail_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">colormin</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colormax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;celldensity&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;./&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.write_h5ad", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.write_h5ad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.cbMatrix.write_gef", "modulename": "cellbin2.utils.matrix", "qualname": "cbMatrix.write_gef", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.BinMatrix", "modulename": "cellbin2.utils.matrix", "qualname": "BinMatrix", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.BinMatrix.__init__", "modulename": "cellbin2.utils.matrix", "qualname": "BinMatrix.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">bin_read</span><span class=\"o\">=</span><span class=\"mi\">100</span></span>)</span>"}, {"fullname": "cellbin2.utils.matrix.BinMatrix.reset", "modulename": "cellbin2.utils.matrix", "qualname": "BinMatrix.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bin_read</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.BinMatrix.stereo_exp", "modulename": "cellbin2.utils.matrix", "qualname": "BinMatrix.stereo_exp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.BinMatrix.read", "modulename": "cellbin2.utils.matrix", "qualname": "BinMatrix.read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bin_size</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.BinMatrix.get_total_MID", "modulename": "cellbin2.utils.matrix", "qualname": "BinMatrix.get_total_MID", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.BinMatrix.MID_counts", "modulename": "cellbin2.utils.matrix", "qualname": "BinMatrix.MID_counts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.BinMatrix.create_heatmap", "modulename": "cellbin2.utils.matrix", "qualname": "BinMatrix.create_heatmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plot_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix", "kind": "class", "doc": "<p>\u8054\u5408\u7ba1\u7406\u591a\u4e2a\u77e9\u9635\uff1a\u53ef\u80fd\u9700\u8981</p>\n"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.__init__", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cellbin_path</span>,</span><span class=\"param\">\t<span class=\"n\">adjusted_path</span>,</span><span class=\"param\">\t<span class=\"n\">tissuegef_path</span>,</span><span class=\"param\">\t<span class=\"n\">raw_path</span>,</span><span class=\"param\">\t<span class=\"n\">matrix_type</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">TechType</span></span>)</span>"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.cellbin", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.cellbin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.tissuebin", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.tissuebin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.rawbin", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.rawbin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.adjustedbin", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.adjustedbin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.matrix_type", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.matrix_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.read", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.write", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.MultiMatrix.print_info", "modulename": "cellbin2.utils.matrix", "qualname": "MultiMatrix.print_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.matrix.main", "modulename": "cellbin2.utils.matrix", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.plot_funcs", "modulename": "cellbin2.utils.plot_funcs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.plot_funcs.pt_enhance_method", "modulename": "cellbin2.utils.plot_funcs", "qualname": "pt_enhance_method", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ssDNA&#x27;: &lt;function dapi_enhance&gt;, &#x27;DAPI&#x27;: &lt;function dapi_enhance&gt;, &#x27;HE&#x27;: &lt;function he_enhance&gt;}"}, {"fullname": "cellbin2.utils.plot_funcs.get_tissue_corner_points", "modulename": "cellbin2.utils.plot_funcs", "qualname": "get_tissue_corner_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tissue_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.plot_funcs.crop_image", "modulename": "cellbin2.utils.plot_funcs", "qualname": "crop_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">corner_temp_points</span>,</span><span class=\"param\">\t<span class=\"n\">points</span>,</span><span class=\"param\">\t<span class=\"n\">image</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span>,</span><span class=\"param\">\t<span class=\"n\">image_type</span>,</span><span class=\"param\">\t<span class=\"n\">draw_radius</span>,</span><span class=\"param\">\t<span class=\"n\">template_color</span>,</span><span class=\"param\">\t<span class=\"n\">draw_thickness</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.plot_funcs.template_painting", "modulename": "cellbin2.utils.plot_funcs", "qualname": "template_painting", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_data:</strong> </li>\n<li><strong>tissue_seg_data:</strong> </li>\n<li><strong>image_type:</strong>  str -- ssDNA, DAPI, HE</li>\n<li><strong>qc_points:</strong> </li>\n<li><strong>template_points:</strong> </li>\n<li><strong>image_size:</strong>  image height size</li>\n<li><strong>track_color:</strong> </li>\n<li><strong>template_color:</strong> </li>\n<li><strong>chip_rect_color:</strong> </li>\n<li><strong>tissue_rect_color:</strong> </li>\n<li><strong>draw_radius:</strong> </li>\n<li><strong>draw_thickness:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tissue_seg_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">image_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">qc_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">template_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2048</span>,</span><span class=\"param\">\t<span class=\"n\">track_color</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">template_color</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">chip_rect_color</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tissue_rect_color</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">draw_radius</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">draw_thickness</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.plot_funcs.chip_box_painting", "modulename": "cellbin2.utils.plot_funcs", "qualname": "chip_box_painting", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image_data:</strong> </li>\n<li><strong>chip_info:</strong> </li>\n<li><strong>ipr_path:</strong> </li>\n<li><strong>layer:</strong> </li>\n<li><strong>image_size:</strong> </li>\n<li><strong>chip_color:</strong> </li>\n<li><strong>draw_thickness:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">chip_info</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"o\">.</span><span class=\"n\">ChipBoxInfo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ipr_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">layer</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2048</span>,</span><span class=\"param\">\t<span class=\"n\">chip_color</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">draw_thickness</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.plot_funcs.get_view_image", "modulename": "cellbin2.utils.plot_funcs", "qualname": "get_view_image", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image:</strong>  input image or image path</li>\n<li><strong>points:</strong>  detected chip box points</li>\n<li><strong>is_matrix:</strong> </li>\n<li><strong>downsample_size:</strong>  enhanced image downsample size</li>\n<li><strong>crop_size:</strong>  crop image size</li>\n<li><strong>color:</strong>  chip box color,(B, G, R)</li>\n<li><strong>radius:</strong>  circle radius, it must be a multiple of scale_line_pixels pixels</li>\n<li><strong>thickness:</strong> </li>\n<li><strong>scale_line_pixels:</strong>   units of scale line</li>\n<li><strong>scale_line_length:</strong>  # scale line length</li>\n<li><strong>output_path:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">is_matrix</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">downsample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>,</span><span class=\"param\">\t<span class=\"n\">crop_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">thickness</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">scale_line_pixels</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">scale_line_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.pro_monitor", "modulename": "cellbin2.utils.pro_monitor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.pro_monitor.CONSTANT", "modulename": "cellbin2.utils.pro_monitor", "qualname": "CONSTANT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1024"}, {"fullname": "cellbin2.utils.pro_monitor.UNITS", "modulename": "cellbin2.utils.pro_monitor", "qualname": "UNITS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;B&#x27;, &#x27;KiB&#x27;, &#x27;MiB&#x27;, &#x27;GiB&#x27;, &#x27;TiB&#x27;)"}, {"fullname": "cellbin2.utils.pro_monitor.ALL_UNITS", "modulename": "cellbin2.utils.pro_monitor", "qualname": "ALL_UNITS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;B&#x27;: 1, &#x27;KiB&#x27;: 0.0009765625, &#x27;MiB&#x27;: 9.5367431640625e-07, &#x27;GiB&#x27;: 9.313225746154785e-10, &#x27;TiB&#x27;: 9.094947017729282e-13}"}, {"fullname": "cellbin2.utils.pro_monitor.DEFAULT_UNIT", "modulename": "cellbin2.utils.pro_monitor", "qualname": "DEFAULT_UNIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;MiB&#x27;"}, {"fullname": "cellbin2.utils.pro_monitor.DECIMAL", "modulename": "cellbin2.utils.pro_monitor", "qualname": "DECIMAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "cellbin2.utils.pro_monitor.process_decorator", "modulename": "cellbin2.utils.pro_monitor", "qualname": "process_decorator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;MiB&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rle", "modulename": "cellbin2.utils.rle", "kind": "module", "doc": "<p>Implement Run-Length Encode for storing CellMask and TissueMask</p>\n"}, {"fullname": "cellbin2.utils.rle.RLEncode", "modulename": "cellbin2.utils.rle", "qualname": "RLEncode", "kind": "class", "doc": "<p>Reference: <a href=\"https://en.wikipedia.org/wiki/Run-length_encoding\">https://en.wikipedia.org/wiki/Run-length_encoding</a></p>\n"}, {"fullname": "cellbin2.utils.rle.RLEncode.size", "modulename": "cellbin2.utils.rle", "qualname": "RLEncode.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rle.RLEncode.step", "modulename": "cellbin2.utils.rle", "qualname": "RLEncode.step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rle.RLEncode.batch", "modulename": "cellbin2.utils.rle", "qualname": "RLEncode.batch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rle.RLEncode.encode", "modulename": "cellbin2.utils.rle", "qualname": "RLEncode.encode", "kind": "function", "doc": "<p>arr: numpy array, 1 - mask, 0 - background\nReturns run length econde data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rle.RLEncode.decode", "modulename": "cellbin2.utils.rle", "qualname": "RLEncode.decode", "kind": "function", "doc": "<p>mask_rle: run-length as string formated (start length)\nshape: (height,width) of array to return\nReturns numpy array, 1 - mask, 0 - background</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_rle</span>, </span><span class=\"param\"><span class=\"n\">shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi", "modulename": "cellbin2.utils.rpi", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.get_tissue_mask", "modulename": "cellbin2.utils.rpi", "qualname": "get_tissue_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi.get_cell_outline", "modulename": "cellbin2.utils.rpi", "qualname": "get_cell_outline", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">line_width</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi.ChannelImage", "modulename": "cellbin2.utils.rpi", "qualname": "ChannelImage", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.Bin", "modulename": "cellbin2.utils.rpi", "qualname": "Bin", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.Bin.XimageNumber", "modulename": "cellbin2.utils.rpi", "qualname": "Bin.XimageNumber", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.Bin.YimageNumber", "modulename": "cellbin2.utils.rpi", "qualname": "Bin.YimageNumber", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.Bin.sizex", "modulename": "cellbin2.utils.rpi", "qualname": "Bin.sizex", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.Bin.sizey", "modulename": "cellbin2.utils.rpi", "qualname": "Bin.sizey", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.Bin.split", "modulename": "cellbin2.utils.rpi", "qualname": "Bin.split", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">img_siz</span><span class=\"o\">=</span><span class=\"mi\">256</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi.Image", "modulename": "cellbin2.utils.rpi", "qualname": "Image", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.Image.__init__", "modulename": "cellbin2.utils.rpi", "qualname": "Image.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">GrayLevelElbow</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">MaxGrayLevel</span><span class=\"o\">=</span><span class=\"mi\">255</span>,</span><span class=\"param\">\t<span class=\"n\">MinGrayLevel</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">TrackLayer</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "cellbin2.utils.rpi.Image.Color", "modulename": "cellbin2.utils.rpi", "qualname": "Image.Color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.Image.GrayLevelElbow", "modulename": "cellbin2.utils.rpi", "qualname": "Image.GrayLevelElbow", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.Image.MaxGrayLevel", "modulename": "cellbin2.utils.rpi", "qualname": "Image.MaxGrayLevel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.Image.MinGrayLevel", "modulename": "cellbin2.utils.rpi", "qualname": "Image.MinGrayLevel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.Image.TrackLayer", "modulename": "cellbin2.utils.rpi", "qualname": "Image.TrackLayer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.Image.pyramid", "modulename": "cellbin2.utils.rpi", "qualname": "Image.pyramid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mat</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">CBImage</span>, </span><span class=\"param\"><span class=\"n\">mag</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi.MetaInfo", "modulename": "cellbin2.utils.rpi", "qualname": "MetaInfo", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.MetaInfo.imgSize", "modulename": "cellbin2.utils.rpi", "qualname": "MetaInfo.imgSize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.MetaInfo.sizex", "modulename": "cellbin2.utils.rpi", "qualname": "MetaInfo.sizex", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.MetaInfo.sizey", "modulename": "cellbin2.utils.rpi", "qualname": "MetaInfo.sizey", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.MetaInfo.version", "modulename": "cellbin2.utils.rpi", "qualname": "MetaInfo.version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cellbin2.utils.rpi.MetaInfo.x_start", "modulename": "cellbin2.utils.rpi", "qualname": "MetaInfo.x_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.MetaInfo.y_start", "modulename": "cellbin2.utils.rpi", "qualname": "MetaInfo.y_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cellbin2.utils.rpi.RecordPyramidImage", "modulename": "cellbin2.utils.rpi", "qualname": "RecordPyramidImage", "kind": "class", "doc": "<p></p>\n", "bases": "cellbin2.utils.HDF5"}, {"fullname": "cellbin2.utils.rpi.RecordPyramidImage.metaInfo", "modulename": "cellbin2.utils.rpi", "qualname": "RecordPyramidImage.metaInfo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.rpi.RecordPyramidImage.create", "modulename": "cellbin2.utils.rpi", "qualname": "RecordPyramidImage.create", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi.read", "modulename": "cellbin2.utils.rpi", "qualname": "read", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>h5_path</strong>:  \u672c\u5730rpi\u6587\u4ef6\u8def\u5f84</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">h5_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">rpi</span><span class=\"o\">.</span><span class=\"n\">RecordPyramidImage</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">rpi</span><span class=\"o\">.</span><span class=\"n\">ChannelImage</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi.write", "modulename": "cellbin2.utils.rpi", "qualname": "write", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>h5_path</strong>:  rpi\u6587\u4ef6\u5f85\u4fdd\u5b58\u7684\u672c\u5730\u8def\u5f84</li>\n<li><strong>extra_images</strong>:  \u7ec4\u56fe\u8def\u5f84</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">h5_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">extra_images</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi.readrpi", "modulename": "cellbin2.utils.rpi", "qualname": "readrpi", "kind": "function", "doc": "<p>Merge image patches back to large image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">h5</span>, </span><span class=\"param\"><span class=\"n\">bin_size</span>, </span><span class=\"param\"><span class=\"n\">staintype</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssDNA&#39;</span>, </span><span class=\"param\"><span class=\"n\">tType</span><span class=\"o\">=</span><span class=\"s1\">&#39;Image&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.rpi.main", "modulename": "cellbin2.utils.rpi", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo", "modulename": "cellbin2.utils.stereo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo.generate_stereo_file", "modulename": "cellbin2.utils.stereo", "qualname": "generate_stereo_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">PosixPath</span>,</span><span class=\"param\">\t<span class=\"n\">registered_image</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">PosixPath</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">compressed_image</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">PosixPath</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">matrix_template</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">PosixPath</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">gef</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">PosixPath</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">cellbin_gef</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">PosixPath</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">sn</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip", "modulename": "cellbin2.utils.stereo_chip", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.ChipNameType", "modulename": "cellbin2.utils.stereo_chip", "qualname": "ChipNameType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "cellbin2.utils.stereo_chip.ChipNameType.LONG", "modulename": "cellbin2.utils.stereo_chip", "qualname": "ChipNameType.LONG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChipNameType.LONG: 1&gt;"}, {"fullname": "cellbin2.utils.stereo_chip.ChipNameType.SHORT", "modulename": "cellbin2.utils.stereo_chip", "qualname": "ChipNameType.SHORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChipNameType.SHORT: 2&gt;"}, {"fullname": "cellbin2.utils.stereo_chip.ChipNameType.UNKNOWN", "modulename": "cellbin2.utils.stereo_chip", "qualname": "ChipNameType.UNKNOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChipNameType.UNKNOWN: 3&gt;"}, {"fullname": "cellbin2.utils.stereo_chip.MASK_FOV_LEN", "modulename": "cellbin2.utils.stereo_chip", "qualname": "MASK_FOV_LEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "1470"}, {"fullname": "cellbin2.utils.stereo_chip.CHIP_TEMPLATE", "modulename": "cellbin2.utils.stereo_chip", "qualname": "CHIP_TEMPLATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "[120, 150, 165, 195, 195, 165, 150, 120, 210]"}, {"fullname": "cellbin2.utils.stereo_chip.FOV_LEN", "modulename": "cellbin2.utils.stereo_chip", "qualname": "FOV_LEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "cellbin2.utils.stereo_chip.POINTS_BEGIN_X", "modulename": "cellbin2.utils.stereo_chip", "qualname": "POINTS_BEGIN_X", "kind": "variable", "doc": "<p></p>\n", "default_value": "105"}, {"fullname": "cellbin2.utils.stereo_chip.POINTS_BEGIN_Y", "modulename": "cellbin2.utils.stereo_chip", "qualname": "POINTS_BEGIN_Y", "kind": "variable", "doc": "<p></p>\n", "default_value": "105"}, {"fullname": "cellbin2.utils.stereo_chip.POINTS_END_X", "modulename": "cellbin2.utils.stereo_chip", "qualname": "POINTS_END_X", "kind": "variable", "doc": "<p></p>\n", "default_value": "163275"}, {"fullname": "cellbin2.utils.stereo_chip.POINTS_END_Y", "modulename": "cellbin2.utils.stereo_chip", "qualname": "POINTS_END_Y", "kind": "variable", "doc": "<p></p>\n", "default_value": "163275"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.__init__", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.__init__", "kind": "function", "doc": "<p>Coordinate reference\n    1   2   3   4   5   6\nG   -   -   -   -   -   -\nF   -   -   -   -   -   -\nE   -   -   -   -   -   -\nD   -   -   -   -   -   -\nC   -   -   -   -   -   -\nA   -   -   -   -   -   -</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chip_mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.chip_specif", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.chip_specif", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.fov_edge_len", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.fov_edge_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.fov_template", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.fov_template", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.name_type", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.name_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.width", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.height", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.is_from_S13", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.is_from_S13", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.S1_fov_count", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.S1_fov_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.exp_r", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.exp_r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.create_track_points", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.create_track_points", "kind": "function", "doc": "<p>\u81f3S13\u5927\u5c0f\u82af\u7247\u4e0a\u7684\u70b9\u7684\u5206\u5e03</p>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.set_zero_point_info", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.set_zero_point_info", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chip_name:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.zero_zero_point", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.zero_zero_point", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.zero_zero_chip_point", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.zero_zero_chip_point", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.norm_chip_size", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.norm_chip_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.get_chip_specif_str", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.get_chip_specif_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.get_version", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.get_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.chip_name", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.chip_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.update_expr", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.update_expr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.set_chip_size", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.set_chip_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.set_chip_specif", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.set_chip_specif", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.is_after_230508", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.is_after_230508", "kind": "function", "doc": "<p>\u914d\u51c6\u524d\u7f6e\u7528\u8be5\u53c2\u6570\u4f5c\u4e3a\u662f\u5426\u6ee1\u8db3\u8c03\u7528\u7684\u6761\u4ef6\uff0c\u8fd9\u662f\u6761\u4ef6\u4e4b\u4e00\uff0c\u8fd8\u9700\u8981\u6ee1\u8db3\u62cd\u56fe\u65f6\u82af\u7247\u653e\u7f6e\u89d2\u5ea6Rot90=0</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s13_min_num</strong>: </li>\n<li><strong>s6_min_num</strong>: </li>\n<li><strong>deprecated_word</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True\u8868\u793a\u8be5\u82af\u7247\u4ea7\u81ea230508\u540e</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">s13_min_num</span><span class=\"o\">=</span><span class=\"mi\">395</span>,</span><span class=\"param\">\t<span class=\"n\">s6_min_num</span><span class=\"o\">=</span><span class=\"mi\">3205</span>,</span><span class=\"param\">\t<span class=\"n\">deprecated_word</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;I&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;O&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.StereoChip.parse_info", "modulename": "cellbin2.utils.stereo_chip", "qualname": "StereoChip.parse_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chip_no</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.stereo_chip.main", "modulename": "cellbin2.utils.stereo_chip", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.tar", "modulename": "cellbin2.utils.tar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.tar.save_tar", "modulename": "cellbin2.utils.tar", "qualname": "save_tar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">save_path</span>, </span><span class=\"param\"><span class=\"n\">files</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.tar.update_ipr_in_tar", "modulename": "cellbin2.utils.tar", "qualname": "update_ipr_in_tar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tar_path</span>, </span><span class=\"param\"><span class=\"n\">ipr_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.weights_manager", "modulename": "cellbin2.utils.weights_manager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.weights_manager.CURR_DIR", "modulename": "cellbin2.utils.weights_manager", "qualname": "CURR_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/utils&#x27;"}, {"fullname": "cellbin2.utils.weights_manager.CB2_DIR", "modulename": "cellbin2.utils.weights_manager", "qualname": "CB2_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2&#x27;"}, {"fullname": "cellbin2.utils.weights_manager.DEFAULT_WEIGHTS_DIR", "modulename": "cellbin2.utils.weights_manager", "qualname": "DEFAULT_WEIGHTS_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/Data1/user/dengzhonghan/code/cellbin2dev/cellbin2/cellbin2/weights&#x27;"}, {"fullname": "cellbin2.utils.weights_manager.DNNModuleName", "modulename": "cellbin2.utils.weights_manager", "qualname": "DNNModuleName", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "cellbin2.utils.weights_manager.DNNModuleName.cellseg", "modulename": "cellbin2.utils.weights_manager", "qualname": "DNNModuleName.cellseg", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DNNModuleName.cellseg: 1&gt;"}, {"fullname": "cellbin2.utils.weights_manager.DNNModuleName.tissueseg", "modulename": "cellbin2.utils.weights_manager", "qualname": "DNNModuleName.tissueseg", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DNNModuleName.tissueseg: 2&gt;"}, {"fullname": "cellbin2.utils.weights_manager.DNNModuleName.clarity", "modulename": "cellbin2.utils.weights_manager", "qualname": "DNNModuleName.clarity", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DNNModuleName.clarity: 3&gt;"}, {"fullname": "cellbin2.utils.weights_manager.DNNModuleName.points_detect", "modulename": "cellbin2.utils.weights_manager", "qualname": "DNNModuleName.points_detect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DNNModuleName.points_detect: 4&gt;"}, {"fullname": "cellbin2.utils.weights_manager.DNNModuleName.chip_detect", "modulename": "cellbin2.utils.weights_manager", "qualname": "DNNModuleName.chip_detect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DNNModuleName.chip_detect: 5&gt;"}, {"fullname": "cellbin2.utils.weights_manager.download", "modulename": "cellbin2.utils.weights_manager", "qualname": "download", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">local_file</span>, </span><span class=\"param\"><span class=\"n\">file_url</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.weights_manager.WeightDownloader", "modulename": "cellbin2.utils.weights_manager", "qualname": "WeightDownloader", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.weights_manager.WeightDownloader.__init__", "modulename": "cellbin2.utils.weights_manager", "qualname": "WeightDownloader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">url_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "cellbin2.utils.weights_manager.WeightDownloader.weights_list", "modulename": "cellbin2.utils.weights_manager", "qualname": "WeightDownloader.weights_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cellbin2.utils.weights_manager.WeightDownloader.download_weight_by_names", "modulename": "cellbin2.utils.weights_manager", "qualname": "WeightDownloader.download_weight_by_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">weight_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.weights_manager.WeightDownloader.download_weights", "modulename": "cellbin2.utils.weights_manager", "qualname": "WeightDownloader.download_weights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">module_name</span><span class=\"p\">:</span> <span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">weights_manager</span><span class=\"o\">.</span><span class=\"n\">DNNModuleName</span>,</span><span class=\"param\">\t<span class=\"n\">weight_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.weights_manager.WeightDownloader.download_module_weight", "modulename": "cellbin2.utils.weights_manager", "qualname": "WeightDownloader.download_module_weight", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">module_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">cellbin2</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">weights_manager</span><span class=\"o\">.</span><span class=\"n\">DNNModuleName</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.weights_manager.download_by_names", "modulename": "cellbin2.utils.weights_manager", "qualname": "download_by_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">weight_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cellbin2.utils.weights_manager.download_all_weights", "modulename": "cellbin2.utils.weights_manager", "qualname": "download_all_weights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();